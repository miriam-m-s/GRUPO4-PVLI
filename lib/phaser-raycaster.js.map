{"version":3,"sources":["webpack://PhaserRaycaster/webpack/universalModuleDefinition","webpack://PhaserRaycaster/webpack/bootstrap","webpack://PhaserRaycaster/./src/main.js","webpack://PhaserRaycaster/./src/map/boundingBox.js","webpack://PhaserRaycaster/./src/map/config.js","webpack://PhaserRaycaster/./src/map/map-circle-methods.js","webpack://PhaserRaycaster/./src/map/map-container-methods.js","webpack://PhaserRaycaster/./src/map/map-core.js","webpack://PhaserRaycaster/./src/map/map-line-methods.js","webpack://PhaserRaycaster/./src/map/map-matterBody-methods.js","webpack://PhaserRaycaster/./src/map/map-polygon-methods.js","webpack://PhaserRaycaster/./src/map/map-rectangle-methods.js","webpack://PhaserRaycaster/./src/map/map-tilemap-methods.js","webpack://PhaserRaycaster/./src/map/segmentsCount.js","webpack://PhaserRaycaster/./src/ray/angle.js","webpack://PhaserRaycaster/./src/ray/cast.js","webpack://PhaserRaycaster/./src/ray/castCircle.js","webpack://PhaserRaycaster/./src/ray/castCone.js","webpack://PhaserRaycaster/./src/ray/cone.js","webpack://PhaserRaycaster/./src/ray/config.js","webpack://PhaserRaycaster/./src/ray/debug.js","webpack://PhaserRaycaster/./src/ray/enablePhysics.js","webpack://PhaserRaycaster/./src/ray/matter-physics-methods.js","webpack://PhaserRaycaster/./src/ray/origin.js","webpack://PhaserRaycaster/./src/ray/overlap.js","webpack://PhaserRaycaster/./src/ray/range.js","webpack://PhaserRaycaster/./src/ray/ray-core.js","webpack://PhaserRaycaster/./src/ray/ray.js","webpack://PhaserRaycaster/./src/ray/slice.js","webpack://PhaserRaycaster/./src/ray/stats.js","webpack://PhaserRaycaster/./src/raycaster-core.js"],"names":["PhaserRaycaster","scene","systems","sys","settings","isBooted","events","once","boot","register","PluginManager","prototype","eventEmitter","on","start","preUpdate","update","postUpdate","pause","resume","sleep","wake","shutdown","destroy","test","name","console","log","time","delta","undefined","createRaycaster","options","_Raycaster","constructor","require","Raycaster","module","exports","getBoundingBox","object","getBounds","rectangle","line","polygon","arc","container","tilemap","matterBody","segmentCount","boundingBox","config","type","getPoints","getSegments","updateMap","circle","setSegmentCount","collisionTiles","setCollisionTiles","setOrigin","forceConvex","forceVerticesMapping","dynamic","active","ray","_points","length","points","offset","Phaser","Geom","Point","x","displayWidth","originX","y","displayHeight","originY","rayA","Line","rayB","c","rotation","vector","SetToAngle","Angle","Length","cB","getPointB","origin","rayLength","Math","sqrt","pow","radius","scaleX","angle","dAngle","asin","push","_segments","scaleY","geom","segments","newPoints","point","i","getCircles","tempRay","_raycaster","createRay","list","child","map","data","get","iterate","setDataEnabled","set","childPoints","segment","pointA","getPointA","pointB","vectorA","vectorB","bind","iLength","childA","mapA","j","jLength","childB","mapB","Intersects","RectangleToRectangle","segmentA","segmentB","intersection","LineToLine","Map","raycaster","body","circleRadius","position","scale","bodies","generateBounds","bounds","bodyItem","parts","vertices","find","segmentIndex","findIndex","x1","y1","x2","y2","splice","closingSegment","matter","composite","Rectangle","min","max","closePath","last","getTopLeft","getTopRight","getBottomRight","getBottomLeft","detectionRange","MAX_SAFE_INTEGER","Distance","Between","LineToCircle","detectionRangeCircle","horizontal","horizontals","verticals","layer","row","tile","upperEdge","includes","index","leftEdge","vertical","height","width","tileWidth","tileHeight","verticalsLastColumn","column","filter","horizontalSegment","tiles","count","setAngle","Normalize","_ray","rayRange","setAngleDeg","DegToRad","cast","closestIntersection","closestSegment","closestObject","closestDistance","internal","startTime","performance","now","stats","method","rays","testedMappedObjects","hitMappedObjects","intersections","GetLineToRectangle","distance","target","objects","mappedObjects","raycasterMap","_boundingBox","setTo","Equals","isTangent","circleIntersections","Circle","GetLineToCircle","_stats","result","ignoreNotIntersectedRays","round","drawDebug","castCircle","originalAngle","maps","rayTargets","testedObjects","boundsInRange","objectB","sort","a","b","previousTarget","castSides","roundedTarget","intersectionA","intersectionB","autoSlice","slicedIntersections","slice","castCone","cone","minAngle","maxAngle","angleOffset","coneDeg","angleOffsetDeg","RadToDeg","ShortestBetween","abs","setCone","setConeDeg","angleDeg","collisionRange","enablePhysics","debugOptions","enabled","graphics","add","lineStyle","color","fillStyle","setDepth","clear","strokeLineShape","rayPoint","fillPoint","collisionCircle","bodyType","gameObject","shape","centerX","centerY","label","isSensor","ignoreGravity","setOnCollideActive","physics","existing","setCircle","setAllowGravity","setImmovable","setCollisionCategory","value","collisionFilter","category","setCollisionGroup","group","setCollidesWith","categories","flags","Array","isArray","mask","setOnCollide","callback","self","onCollideCallback","collisionInfo","rayCollided","processOverlap","setOnCollideEnd","onCollideEndCallback","func","bodyA","bodyB","onCollideWith","id","onCollideActiveCallback","setOnCollideWith","src","hasOwnProperty","overlap","targets","overlapCircle","isCollisionInfo","query","collides","getMatterBodies","testMatterOverlap","overlapCirc","hitbox","isCircle","halfWidth","testOverlap","CircleToCircle","CircleToRectangle","testArcadeOverlap","object1","object2","obj1","obj2","TriangleToCircle","RectangleToTriangle","part","TriangleToLine","Triangle","ContainsPoint","setRayRange","setDetectionRange","setCollisionRange","oldRangeMax","setRadius","isStatic","objectBounds","Ray","getStats","setRay","closed","slices","version","mapPoint","mapSegment","mapBoundingBox","total","static","rectangleMaps","polygonMaps","circleMaps","lineMaps","containerMaps","tilemapMaps","matterMaps","sortedPoints","mapSegmentCount","world","walls","top","bottom","setOptions","autoUpdate","debug","Object","assign","mapGameObjects","setBoundingBox","left","right","option","removeMappedObjects","indexOf","enableMaps","disableMaps","dynamicMaps","mapppedObject","strokeRectShape"],"mappings":"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KA;AALA,mBAOIrB,MAAM,CAACgC,IAAP,CAAY,IAAI9B,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBmE,YAAY,CAAClE,CAAb,GAAiB3B,SAAS,CAACkD,MAA3B,GAAoC3B,MAAM,CAACI,CAAjE,EAAoEkE,YAAY,CAAC/D,CAAb,GAAiB9B,SAAS,CAACkD,MAA3B,GAAoC3B,MAAM,CAACO,CAA/G,CAAZ;AACP;AAfmC;AAAA;AAAA;AAAA;AAAA;AAgBvC;AAxB8D;AAAA;AAAA;AAAA;AAAA;AAyBlE;AACJ;;AAED,OAAKV,OAAL,GAAeE,MAAf;AACA,OAAKiC,SAAL,GAAiBG,QAAjB;AAEA,SAAO,IAAP;AACH;AAAA,C;;;;;;;;;;;;AC7MD;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASqC,GAAT,CAAa7G,OAAb,EAAsB8G,SAAtB,EAAiC;AACpC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACI,OAAKhC,UAAL,GAAkBgC,SAAS,GAAGA,SAAH,GAAe,KAA1C;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,OAAK1F,IAAL;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,OAAKY,MAAL;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,OAAKD,OAAL;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,OAAKP,MAAL,GAAc,KAAd;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,OAAKhB,MAAL;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,OAAK0B,OAAL,GAAe,EAAf;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,OAAKmC,SAAL,GAAiB,EAAjB;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,OAAKhD,SAAL;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,OAAKC,WAAL;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,OAAKf,cAAL;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,OAAKgB,SAAL;AAEA,OAAKJ,MAAL,CAAYnB,OAAZ;AACA,OAAKuB,SAAL;AAEA,SAAO,IAAP;AACH;AAAA;AAEDsF,GAAG,CAAClI,SAAJ,GAAgB;AACZwC,QAAM,EAAEhB,mBAAO,CAAC,wCAAD,CAAP,CAAuBgB;AADnB,CAAhB;AAIA0F,GAAG,CAAClI,SAAJ,CAAcuB,WAAd,GAA4B2G,GAA5B,C;;;;;;;;;;;;ACjJA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASxF,SAAT,GAAgC;AAAA,MAAbY,GAAa,uEAAP,KAAO;AACnC,MAAG,CAAC,KAAKD,MAAT,EACI,OAAO,EAAP;AACJ,SAAO,KAAKE,OAAZ;AACH;AAAA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASZ,WAAT,GAAuB;AAC1B,MAAG,CAAC,KAAKU,MAAT,EACI,OAAO,EAAP;AACJ,SAAO,KAAKqC,SAAZ;AACH;AAAA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAAS9C,SAAT,GAAqB;AACxB,MAAG,CAAC,KAAKS,MAAT,EACI,OAAO,IAAP;AAEJ,MAAII,MAAM,GAAG,EAAb;AACA,MAAIoC,QAAQ,GAAG,EAAf,CALwB,CAOxB;;AACA,MAAInC,MAAM,GAAG,IAAIC,MAAM,CAACC,IAAP,CAAYC,KAAhB,EAAb;AACAH,QAAM,CAACI,CAAP,GAAW,KAAKjC,MAAL,CAAYiC,CAAZ,GAAgB,KAAKjC,MAAL,CAAYkC,YAAZ,GAA2B,KAAKlC,MAAL,CAAYmC,OAAlE;AACAN,QAAM,CAACO,CAAP,GAAW,KAAKpC,MAAL,CAAYoC,CAAZ,GAAgB,KAAKpC,MAAL,CAAYqC,aAAZ,GAA4B,KAAKrC,MAAL,CAAYsC,OAAnE;AACA,MAAI4C,MAAM,GAAG,KAAKlF,MAAL,CAAY+D,IAAZ,CAAiBoB,SAAjB,EAAb;AACA,MAAIC,MAAM,GAAG,KAAKpF,MAAL,CAAY+D,IAAZ,CAAiBd,SAAjB,EAAb,CAZwB,CAcxB;;AACA,MAAIN,QAAQ,GAAG,KAAK3C,MAAL,CAAY2C,QAA3B;;AACA,MAAGA,QAAQ,KAAK,CAAhB,EAAmB;AACf,QAAI0C,OAAO,GAAG,IAAIvD,MAAM,CAACC,IAAP,CAAYS,IAAhB,CAAqB,KAAKxC,MAAL,CAAYiC,CAAjC,EAAoC,KAAKjC,MAAL,CAAYoC,CAAhD,EAAmD8C,MAAM,CAACjD,CAAP,GAAW,KAAKjC,MAAL,CAAYwD,MAAvB,GAAgC3B,MAAM,CAACI,CAA1F,EAA6FiD,MAAM,CAAC9C,CAAP,GAAW,KAAKpC,MAAL,CAAY8D,MAAvB,GAAgCjC,MAAM,CAACO,CAApI,CAAd;AACAN,UAAM,CAACC,IAAP,CAAYS,IAAZ,CAAiBK,UAAjB,CAA4BwC,OAA5B,EAAqC,KAAKrF,MAAL,CAAYiC,CAAjD,EAAoD,KAAKjC,MAAL,CAAYoC,CAAhE,EAAmEN,MAAM,CAACC,IAAP,CAAYS,IAAZ,CAAiBM,KAAjB,CAAuBuC,OAAvB,IAAkC1C,QAArG,EAA+Gb,MAAM,CAACC,IAAP,CAAYS,IAAZ,CAAiBO,MAAjB,CAAwBsC,OAAxB,CAA/G;AACAH,UAAM,GAAGG,OAAO,CAACpC,SAAR,EAAT;AAEA,QAAIqC,OAAO,GAAG,IAAIxD,MAAM,CAACC,IAAP,CAAYS,IAAhB,CAAqB,KAAKxC,MAAL,CAAYiC,CAAjC,EAAoC,KAAKjC,MAAL,CAAYoC,CAAhD,EAAmDgD,MAAM,CAACnD,CAAP,GAAW,KAAKjC,MAAL,CAAYwD,MAAvB,GAAgC3B,MAAM,CAACI,CAA1F,EAA6FmD,MAAM,CAAChD,CAAP,GAAW,KAAKpC,MAAL,CAAY8D,MAAvB,GAAgCjC,MAAM,CAACO,CAApI,CAAd;AACAN,UAAM,CAACC,IAAP,CAAYS,IAAZ,CAAiBK,UAAjB,CAA4ByC,OAA5B,EAAqC,KAAKtF,MAAL,CAAYiC,CAAjD,EAAoD,KAAKjC,MAAL,CAAYoC,CAAhE,EAAmEN,MAAM,CAACC,IAAP,CAAYS,IAAZ,CAAiBM,KAAjB,CAAuBwC,OAAvB,IAAkC3C,QAArG,EAA+Gb,MAAM,CAACC,IAAP,CAAYS,IAAZ,CAAiBO,MAAjB,CAAwBuC,OAAxB,CAA/G;AACAF,UAAM,GAAGE,OAAO,CAACrC,SAAR,EAAT,CAPe,CASf;;AACArB,UAAM,CAACgC,IAAP,CAAY,IAAI9B,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBkD,MAAM,CAACjD,CAA7B,EAAgCiD,MAAM,CAAC9C,CAAvC,CAAZ;AACAR,UAAM,CAACgC,IAAP,CAAY,IAAI9B,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBoD,MAAM,CAACnD,CAA7B,EAAgCmD,MAAM,CAAChD,CAAvC,CAAZ,EAXe,CAYf;;AACA4B,YAAQ,CAACJ,IAAT,CAAc,IAAI9B,MAAM,CAACC,IAAP,CAAYS,IAAhB,CAAqB0C,MAAM,CAACjD,CAA5B,EAA+BiD,MAAM,CAAC9C,CAAtC,EAAyCgD,MAAM,CAACnD,CAAhD,EAAmDmD,MAAM,CAAChD,CAA1D,CAAd;AACH,GAdD,CAeA;AAfA,OAgBK;AACD;AACAR,UAAM,CAACgC,IAAP,CAAY,IAAI9B,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBkD,MAAM,CAACjD,CAAP,GAAW,KAAKjC,MAAL,CAAYwD,MAAvB,GAAgC3B,MAAM,CAACI,CAA7D,EAAgEiD,MAAM,CAAC9C,CAAP,GAAW,KAAKpC,MAAL,CAAY8D,MAAvB,GAAgCjC,MAAM,CAACO,CAAvG,CAAZ;AACAR,UAAM,CAACgC,IAAP,CAAY,IAAI9B,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBoD,MAAM,CAACnD,CAAP,GAAW,KAAKjC,MAAL,CAAYwD,MAAvB,GAAgC3B,MAAM,CAACI,CAA7D,EAAgEmD,MAAM,CAAChD,CAAP,GAAW,KAAKpC,MAAL,CAAY8D,MAAvB,GAAgCjC,MAAM,CAACO,CAAvG,CAAZ,EAHC,CAID;;AACA4B,YAAQ,CAACJ,IAAT,CAAc,IAAI9B,MAAM,CAACC,IAAP,CAAYS,IAAhB,CAAqB0C,MAAM,CAACjD,CAAP,GAAW,KAAKjC,MAAL,CAAYwD,MAAvB,GAAgC3B,MAAM,CAACI,CAA5D,EAA+DiD,MAAM,CAAC9C,CAAP,GAAW,KAAKpC,MAAL,CAAY8D,MAAvB,GAAgCjC,MAAM,CAACO,CAAtG,EAAyGgD,MAAM,CAACnD,CAAP,GAAWJ,MAAM,CAACI,CAAP,GAAW,KAAKjC,MAAL,CAAYwD,MAA3I,EAAmJ4B,MAAM,CAAChD,CAAP,GAAW,KAAKpC,MAAL,CAAY8D,MAAvB,GAAgCjC,MAAM,CAACO,CAA1L,CAAd;AACH;;AAGD,OAAKV,OAAL,GAAeE,MAAf;AACA,OAAKiC,SAAL,GAAiBG,QAAjB;AACA,SAAO,IAAP;AACH;AAAA,C;;;;;;;;;;;;;;;;;;;;;;;AC5FD;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASnD,SAAT,GAAgC;AAAA,MAAbY,GAAa,uEAAP,KAAO;AACnC,MAAG,CAAC,KAAKD,MAAT,EACI,OAAO,EAAP;AAEJ,MAAI+E,IAAI,GAAG,KAAKvG,MAAL,CAAYY,IAAZ,KAAqB,MAArB,IAA+B,KAAKZ,MAAL,CAAYY,IAAZ,KAAqB,WAApD,GAAkE,KAAKZ,MAAvE,GAAgF,KAAKA,MAAL,CAAYuG,IAAvG,CAJmC,CAMnC;;AACA,MAAG9E,GAAG,IAAI,CAAC,KAAKH,oBAAb,IAAqCiF,IAAI,CAACC,YAAL,GAAoB,CAA5D,EAA+D;AAC3D,QAAI5E,MAAM,GAAG,EAAb;AACA,QAAIW,IAAI,GAAG,IAAIT,MAAM,CAACC,IAAP,CAAYS,IAAhB,EAAX;AACA,QAAIC,IAAI,GAAG,IAAIX,MAAM,CAACC,IAAP,CAAYS,IAAhB,EAAX;AACA,QAAIE,CAAC,GAAG,IAAIZ,MAAM,CAACC,IAAP,CAAYS,IAAhB,CAAqBf,GAAG,CAACyB,MAAJ,CAAWjB,CAAhC,EAAmCR,GAAG,CAACyB,MAAJ,CAAWd,CAA9C,EAAiDmE,IAAI,CAACE,QAAL,CAAcxE,CAA/D,EAAkEsE,IAAI,CAACE,QAAL,CAAcrE,CAAhF,CAAR;AAEA,QAAIe,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAASxB,MAAM,CAACC,IAAP,CAAYS,IAAZ,CAAiBO,MAAjB,CAAwBL,CAAxB,CAAT,EAAqC,CAArC,IAA0CU,IAAI,CAACE,GAAL,CAASiD,IAAI,CAACC,YAAL,GAAoBD,IAAI,CAACG,KAAL,CAAWzE,CAAxC,EAA2C,CAA3C,CAApD,CAAhB,CAN2D,CAQ3D;;AACA,QAAIwB,KAAK,GAAG3B,MAAM,CAACC,IAAP,CAAYS,IAAZ,CAAiBM,KAAjB,CAAuBJ,CAAvB,CAAZ;AACA,QAAIgB,MAAM,GAAGN,IAAI,CAACO,IAAL,CAAW4C,IAAI,CAACC,YAAL,GAAoBD,IAAI,CAACG,KAAL,CAAWzE,CAAhC,GAAqCH,MAAM,CAACC,IAAP,CAAYS,IAAZ,CAAiBO,MAAjB,CAAwBL,CAAxB,CAA/C,CAAb;AACAZ,UAAM,CAACC,IAAP,CAAYS,IAAZ,CAAiBK,UAAjB,CAA4BN,IAA5B,EAAkCd,GAAG,CAACyB,MAAJ,CAAWjB,CAA7C,EAAgDR,GAAG,CAACyB,MAAJ,CAAWd,CAA3D,EAA8DqB,KAAK,GAAGC,MAAtE,EAA8EP,SAA9E;AACArB,UAAM,CAACC,IAAP,CAAYS,IAAZ,CAAiBK,UAAjB,CAA4BJ,IAA5B,EAAkChB,GAAG,CAACyB,MAAJ,CAAWjB,CAA7C,EAAgDR,GAAG,CAACyB,MAAJ,CAAWd,CAA3D,EAA8DqB,KAAK,GAAGC,MAAtE,EAA8EP,SAA9E,EAZ2D,CAc3D;;AACAvB,UAAM,CAACgC,IAAP,CAAYrB,IAAI,CAACU,SAAL,EAAZ;AACArB,UAAM,CAACgC,IAAP,CAAYnB,IAAI,CAACQ,SAAL,EAAZ;AAEA,WAAOrB,MAAP;AACH;;AAED,SAAO,KAAKF,OAAZ;AACH;AAAA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASZ,WAAT,GAAuB;AAC1B,MAAG,CAAC,KAAKU,MAAT,EACI,OAAO,EAAP;AACJ,SAAO,KAAKqC,SAAZ;AACH;AAAA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAAS9C,SAAT,GAAqB;AACxB,MAAG,CAAC,KAAKS,MAAT,EACI,OAAO,IAAP;AAEJ,MAAII,MAAM,GAAG,EAAb;AACA,MAAIoC,QAAQ,GAAG,EAAf;AACA,MAAIuC,IAAI,GAAG,KAAKvG,MAAL,CAAYY,IAAZ,KAAqB,MAArB,IAA+B,KAAKZ,MAAL,CAAYY,IAAZ,KAAqB,WAApD,GAAkE,KAAKZ,MAAvE,GAAgF,KAAKA,MAAL,CAAYuG,IAAvG;AACA,MAAII,MAAM,GAAG,CAACJ,IAAD,CAAb;AACA,MAAIK,cAAc,GAAG,KAArB;;AAEA,MAAGL,IAAI,CAACC,YAAL,GAAoB,CAApB,IAAyB,CAAC,KAAKlF,oBAAlC,EAAwD;AACpD,SAAKN,MAAL,GAAc,IAAd;AACA,SAAKU,OAAL,GAAeE,MAAf;AACA,SAAKiC,SAAL,GAAiBG,QAAjB;AAEA,WAAO,IAAP;AACH;;AAED,OAAKhD,MAAL,GAAc,KAAd;AAEA,MAAGuF,IAAI,CAAC3F,IAAL,IAAa,WAAhB,EACI+F,MAAM,GAAGJ,IAAI,CAACI,MAAd;;AAEJ,MAAMJ,IAAI,CAACM,MAAL,KAAgBvH,SAAhB,IAA6BiH,IAAI,CAAC3F,IAAL,IAAa,WAA5C,IAA+D2F,IAAI,CAAC3F,IAAL,IAAa,WAAb,IAA4B,KAAKW,OAApG,EAAgH;AAC5GqF,kBAAc,GAAG,IAAjB;AACH;;AAzBuB,6CA2BJD,MA3BI;AAAA;;AAAA;AA2BxB,wDAA4B;AAAA,UAApBG,QAAoB;;AACxB;AACA,UAAGA,QAAQ,CAACC,KAAT,CAAepF,MAAf,KAA0B,CAA1B,IAA+B,KAAKN,WAAvC,EAAoD;AAChD,YAAI2F,QAAQ,GAAGF,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBC,QAAjC;AAEApF,cAAM,CAACgC,IAAP,CAAY,IAAI9B,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBgF,QAAQ,CAAC,CAAD,CAAR,CAAY/E,CAAlC,EAAqC+E,QAAQ,CAAC,CAAD,CAAR,CAAY5E,CAAjD,CAAZ;;AAEA,aAAI,IAAI+B,CAAC,GAAG,CAAR,EAAWxC,MAAM,GAAGqF,QAAQ,CAACrF,MAAjC,EAAyCwC,CAAC,GAAGxC,MAA7C,EAAqDwC,CAAC,EAAtD,EAA0D;AACtD,cAAIe,MAAM,GAAG,IAAIpD,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBgF,QAAQ,CAAC7C,CAAC,GAAG,CAAL,CAAR,CAAgBlC,CAAtC,EAAyC+E,QAAQ,CAAC7C,CAAC,GAAG,CAAL,CAAR,CAAgB/B,CAAzD,CAAb;AACA,cAAIgD,MAAM,GAAG,IAAItD,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBgF,QAAQ,CAAC7C,CAAD,CAAR,CAAYlC,CAAlC,EAAqC+E,QAAQ,CAAC7C,CAAD,CAAR,CAAY/B,CAAjD,CAAb;AAEAR,gBAAM,CAACgC,IAAP,CAAYwB,MAAZ,EAJsD,CAMtD;;AACA,cAAIH,QAAO,GAAG,IAAInD,MAAM,CAACC,IAAP,CAAYS,IAAhB,CAAqB0C,MAAM,CAACjD,CAA5B,EAA+BiD,MAAM,CAAC9C,CAAtC,EAAyCgD,MAAM,CAACnD,CAAhD,EAAmDmD,MAAM,CAAChD,CAA1D,CAAd;;AACA4B,kBAAQ,CAACJ,IAAT,CAAcqB,QAAd;AACH,SAd+C,CAgBhD;;;AACA,YAAIA,OAAO,GAAG,IAAInD,MAAM,CAACC,IAAP,CAAYS,IAAhB,CAAqBwE,QAAQ,CAACA,QAAQ,CAACrF,MAAT,GAAkB,CAAnB,CAAR,CAA8BM,CAAnD,EAAsD+E,QAAQ,CAACA,QAAQ,CAACrF,MAAT,GAAkB,CAAnB,CAAR,CAA8BS,CAApF,EAAuF4E,QAAQ,CAAC,CAAD,CAAR,CAAY/E,CAAnG,EAAsG+E,QAAQ,CAAC,CAAD,CAAR,CAAY5E,CAAlH,CAAd;AACA4B,gBAAQ,CAACJ,IAAT,CAAcqB,OAAd;AACH,OAnBD,CAqBA;AArBA,WAsBK,IAAG6B,QAAQ,CAACC,KAAT,CAAepF,MAAf,GAAwB,CAA3B,EAA8B;AAAA,mCACvBwC,EADuB,EAChBxC,OADgB;AAE3B,cAAIqF,QAAQ,GAAGF,QAAQ,CAACC,KAAT,CAAe5C,EAAf,EAAkB6C,QAAjC;AACA,cAAI9B,MAAM,GAAG,IAAIpD,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBgF,QAAQ,CAAC,CAAD,CAAR,CAAY/E,CAAlC,EAAqC+E,QAAQ,CAAC,CAAD,CAAR,CAAY5E,CAAjD,CAAb;AAEA,cAAGR,MAAM,CAACqF,IAAP,CAAY,UAAA/C,KAAK;AAAA,mBAAIA,KAAK,CAACjC,CAAN,IAAWiD,MAAM,CAACjD,CAAlB,IAAuBiC,KAAK,CAAC9B,CAAN,IAAW8C,MAAM,CAAC9C,CAA7C;AAAA,WAAjB,MAAqE9C,SAAxE,EACIsC,MAAM,CAACgC,IAAP,CAAYsB,MAAZ;;AANuB,uCAQnBS,CARmB,EAQZhE,QARY;AASvB,gBAAIyD,MAAM,GAAG,IAAItD,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBgF,QAAQ,CAACrB,CAAD,CAAR,CAAY1D,CAAlC,EAAqC+E,QAAQ,CAACrB,CAAD,CAAR,CAAYvD,CAAjD,CAAb,CATuB,CAUvB;;AACA,gBAAI8E,YAAY,GAAGlD,QAAQ,CAACmD,SAAT,CAAmB,UAAAlC,OAAO;AAAA,qBAAKA,OAAO,CAACmC,EAAR,IAAclC,MAAM,CAACjD,CAArB,IAA0BgD,OAAO,CAACoC,EAAR,IAAcnC,MAAM,CAAC9C,CAA/C,IAAoD6C,OAAO,CAACqC,EAAR,IAAclC,MAAM,CAACnD,CAAzE,IAA8EgD,OAAO,CAACsC,EAAR,IAAcnC,MAAM,CAAChD,CAApG,IAA2G6C,OAAO,CAACmC,EAAR,IAAchC,MAAM,CAACnD,CAArB,IAA0BgD,OAAO,CAACoC,EAAR,IAAcjC,MAAM,CAAChD,CAA/C,IAAoD6C,OAAO,CAACqC,EAAR,IAAcpC,MAAM,CAACjD,CAAzE,IAA8EgD,OAAO,CAACsC,EAAR,IAAcrC,MAAM,CAAC9C,CAAlN;AAAA,aAA1B,CAAnB;;AAEA,gBAAG8E,YAAY,KAAK,CAAC,CAArB,EAAwB;AACpBlD,sBAAQ,CAACwD,MAAT,CAAgBN,YAAhB,EAA8B,CAA9B;AACAhC,oBAAM,GAAGE,MAAT;AACA;AACH;;AAED,gBAAGxD,MAAM,CAACqF,IAAP,CAAY,UAAA/C,KAAK;AAAA,qBAAIA,KAAK,CAACjC,CAAN,IAAWmD,MAAM,CAACnD,CAAlB,IAAuBiC,KAAK,CAAC9B,CAAN,IAAWgD,MAAM,CAAChD,CAA7C;AAAA,aAAjB,MAAqE9C,SAAxE,EACIsC,MAAM,CAACgC,IAAP,CAAYwB,MAAZ,EApBmB,CAsBvB;;AACA,gBAAIH,OAAO,GAAG,IAAInD,MAAM,CAACC,IAAP,CAAYS,IAAhB,CAAqB0C,MAAM,CAACjD,CAA5B,EAA+BiD,MAAM,CAAC9C,CAAtC,EAAyCgD,MAAM,CAACnD,CAAhD,EAAmDmD,MAAM,CAAChD,CAA1D,CAAd;AACA4B,oBAAQ,CAACJ,IAAT,CAAcqB,OAAd;AAEAC,kBAAM,GAAGE,MAAT;AA1BuB;;AAQ3B,eAAI,IAAIO,CAAC,GAAG,CAAR,EAAWhE,QAAM,GAAGqF,QAAQ,CAACrF,MAAjC,EAAyCgE,CAAC,GAAGhE,QAA7C,EAAqDgE,CAAC,EAAtD,EAA0D;AAAA,8BAAlDA,CAAkD,EAA3ChE,QAA2C;;AAAA,qCAQlD;AAWP,WA3B0B,CA6B3B;;;AACA,cAAI8F,cAAc,GAAG,IAAI3F,MAAM,CAACC,IAAP,CAAYS,IAAhB,CAAqBwE,QAAQ,CAACA,QAAQ,CAACrF,MAAT,GAAkB,CAAnB,CAAR,CAA8BM,CAAnD,EAAsD+E,QAAQ,CAACA,QAAQ,CAACrF,MAAT,GAAkB,CAAnB,CAAR,CAA8BS,CAApF,EAAuF4E,QAAQ,CAAC,CAAD,CAAR,CAAY/E,CAAnG,EAAsG+E,QAAQ,CAAC,CAAD,CAAR,CAAY5E,CAAlH,CAArB;AAEA,cAAI8E,YAAY,GAAGlD,QAAQ,CAACmD,SAAT,CAAmB,UAAAlC,OAAO;AAAA,mBAAKA,OAAO,CAACmC,EAAR,IAAcK,cAAc,CAACL,EAA7B,IAAmCnC,OAAO,CAACoC,EAAR,IAAcI,cAAc,CAACJ,EAAhE,IAAsEpC,OAAO,CAACqC,EAAR,IAAcG,cAAc,CAACH,EAAnG,IAAyGrC,OAAO,CAACsC,EAAR,IAAcE,cAAc,CAACF,EAAvI,IAA+ItC,OAAO,CAACmC,EAAR,IAAcK,cAAc,CAACH,EAA7B,IAAmCrC,OAAO,CAACoC,EAAR,IAAcI,cAAc,CAACF,EAAhE,IAAsEtC,OAAO,CAACqC,EAAR,IAAcG,cAAc,CAACL,EAAnG,IAAyGnC,OAAO,CAACsC,EAAR,IAAcE,cAAc,CAACJ,EAAzR;AAAA,WAA1B,CAAnB;AACA,cAAGH,YAAY,KAAK5H,SAApB,EACI0E,QAAQ,CAACJ,IAAT,CAAc6D,cAAd;AAlCuB;;AAC/B,aAAI,IAAItD,EAAC,GAAG,CAAR,EAAWxC,OAAM,GAAGmF,QAAQ,CAACC,KAAT,CAAepF,MAAvC,EAA+CwC,EAAC,GAAGxC,OAAnD,EAA2DwC,EAAC,EAA5D,EAAgE;AAAA,gBAAxDA,EAAwD,EAAjDxC,OAAiD;AAkC/D;AACJ;AACJ;AAxFuB;AAAA;AAAA;AAAA;AAAA;;AA0FxB,OAAKD,OAAL,GAAeE,MAAf;AACA,OAAKiC,SAAL,GAAiBG,QAAjB;;AAEA,MAAG4C,cAAH,EAAmB;AACf,QAAIC,MAAM,GAAG,KAAKvC,UAAL,CAAgB7G,KAAhB,CAAsBiK,MAAtB,CAA6BC,SAA7B,CAAuCd,MAAvC,CAA8CN,IAA9C,CAAb;;AACAA,QAAI,CAACM,MAAL,GAAcA,MAAd;AACH;;AAED,SAAO,IAAP;AACH;AAAA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAAS9G,cAAT,GAA0B;AAC7B,MAAI8G,MAAM,GAAG,KAAK7G,MAAL,CAAYY,IAAZ,KAAqB,MAArB,IAA+B,KAAKZ,MAAL,CAAYY,IAAZ,KAAqB,WAApD,GAAkE,KAAKZ,MAAL,CAAY6G,MAA9E,GAAuF,KAAK7G,MAAL,CAAYuG,IAAZ,CAAiBM,MAArH;AAEA,SAAO,IAAI/E,MAAM,CAACC,IAAP,CAAY6F,SAAhB,CAA0Bf,MAAM,CAACgB,GAAP,CAAW5F,CAArC,EAAwC4E,MAAM,CAACgB,GAAP,CAAWzF,CAAnD,EAAsDyE,MAAM,CAACiB,GAAP,CAAW7F,CAAX,GAAe4E,MAAM,CAACgB,GAAP,CAAW5F,CAAhF,EAAmF4E,MAAM,CAACiB,GAAP,CAAW1F,CAAX,GAAeyE,MAAM,CAACgB,GAAP,CAAWzF,CAA7G,CAAP;AACH,C;;;;;;;;;;;;;;;;;;;;;;AC7LD;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASvB,SAAT,GAAgC;AAAA,MAAbY,GAAa,uEAAP,KAAO;AACnC,MAAG,CAAC,KAAKD,MAAT,EACI,OAAO,EAAP;AACJ,SAAO,KAAKE,OAAZ;AACH;AAAA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASZ,WAAT,GAAuB;AAC1B,MAAG,CAAC,KAAKU,MAAT,EACI,OAAO,EAAP;AACJ,SAAO,KAAKqC,SAAZ;AACH;AAAA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAAS9C,SAAT,GAAqB;AACxB,MAAG,CAAC,KAAKS,MAAT,EACI,OAAO,IAAP;AAEJ,MAAII,MAAM,GAAG,EAAb;AACA,MAAIoC,QAAQ,GAAG,EAAf,CALwB,CAOxB;;AACA,MAAInC,MAAM,GAAG,IAAIC,MAAM,CAACC,IAAP,CAAYC,KAAhB,EAAb;AACAH,QAAM,CAACI,CAAP,GAAW,KAAKjC,MAAL,CAAYiC,CAAZ,GAAgB,KAAKjC,MAAL,CAAYkC,YAAZ,GAA2B,KAAKlC,MAAL,CAAYmC,OAAlE;AACAN,QAAM,CAACO,CAAP,GAAW,KAAKpC,MAAL,CAAYoC,CAAZ,GAAgB,KAAKpC,MAAL,CAAYqC,aAAZ,GAA4B,KAAKrC,MAAL,CAAYsC,OAAnE,CAVwB,CAWxB;AACA;;AACA,MAAIK,QAAQ,GAAG,KAAK3C,MAAL,CAAY2C,QAA3B;;AACA,MAAGA,QAAQ,KAAK,CAAhB,EAAmB;AAAA,+CACE,KAAK3C,MAAL,CAAY+D,IAAZ,CAAiBnC,MADnB;AAAA;;AAAA;AACf,0DAA0C;AAAA,YAAlCsC,KAAkC;AACtC,YAAItB,MAAM,GAAG,IAAId,MAAM,CAACC,IAAP,CAAYS,IAAhB,CAAqB,KAAKxC,MAAL,CAAYiC,CAAjC,EAAoC,KAAKjC,MAAL,CAAYoC,CAAhD,EAAmD8B,KAAK,CAACjC,CAAN,GAAU,KAAKjC,MAAL,CAAYwD,MAAtB,GAA+B3B,MAAM,CAACI,CAAzF,EAA4FiC,KAAK,CAAC9B,CAAN,GAAU,KAAKpC,MAAL,CAAY8D,MAAtB,GAA+BjC,MAAM,CAACO,CAAlI,CAAb;AACAN,cAAM,CAACC,IAAP,CAAYS,IAAZ,CAAiBK,UAAjB,CAA4BD,MAA5B,EAAoC,KAAK5C,MAAL,CAAYiC,CAAhD,EAAmD,KAAKjC,MAAL,CAAYoC,CAA/D,EAAkEN,MAAM,CAACC,IAAP,CAAYS,IAAZ,CAAiBM,KAAjB,CAAuBF,MAAvB,IAAiCD,QAAnG,EAA6Gb,MAAM,CAACC,IAAP,CAAYS,IAAZ,CAAiBO,MAAjB,CAAwBH,MAAxB,CAA7G;AACAhB,cAAM,CAACgC,IAAP,CAAYhB,MAAM,CAACK,SAAP,EAAZ;AACH;AALc;AAAA;AAAA;AAAA;AAAA;AAMlB,GAND,CAOA;AAPA,OAQK;AAAA,gDACgB,KAAKjD,MAAL,CAAY+D,IAAZ,CAAiBnC,MADjC;AAAA;;AAAA;AACD,6DAA0C;AAAA,YAAlCsC,MAAkC;AACtCtC,cAAM,CAACgC,IAAP,CAAY,IAAI9B,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBkC,MAAK,CAACjC,CAAN,GAAU,KAAKjC,MAAL,CAAYwD,MAAtB,GAA+B3B,MAAM,CAACI,CAA5D,EAA+DiC,MAAK,CAAC9B,CAAN,GAAU,KAAKpC,MAAL,CAAY8D,MAAtB,GAA+BjC,MAAM,CAACO,CAArG,CAAZ;AACH;AAHA;AAAA;AAAA;AAAA;AAAA;AAIJ,GA1BuB,CA4BxB;;;AACA,OAAI,IAAI+B,CAAC,GAAG,CAAR,EAAWxC,MAAM,GAAGC,MAAM,CAACD,MAA/B,EAAuCwC,CAAC,GAAGxC,MAA3C,EAAmDwC,CAAC,EAApD,EAAwD;AACpD,QAAGA,CAAC,GAAC,CAAF,GAAMxC,MAAT,EACIqC,QAAQ,CAACJ,IAAT,CAAc,IAAI9B,MAAM,CAACC,IAAP,CAAYS,IAAhB,CAAqBZ,MAAM,CAACuC,CAAD,CAAN,CAAUlC,CAA/B,EAAkCL,MAAM,CAACuC,CAAD,CAAN,CAAU/B,CAA5C,EAA+CR,MAAM,CAACuC,CAAC,GAAC,CAAH,CAAN,CAAYlC,CAA3D,EAA8DL,MAAM,CAACuC,CAAC,GAAC,CAAH,CAAN,CAAY/B,CAA1E,CAAd;AACP,GAhCuB,CAiCxB;;;AACA,MAAG,KAAKpC,MAAL,CAAY+H,SAAf,EAA0B;AACtB,QAAIC,IAAI,GAAGpG,MAAM,CAACD,MAAP,GAAgB,CAA3B;AACAqC,YAAQ,CAACJ,IAAT,CAAc,IAAI9B,MAAM,CAACC,IAAP,CAAYS,IAAhB,CAAqBZ,MAAM,CAACoG,IAAD,CAAN,CAAa/F,CAAlC,EAAqCL,MAAM,CAACoG,IAAD,CAAN,CAAa5F,CAAlD,EAAqDR,MAAM,CAAC,CAAD,CAAN,CAAUK,CAA/D,EAAkEL,MAAM,CAAC,CAAD,CAAN,CAAUQ,CAA5E,CAAd;AACH;;AAED,OAAKV,OAAL,GAAeE,MAAf;AACA,OAAKiC,SAAL,GAAiBG,QAAjB;AAEA,SAAO,IAAP;AACH;AAAA,C;;;;;;;;;;;;AC3FD;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASnD,SAAT,GAAgC;AAAA,MAAbY,GAAa,uEAAP,KAAO;AACnC,MAAG,CAAC,KAAKD,MAAT,EACI,OAAO,EAAP;AACJ,SAAO,KAAKE,OAAZ;AACH;AAAA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASZ,WAAT,GAAuB;AAC1B,MAAG,CAAC,KAAKU,MAAT,EACI,OAAO,EAAP;AACJ,SAAO,KAAKqC,SAAZ;AACH;AAAA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAAS9C,SAAT,GAAqB;AACxB,MAAG,CAAC,KAAKS,MAAT,EACI,OAAO,IAAP;AAEJ,MAAII,MAAM,GAAG,EAAb;AACA,MAAIoC,QAAQ,GAAG,EAAf,CALwB,CAOxB;;AACApC,QAAM,GAAG,CACL,KAAK5B,MAAL,CAAYiI,UAAZ,EADK,EAEL,KAAKjI,MAAL,CAAYkI,WAAZ,EAFK,EAGL,KAAKlI,MAAL,CAAYmI,cAAZ,EAHK,EAIL,KAAKnI,MAAL,CAAYoI,aAAZ,EAJK,CAAT,CARwB,CAexB;;AACA,OAAI,IAAIjE,CAAC,GAAG,CAAR,EAAWxC,MAAM,GAAGC,MAAM,CAACD,MAA/B,EAAuCwC,CAAC,GAAGxC,MAA3C,EAAmDwC,CAAC,EAApD,EAAwD;AACpD,QAAGA,CAAC,GAAC,CAAF,GAAMxC,MAAT,EACAqC,QAAQ,CAACJ,IAAT,CAAc,IAAI9B,MAAM,CAACC,IAAP,CAAYS,IAAhB,CAAqBZ,MAAM,CAACuC,CAAD,CAAN,CAAUlC,CAA/B,EAAkCL,MAAM,CAACuC,CAAD,CAAN,CAAU/B,CAA5C,EAA+CR,MAAM,CAACuC,CAAC,GAAC,CAAH,CAAN,CAAYlC,CAA3D,EAA8DL,MAAM,CAACuC,CAAC,GAAC,CAAH,CAAN,CAAY/B,CAA1E,CAAd,EADA,KAGA4B,QAAQ,CAACJ,IAAT,CAAc,IAAI9B,MAAM,CAACC,IAAP,CAAYS,IAAhB,CAAqBZ,MAAM,CAACuC,CAAD,CAAN,CAAUlC,CAA/B,EAAkCL,MAAM,CAACuC,CAAD,CAAN,CAAU/B,CAA5C,EAA+CR,MAAM,CAAC,CAAD,CAAN,CAAUK,CAAzD,EAA4DL,MAAM,CAAC,CAAD,CAAN,CAAUQ,CAAtE,CAAd;AACH;;AAED,OAAKV,OAAL,GAAeE,MAAf;AACA,OAAKiC,SAAL,GAAiBG,QAAjB;AAEA,SAAO,IAAP;AACH;AAAA,C;;;;;;;;;;;;;;;;;;;;;;;AC3ED;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASnD,SAAT,GAAgC;AAAA,MAAbY,GAAa,uEAAP,KAAO;AACnC,MAAG,CAAC,KAAKD,MAAT,EACI,OAAO,EAAP;AACJ,MAAG,CAACC,GAAD,IAAQA,GAAG,KAAKA,GAAG,CAAC4G,cAAJ,IAAsB,CAAtB,IAA2B5G,GAAG,CAAC4G,cAAJ,IAAsBvG,MAAM,CAACsB,IAAP,CAAYkF,gBAAlE,CAAd,EACI,OAAO,KAAK5G,OAAZ;AAEJ,MAAIE,MAAM,GAAG,EAAb;;AANmC,6CAOlB,KAAKF,OAPa;AAAA;;AAAA;AAOnC,wDAA+B;AAAA,UAAvBwC,KAAuB;AAC3B,UAAGpC,MAAM,CAACsB,IAAP,CAAYmF,QAAZ,CAAqBC,OAArB,CAA6B/G,GAAG,CAACyB,MAAJ,CAAWjB,CAAxC,EAA2CR,GAAG,CAACyB,MAAJ,CAAWd,CAAtD,EAAyD8B,KAAK,CAACjC,CAA/D,EAAkEiC,KAAK,CAAC9B,CAAxE,KAA8EX,GAAG,CAAC4G,cAArF,EACIzG,MAAM,CAACgC,IAAP,CAAYM,KAAZ;AACP,KAVkC,CAYnC;;AAZmC;AAAA;AAAA;AAAA;AAAA;;AAanC,MAAIF,QAAQ,GAAG,KAAKlD,WAAL,CAAiBW,GAAjB,CAAf;;AAbmC,8CAehBuC,QAfgB;AAAA;;AAAA;AAenC,2DAA6B;AAAA,UAArBiB,OAAqB;AACzB,UAAGnD,MAAM,CAACsB,IAAP,CAAYmF,QAAZ,CAAqBC,OAArB,CAA6B/G,GAAG,CAACyB,MAAJ,CAAWjB,CAAxC,EAA2CR,GAAG,CAACyB,MAAJ,CAAWd,CAAtD,EAAyD6C,OAAO,CAACmC,EAAjE,EAAqEnC,OAAO,CAACoC,EAA7E,IAAmF5F,GAAG,CAAC4G,cAA1F,EACIzG,MAAM,CAACgC,IAAP,CAAY,IAAI9B,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBiD,OAAO,CAACmC,EAA9B,EAAkCnC,OAAO,CAACoC,EAA1C,CAAZ;AAEJ,UAAGvF,MAAM,CAACsB,IAAP,CAAYmF,QAAZ,CAAqBC,OAArB,CAA6B/G,GAAG,CAACyB,MAAJ,CAAWjB,CAAxC,EAA2CR,GAAG,CAACyB,MAAJ,CAAWd,CAAtD,EAAyD6C,OAAO,CAACqC,EAAjE,EAAqErC,OAAO,CAACsC,EAA7E,IAAmF9F,GAAG,CAAC4G,cAA1F,EACIzG,MAAM,CAACgC,IAAP,CAAY,IAAI9B,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBiD,OAAO,CAACqC,EAA9B,EAAkCrC,OAAO,CAACsC,EAA1C,CAAZ;AACP;AArBkC;AAAA;AAAA;AAAA;AAAA;;AAuBnC,SAAO3F,MAAP;AACH;AAAA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASd,WAAT,GAAkC;AAAA,MAAbW,GAAa,uEAAP,KAAO;AACrC,MAAG,CAAC,KAAKD,MAAT,EACI,OAAO,EAAP;AACJ,MAAG,CAACC,GAAD,IAAQA,GAAG,KAAKA,GAAG,CAAC4G,cAAJ,IAAsB,CAAtB,IAA2B5G,GAAG,CAAC4G,cAAJ,IAAsBvG,MAAM,CAACsB,IAAP,CAAYkF,gBAAlE,CAAd,EACI,OAAO,KAAKzE,SAAZ;AAEJ,MAAIG,QAAQ,GAAG,EAAf;;AANqC,8CAOlB,KAAKH,SAPa;AAAA;;AAAA;AAOrC,2DAAmC;AAAA,UAA3BoB,OAA2B;;AAC/B,UAAGnD,MAAM,CAACC,IAAP,CAAYgE,UAAZ,CAAuB0C,YAAvB,CAAoCxD,OAApC,EAA6CxD,GAAG,CAACiH,oBAAjD,CAAH,EAA2E;AACvE1E,gBAAQ,CAACJ,IAAT,CAAcqB,OAAd;AACH;AACJ;AAXoC;AAAA;AAAA;AAAA;AAAA;;AAarC,SAAOjB,QAAP;AACH;AAAA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASjD,SAAT,GAAqB;AAAA;;AACxB,MAAG,CAAC,KAAKS,MAAT,EACI,OAAO,IAAP;AAEJ,MAAII,MAAM,GAAG,EAAb;AACA,MAAIoC,QAAQ,GAAG,EAAf,CALwB,CAOxB;;AACA,MAAInC,MAAM,GAAG,IAAIC,MAAM,CAACC,IAAP,CAAYC,KAAhB,EAAb;AACAH,QAAM,CAACI,CAAP,GAAW,KAAKjC,MAAL,CAAYiC,CAAvB;AACAJ,QAAM,CAACO,CAAP,GAAW,KAAKpC,MAAL,CAAYoC,CAAvB;AAEA,MAAIuG,UAAU,GAAG,KAAjB;AACA,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIC,SAAS,GAAG,EAAhB,CAdwB,CAgBxB;;AACA,OAAI,IAAI1E,CAAC,GAAG,CAAR,EAAWqB,OAAO,GAAG,KAAKxF,MAAL,CAAY8I,KAAZ,CAAkBnE,IAAlB,CAAuBhD,MAAhD,EAAwDwC,CAAC,GAAGqB,OAA5D,EAAqErB,CAAC,EAAtE,EAA0E;AACtE,QAAI4E,GAAG,GAAG,KAAK/I,MAAL,CAAY8I,KAAZ,CAAkBnE,IAAlB,CAAuBR,CAAvB,CAAV,CADsE,CAGtE;;AACA,SAAI,IAAIwB,CAAC,GAAG,CAAR,EAAWC,OAAO,GAAGmD,GAAG,CAACpH,MAA7B,EAAqCgE,CAAC,GAAGC,OAAzC,EAAkDD,CAAC,EAAnD,EAAuD;AACnD,UAAIqD,IAAI,GAAGD,GAAG,CAACpD,CAAD,CAAd,CADmD,CAGnD;;AACA,UAAIsD,SAAS,GAAK9E,CAAC,GAAG,CAAJ,IAAS,KAAKjD,cAAL,CAAoBgI,QAApB,CAA6B,KAAKlJ,MAAL,CAAY8I,KAAZ,CAAkBnE,IAAlB,CAAuBR,CAAC,GAAC,CAAzB,EAA4BwB,CAA5B,EAA+BwD,KAA5D,KAAsE,KAAKjI,cAAL,CAAoBgI,QAApB,CAA6BF,IAAI,CAACG,KAAlC,CAAhF,IAA8HhF,CAAC,IAAI,CAAL,IAAU,KAAKjD,cAAL,CAAoBgI,QAApB,CAA6BF,IAAI,CAACG,KAAlC,CAAzI,GAAsL,IAAtL,GAA6L,KAA7M;AACA,UAAIC,QAAQ,GAAKzD,CAAC,GAAG,CAAJ,IAAS,KAAKzE,cAAL,CAAoBgI,QAApB,CAA6B,KAAKlJ,MAAL,CAAY8I,KAAZ,CAAkBnE,IAAlB,CAAuBR,CAAvB,EAA0BwB,CAAC,GAAC,CAA5B,EAA+BwD,KAA5D,KAAsE,KAAKjI,cAAL,CAAoBgI,QAApB,CAA6BF,IAAI,CAACG,KAAlC,CAAhF,IAA8HxD,CAAC,IAAI,CAAL,IAAU,KAAKzE,cAAL,CAAoBgI,QAApB,CAA6BF,IAAI,CAACG,KAAlC,CAAzI,GAAsL,IAAtL,GAA6L,KAA5M,CALmD,CAOnD;;AACA,UAAIE,SAAQ,GAAG,KAAf;AACA,UAAGR,SAAS,CAAClH,MAAV,IAAoBgE,CAAvB,EACIkD,SAAS,CAAClD,CAAD,CAAT,GAAe,EAAf,CADJ,KAEK,IAAGkD,SAAS,CAAClD,CAAD,CAAT,CAAahE,MAAb,GAAsB,CAAzB,EACD0H,SAAQ,GAAGR,SAAS,CAAClD,CAAD,CAAT,CAAakD,SAAS,CAAClD,CAAD,CAAT,CAAahE,MAAb,GAAsB,CAAnC,CAAX,CAZ+C,CAcnD;;AACA,UAAGyH,QAAH,EAAa;AACT,YAAGC,SAAQ,IAAIA,SAAQ,CAACjH,CAAT,GAAaiH,SAAQ,CAACC,MAAtB,IAAgCnF,CAA/C,EACIkF,SAAQ,CAACC,MAAT,GADJ,KAEK;AACDT,mBAAS,CAAClD,CAAD,CAAT,CAAa/B,IAAb,CAAkB;AACd3B,aAAC,EAAE+G,IAAI,CAAC/G,CADM;AAEdG,aAAC,EAAE4G,IAAI,CAAC5G,CAFM;AAGdkH,kBAAM,EAAE;AAHM,WAAlB;AAKH;AACJ,OAzBkD,CA2BnD;;;AACA,UAAGL,SAAH,EAAc;AACV,YAAGN,UAAH,EACIA,UAAU,CAACY,KAAX,GADJ,KAGIZ,UAAU,GAAG;AACT1G,WAAC,EAAE+G,IAAI,CAAC/G,CADC;AAETG,WAAC,EAAE4G,IAAI,CAAC5G,CAFC;AAGTmH,eAAK,EAAE;AAHE,SAAb;AAKJ;AACH;;AAED,UAAGZ,UAAH,EAAe;AACX,YAAI1G,CAAC,GAAG0G,UAAU,CAAC1G,CAAX,GAAe,KAAKjC,MAAL,CAAY8I,KAAZ,CAAkBU,SAAjC,GAA6C,KAAKxJ,MAAL,CAAYwD,MAAzD,GAAkE3B,MAAM,CAACI,CAAjF;;AACA,YAAIG,EAAC,GAAGuG,UAAU,CAACvG,CAAX,GAAe,KAAKpC,MAAL,CAAY8I,KAAZ,CAAkBW,UAAjC,GAA8C,KAAKzJ,MAAL,CAAY8D,MAA1D,GAAmEjC,MAAM,CAACO,CAAlF;;AACA,YAAI6C,OAAO,GAAG,IAAInD,MAAM,CAACC,IAAP,CAAYS,IAAhB,CAAqBP,CAArB,EAAwBG,EAAxB,EAA2BH,CAAC,GAAG,KAAKjC,MAAL,CAAY8I,KAAZ,CAAkBU,SAAlB,GAA8B,KAAKxJ,MAAL,CAAYwD,MAA1C,GAAmDmF,UAAU,CAACY,KAA7F,EAAoGnH,EAApG,CAAd;AACA4B,gBAAQ,CAACJ,IAAT,CAAcqB,OAAd;AACA2D,mBAAW,CAAChF,IAAZ,CAAiBqB,OAAjB;AACArD,cAAM,CAACgC,IAAP,CAAY,IAAI9B,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBC,CAAtB,EAAyBG,EAAzB,CAAZ;AACAR,cAAM,CAACgC,IAAP,CAAY,IAAI9B,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBC,CAAC,GAAG,KAAKjC,MAAL,CAAY8I,KAAZ,CAAkBU,SAAlB,GAA8B,KAAKxJ,MAAL,CAAYwD,MAA1C,GAAmDmF,UAAU,CAACY,KAAxF,EAA+FnH,EAA/F,CAAZ;AACAuG,kBAAU,GAAG,KAAb;AACH;AACJ,KAtDqE,CAwDtE;;;AACA,QAAGA,UAAH,EAAe;AACX,UAAI1G,EAAC,GAAG0G,UAAU,CAAC1G,CAAX,GAAe,KAAKjC,MAAL,CAAY8I,KAAZ,CAAkBU,SAAjC,GAA6C,KAAKxJ,MAAL,CAAYwD,MAAzD,GAAkE3B,MAAM,CAACI,CAAjF;;AACA,UAAIG,GAAC,GAAGuG,UAAU,CAACvG,CAAX,GAAe,KAAKpC,MAAL,CAAY8I,KAAZ,CAAkBW,UAAjC,GAA8C,KAAKzJ,MAAL,CAAY8D,MAA1D,GAAmEjC,MAAM,CAACO,CAAlF;;AACA,UAAI6C,QAAO,GAAG,IAAInD,MAAM,CAACC,IAAP,CAAYS,IAAhB,CAAqBP,EAArB,EAAwBG,GAAxB,EAA2BH,EAAC,GAAG,KAAKjC,MAAL,CAAY8I,KAAZ,CAAkBU,SAAlB,GAA8B,KAAKxJ,MAAL,CAAYwD,MAA1C,GAAmDmF,UAAU,CAACY,KAA7F,EAAoGnH,GAApG,CAAd;;AACA4B,cAAQ,CAACJ,IAAT,CAAcqB,QAAd;AACA2D,iBAAW,CAAChF,IAAZ,CAAiBqB,QAAjB;AACArD,YAAM,CAACgC,IAAP,CAAY,IAAI9B,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBC,EAAtB,EAAyBG,GAAzB,CAAZ;AACAR,YAAM,CAACgC,IAAP,CAAY,IAAI9B,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBC,EAAC,GAAG,KAAKjC,MAAL,CAAY8I,KAAZ,CAAkBU,SAAlB,GAA8B,KAAKxJ,MAAL,CAAYwD,MAA1C,GAAmDmF,UAAU,CAACY,KAAxF,EAA+FnH,GAA/F,CAAZ;AACAuG,gBAAU,GAAG,KAAb;AACH;AACJ,GApFuB,CAsFxB;;;AAtFwB,8CAuFR,KAAK3I,MAAL,CAAY8I,KAAZ,CAAkBnE,IAAlB,CAAuB,KAAK3E,MAAL,CAAY8I,KAAZ,CAAkBnE,IAAlB,CAAuBhD,MAAvB,GAAgC,CAAvD,CAvFQ;AAAA;;AAAA;AAuFxB,2DAA2E;AAAA,UAAnEqH,KAAmE;;AACvE,UAAG,KAAK9H,cAAL,CAAoBgI,QAApB,CAA6BF,KAAI,CAACG,KAAlC,CAAH,EAA6C;AACzC,YAAGR,UAAH,EACIA,UAAU,CAACY,KAAX,GADJ,KAGIZ,UAAU,GAAG;AACT1G,WAAC,EAAE+G,KAAI,CAAC/G,CADC;AAETG,WAAC,EAAE4G,KAAI,CAAC5G,CAAL,GAAS,CAFH;AAGTmH,eAAK,EAAE;AAHE,SAAb;AAKJ;AACH;;AAED,UAAGZ,UAAH,EAAe;AACX,YAAI1G,GAAC,GAAG0G,UAAU,CAAC1G,CAAX,GAAe,KAAKjC,MAAL,CAAY8I,KAAZ,CAAkBU,SAAjC,GAA6C,KAAKxJ,MAAL,CAAYwD,MAAzD,GAAkE3B,MAAM,CAACI,CAAjF;;AACA,YAAIG,GAAC,GAAGuG,UAAU,CAACvG,CAAX,GAAe,KAAKpC,MAAL,CAAY8I,KAAZ,CAAkBW,UAAjC,GAA8C,KAAKzJ,MAAL,CAAY8D,MAA1D,GAAmEjC,MAAM,CAACO,CAAlF;;AACA,YAAI6C,SAAO,GAAG,IAAInD,MAAM,CAACC,IAAP,CAAYS,IAAhB,CAAqBP,GAArB,EAAwBG,GAAxB,EAA2BH,GAAC,GAAG,KAAKjC,MAAL,CAAY8I,KAAZ,CAAkBU,SAAlB,GAA8B,KAAKxJ,MAAL,CAAYwD,MAA1C,GAAmDmF,UAAU,CAACY,KAA7F,EAAoGnH,GAApG,CAAd;;AACA4B,gBAAQ,CAACJ,IAAT,CAAcqB,SAAd;AACA2D,mBAAW,CAAChF,IAAZ,CAAiBqB,SAAjB;AACArD,cAAM,CAACgC,IAAP,CAAY,IAAI9B,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBC,GAAtB,EAAyBG,GAAzB,CAAZ;AACAR,cAAM,CAACgC,IAAP,CAAY,IAAI9B,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBC,GAAC,GAAG,KAAKjC,MAAL,CAAY8I,KAAZ,CAAkBU,SAAlB,GAA8B,KAAKxJ,MAAL,CAAYwD,MAA1C,GAAmDmF,UAAU,CAACY,KAAxF,EAA+FnH,GAA/F,CAAZ;AACAuG,kBAAU,GAAG,KAAb;AACH;AACJ,KA9GuB,CAgHxB;;AAhHwB;AAAA;AAAA;AAAA;AAAA;;AAiHxB,MAAGA,UAAH,EAAe;AACX,QAAI1G,GAAC,GAAG0G,UAAU,CAAC1G,CAAX,GAAe,KAAKjC,MAAL,CAAY8I,KAAZ,CAAkBU,SAAjC,GAA6C,KAAKxJ,MAAL,CAAYwD,MAAzD,GAAkE3B,MAAM,CAACI,CAAjF;;AACA,QAAIG,GAAC,GAAGuG,UAAU,CAACvG,CAAX,GAAe,KAAKpC,MAAL,CAAY8I,KAAZ,CAAkBW,UAAjC,GAA8C,KAAKzJ,MAAL,CAAY8D,MAA1D,GAAmEjC,MAAM,CAACO,CAAlF;;AACA,QAAI6C,SAAO,GAAG,IAAInD,MAAM,CAACC,IAAP,CAAYS,IAAhB,CAAqBP,GAArB,EAAwBG,GAAxB,EAA2BH,GAAC,GAAG,KAAKjC,MAAL,CAAY8I,KAAZ,CAAkBU,SAAlB,GAA8B,KAAKxJ,MAAL,CAAYwD,MAA1C,GAAmDmF,UAAU,CAACY,KAA7F,EAAoGnH,GAApG,CAAd;;AACA4B,YAAQ,CAACJ,IAAT,CAAcqB,SAAd;AACA2D,eAAW,CAAChF,IAAZ,CAAiBqB,SAAjB;AACArD,UAAM,CAACgC,IAAP,CAAY,IAAI9B,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBC,GAAtB,EAAyBG,GAAzB,CAAZ;AACAR,UAAM,CAACgC,IAAP,CAAY,IAAI9B,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBC,GAAC,GAAG,KAAKjC,MAAL,CAAY8I,KAAZ,CAAkBU,SAAlB,GAA8B,KAAKxJ,MAAL,CAAYwD,MAA1C,GAAmDmF,UAAU,CAACY,KAAxF,EAA+FnH,GAA/F,CAAZ;AACAuG,cAAU,GAAG,KAAb;AACH,GA1HuB,CA4HxB;;;AACA,MAAIU,QAAQ,GAAG,KAAf;AACA,MAAIK,mBAAmB,GAAG,EAA1B;;AA9HwB,8CA+HT,KAAK1J,MAAL,CAAY8I,KAAZ,CAAkBnE,IA/HT;AAAA;;AAAA;AA+HxB,2DAAuC;AAAA,UAA/BoE,IAA+B;AACnC,UAAIC,MAAI,GAAGD,IAAG,CAACA,IAAG,CAACpH,MAAJ,GAAa,CAAd,CAAd,CADmC,CAGnC;;AACA,UAAG,KAAKT,cAAL,CAAoBgI,QAApB,CAA6BF,MAAI,CAACG,KAAlC,CAAH,EAA6C;AACzC,YAAGE,QAAH,EAAa;AACTA,kBAAQ,CAACC,MAAT;AACH,SAFD,MAGK;AACDD,kBAAQ,GAAG;AACPpH,aAAC,EAAE+G,MAAI,CAAC/G,CAAL,GAAS,CADL;AAEPG,aAAC,EAAE4G,MAAI,CAAC5G,CAFD;AAGPkH,kBAAM,EAAE;AAHD,WAAX;AAKH;;AAED;AACH;;AAED,UAAGD,QAAH,EAAa;AACTK,2BAAmB,CAAC9F,IAApB,CAAyByF,QAAzB;AACAA,gBAAQ,GAAG,KAAX;AACH;AACJ;AAtJuB;AAAA;AAAA;AAAA;AAAA;;AAwJxBR,WAAS,CAACjF,IAAV,CAAe8F,mBAAf,EAxJwB,CA0JxB;;AACA,gCAAkBb,SAAlB,gCAA6B;AAAzB,QAAIc,MAAM,iBAAV;AACA,QAAG,CAACA,MAAJ,EACI;;AAFqB,gDAILA,MAJK;AAAA;;AAAA;AAAA;AAAA,YAIjBN,QAJiB;AAKrB,YAAIpH,CAAC,GAAGoH,QAAQ,CAACpH,CAAT,GAAa,KAAI,CAACjC,MAAL,CAAY8I,KAAZ,CAAkBU,SAA/B,GAA2C,KAAI,CAACxJ,MAAL,CAAYwD,MAAvD,GAAgE3B,MAAM,CAACI,CAA/E;AACA,YAAIoF,EAAE,GAAGgC,QAAQ,CAACjH,CAAT,GAAa,KAAI,CAACpC,MAAL,CAAY8I,KAAZ,CAAkBW,UAA/B,GAA4C,KAAI,CAACzJ,MAAL,CAAY8D,MAAxD,GAAiEjC,MAAM,CAACO,CAAjF;AACA,YAAImF,EAAE,GAAGF,EAAE,GAAG,KAAI,CAACrH,MAAL,CAAY8I,KAAZ,CAAkBW,UAAlB,GAA+B,KAAI,CAACzJ,MAAL,CAAY8D,MAA3C,GAAoDuF,QAAQ,CAACC,MAA3E;AACA,YAAIrE,OAAO,GAAG,IAAInD,MAAM,CAACC,IAAP,CAAYS,IAAhB,CAAqBP,CAArB,EAAwBoF,EAAxB,EAA4BpF,CAA5B,EAA+BsF,EAA/B,CAAd;AACAvD,gBAAQ,CAACJ,IAAT,CAAcqB,OAAd,EATqB,CAWrB;;AACA,YAAG,CAACrD,MAAM,CAACgI,MAAP,CAAc,UAAA1F,KAAK;AAAA,iBAAIA,KAAK,CAACjC,CAAN,IAAWA,CAAX,IAAgBiC,KAAK,CAAC9B,CAAN,IAAWiF,EAA/B;AAAA,SAAnB,CAAJ,EACIzF,MAAM,CAACgC,IAAP,CAAY,IAAI9B,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBC,CAAtB,EAAyBG,CAAzB,CAAZ;AAEJ,YAAG,CAACR,MAAM,CAACgI,MAAP,CAAc,UAAA1F,KAAK;AAAA,iBAAIA,KAAK,CAACjC,CAAN,IAAWA,CAAX,IAAgBiC,KAAK,CAAC9B,CAAN,IAAWmF,EAA/B;AAAA,SAAnB,CAAJ,EACI3F,MAAM,CAACgC,IAAP,CAAY,IAAI9B,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBC,CAAtB,EAAyBG,CAAzB,CAAZ,EAhBiB,CAkBrB;;AAlBqB,oDAmBQwG,WAnBR;AAAA;;AAAA;AAmBrB,iEAA0C;AAAA,gBAAlCiB,iBAAkC;AACtC,gBAAG5E,OAAO,CAACmC,EAAR,IAAcyC,iBAAiB,CAACzC,EAAhC,IAAsCnC,OAAO,CAACmC,EAAR,IAAcyC,iBAAiB,CAACvC,EAAtE,IAA4ErC,OAAO,CAACqC,EAAR,IAAcuC,iBAAiB,CAACzC,EAA5G,IAAkHnC,OAAO,CAACqC,EAAR,IAAcuC,iBAAiB,CAACvC,EAArJ,EACI;AAEJ,gBAAGrC,OAAO,CAACoC,EAAR,IAAcwC,iBAAiB,CAACxC,EAAhC,IAAsCpC,OAAO,CAACoC,EAAR,IAAcwC,iBAAiB,CAACtC,EAAtE,IAA4EtC,OAAO,CAACsC,EAAR,IAAcsC,iBAAiB,CAACxC,EAA5G,IAAkHpC,OAAO,CAACsC,EAAR,IAAcsC,iBAAiB,CAACtC,EAArJ,EACI;AAEJ,gBAAIrD,KAAK,GAAG,IAAIpC,MAAM,CAACC,IAAP,CAAYC,KAAhB,EAAZ;;AACA,gBAAGF,MAAM,CAACC,IAAP,CAAYgE,UAAZ,CAAuBK,UAAvB,CAAkCnB,OAAlC,EAA2C4E,iBAA3C,EAA8D3F,KAA9D,CAAH,EAAyE;AACrEtC,oBAAM,CAACgC,IAAP,CAAYM,KAAZ;AACH;AACJ;AA9BoB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIzB,6DAA4B;AAAA;AA2B3B;AA/BwB;AAAA;AAAA;AAAA;AAAA;AAgC5B;;AAED,OAAKxC,OAAL,GAAeE,MAAf;AACA,OAAKiC,SAAL,GAAiBG,QAAjB;AACA,SAAO,IAAP;AACH;AAAA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAAS7C,iBAAT,GAAuC;AAAA,MAAZ2I,KAAY,uEAAJ,EAAI;AAC1C,OAAK5I,cAAL,GAAsB4I,KAAtB;AACA,SAAO,IAAP;AACH,C;;;;;;;;;;;;ACjSD;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS7I,eAAT,CAAyB8I,KAAzB,EAAgC;AACnC,OAAKtJ,YAAL,GAAoBsJ,KAApB;AACA,OAAK/I,MAAL,GAAc+I,KAAK,GAAG,KAAH,GAAW,IAA9B;AAEA,OAAKhJ,SAAL;AACA,SAAO,IAAP;AACH,C;;;;;;;;;;;;ACnBD;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASiJ,QAAT,GAA6B;AAAA,MAAXvG,KAAW,uEAAH,CAAG;AAChC,OAAKA,KAAL,GAAa3B,MAAM,CAACsB,IAAP,CAAYN,KAAZ,CAAkBmH,SAAlB,CAA4BxG,KAA5B,CAAb;AACA3B,QAAM,CAACC,IAAP,CAAYS,IAAZ,CAAiBK,UAAjB,CAA4B,KAAKqH,IAAjC,EAAuC,KAAKhH,MAAL,CAAYjB,CAAnD,EAAsD,KAAKiB,MAAL,CAAYd,CAAlE,EAAqE,KAAKqB,KAA1E,EAAiF,KAAK0G,QAAtF;AACA,SAAO,IAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASC,WAAT,GAAgC;AAAA,MAAX3G,KAAW,uEAAH,CAAG;AACnC,OAAKA,KAAL,GAAa3B,MAAM,CAACsB,IAAP,CAAYN,KAAZ,CAAkBmH,SAAlB,CAA4BnI,MAAM,CAACsB,IAAP,CAAYiH,QAAZ,CAAqB5G,KAArB,CAA5B,CAAb;AACA3B,QAAM,CAACC,IAAP,CAAYS,IAAZ,CAAiBK,UAAjB,CAA4B,KAAKqH,IAAjC,EAAuC,KAAKhH,MAAL,CAAYjB,CAAnD,EAAsD,KAAKiB,MAAL,CAAYd,CAAlE,EAAqE,KAAKqB,KAA1E,EAAiF,KAAK0G,QAAtF;AACA,SAAO,IAAP;AACH,C;;;;;;;;;;;;;;;;;;;;AClCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASG,IAAT,GAA4B;AAAA,MAAd9K,OAAc,uEAAJ,EAAI;AAC/B,MAAI+K,mBAAJ;AACA,MAAIC,cAAJ;AACA,MAAIC,aAAJ;AACA,MAAIC,eAAe,GAAG,KAAKP,QAA3B;AACA,MAAIQ,QAAQ,GAAGnL,OAAO,CAACmL,QAAR,GAAmBnL,OAAO,CAACmL,QAA3B,GAAsC,KAArD;AACA,MAAIC,SAAS,GAAGC,WAAW,CAACC,GAAZ,EAAhB;AACA,MAAIC,KAAK,GAAG;AACRC,UAAM,EAAE,MADA;AAERC,QAAI,EAAE,CAFE;AAGRC,uBAAmB,EAAE,CAHb;AAIRC,oBAAgB,EAAE,CAJV;AAKRnH,YAAQ,EAAE,CALF;AAMR5E,QAAI,EAAE;AANE,GAAZ,CAP+B,CAgB/B;;AACA,MAAG,KAAKkF,UAAL,IAAmB,KAAKA,UAAL,CAAgB5D,WAAtC,EAAmD;AAC/C,QAAI0K,cAAa,GAAG,EAApB;AACAtJ,UAAM,CAACC,IAAP,CAAYgE,UAAZ,CAAuBsF,kBAAvB,CAA0C,KAAKnB,IAA/C,EAAqD,KAAK5F,UAAL,CAAgB5D,WAAhB,CAA4BR,SAAjF,EAA4FkL,cAA5F;AACA,QAAGA,cAAa,CAACzJ,MAAd,KAAyB,CAA5B,EACI4I,mBAAmB,GAAGa,cAAa,CAAC,CAAD,CAAnC,CADJ,KAEK,IAAGA,cAAa,CAACzJ,MAAd,GAAuB,CAA1B,EAA6B;AAAA,iDACNyJ,cADM;AAAA;;AAAA;AAC9B,4DAAuC;AAAA,cAA/BjF,YAA+B;AACnC,cAAImF,QAAQ,GAAGxJ,MAAM,CAACsB,IAAP,CAAYmF,QAAZ,CAAqBC,OAArB,CAA6B,KAAKtF,MAAL,CAAYjB,CAAzC,EAA4C,KAAKiB,MAAL,CAAYd,CAAxD,EAA2D+D,YAAY,CAAClE,CAAxE,EAA2EkE,YAAY,CAAC/D,CAAxF,CAAf;;AACA,cAAGkJ,QAAQ,GAAGZ,eAAd,EAA+B;AAC3BA,2BAAe,GAAGY,QAAlB;AACAf,+BAAmB,GAAGpE,YAAtB;AACH;AACJ;AAP6B;AAAA;AAAA;AAAA;AAAA;AAQjC,KARI,CASL;AATK,SAUA,IAAG3G,OAAO,CAAC+L,MAAX,EAAkB;AACnB,UAAID,SAAQ,GAAGxJ,MAAM,CAACsB,IAAP,CAAYmF,QAAZ,CAAqBC,OAArB,CAA6B,KAAKtF,MAAL,CAAYjB,CAAzC,EAA4C,KAAKiB,MAAL,CAAYd,CAAxD,EAA2D5C,OAAO,CAAC+L,MAAR,CAAetJ,CAA1E,EAA6EzC,OAAO,CAAC+L,MAAR,CAAenJ,CAA5F,CAAf,CADmB,CAEnB;;;AACA,UAAG,KAAK+H,QAAL,GAAgBmB,SAAnB,EAA6B;AACzBZ,uBAAe,GAAGY,SAAlB;AACAf,2BAAmB,GAAG/K,OAAO,CAAC+L,MAA9B;AACH;AACJ;AACJ,GAxC8B,CA0C/B;;;AACA,MAAG,CAAC/L,OAAO,CAACgM,OAAZ,EAAqB;AACjB,QAAG,KAAKlH,UAAR,EACI9E,OAAO,CAACgM,OAAR,GAAkB,KAAKlH,UAAL,CAAgBmH,aAAlC,CADJ,KAGI,OAAOL,aAAP;AACP;;AAhD8B,8CAkDb5L,OAAO,CAACgM,OAlDK;AAAA;;AAAA;AAkD/B,2DAAmC;AAAA,UAA3BxL,MAA2B;AAC/B,UAAI0E,GAAG,SAAP;AAAA,UAAShE,WAAW,SAApB;AAEA,UAAGV,MAAM,CAACY,IAAP,KAAgB,MAAhB,IAA0BZ,MAAM,CAACY,IAAP,KAAgB,WAA7C,EACI8D,GAAG,GAAG1E,MAAM,CAAC0L,YAAb,CADJ,KAGIhH,GAAG,GAAG1E,MAAM,CAAC2E,IAAP,CAAYC,GAAZ,CAAgB,cAAhB,CAAN;AAEJmG,WAAK,CAACG,mBAAN,GAR+B,CAU/B;;AACA,UAAGP,QAAH,EAAa;AACTjK,mBAAW,GAAGgE,GAAG,CAACiH,YAAlB;AACH,OAFD,MAGK;AACDjL,mBAAW,GAAGgE,GAAG,CAAC3E,cAAJ,EAAd;AACAW,mBAAW,CAACkL,KAAZ,CAAkBlL,WAAW,CAACuB,CAAZ,GAAgB,GAAlC,EAAuCvB,WAAW,CAAC0B,CAAZ,GAAgB,GAAvD,EAA4D1B,WAAW,CAAC6I,KAAZ,GAAoB,GAAhF,EAAqF7I,WAAW,CAAC4I,MAAZ,GAAqB,GAA1G;AACH,OAjB8B,CAmB/B;;;AACA,UAAGxH,MAAM,CAACC,IAAP,CAAYgE,UAAZ,CAAuBsF,kBAAvB,CAA0C,KAAKnB,IAA/C,EAAqDxJ,WAArD,EAAkEiB,MAAlE,KAA6E,CAAhF,EACI;AAEJoJ,WAAK,CAACI,gBAAN;AACAJ,WAAK,CAAC/G,QAAN,IAAkBU,GAAG,CAAC5D,WAAJ,CAAgB,IAAhB,EAAsBa,MAAxC,CAxB+B,CA0B/B;;AA1B+B,kDA2BZ+C,GAAG,CAAC5D,WAAJ,CAAgB,IAAhB,CA3BY;AAAA;;AAAA;AA2B/B,+DAA0C;AAAA,cAAlCmE,OAAkC;AACtC,cAAIkB,cAAY,GAAG,EAAnB,CADsC,CAGtC;;AACA,cAAG3G,OAAO,CAAC+L,MAAX,EAAmB;AACf,gBACIzJ,MAAM,CAACC,IAAP,CAAYC,KAAZ,CAAkB6J,MAAlB,CAAyBrM,OAAO,CAAC+L,MAAjC,EAAyCtG,OAAO,CAACE,SAAR,EAAzC,KACGrD,MAAM,CAACC,IAAP,CAAYC,KAAZ,CAAkB6J,MAAlB,CAAyBrM,OAAO,CAAC+L,MAAjC,EAAyCtG,OAAO,CAAChC,SAAR,EAAzC,CAFP,EAGE;AACEkD,4BAAY,GAAG3G,OAAO,CAAC+L,MAAvB;AACH,aALD,MAMK,IAAG,CAACzJ,MAAM,CAACC,IAAP,CAAYgE,UAAZ,CAAuBK,UAAvB,CAAkC,KAAK8D,IAAvC,EAA6CjF,OAA7C,EAAsDkB,cAAtD,CAAJ,EACD;AACP,WATD,CAUA;AAVA,eAWK,IAAG,CAACrE,MAAM,CAACC,IAAP,CAAYgE,UAAZ,CAAuBK,UAAvB,CAAkC,KAAK8D,IAAvC,EAA6CjF,OAA7C,EAAsDkB,cAAtD,CAAJ,EACH,SAhBoC,CAkBtC;;;AACA,cAAImF,UAAQ,GAAGxJ,MAAM,CAACsB,IAAP,CAAYmF,QAAZ,CAAqBC,OAArB,CAA6B,KAAKtF,MAAL,CAAYjB,CAAzC,EAA4C,KAAKiB,MAAL,CAAYd,CAAxD,EAA2D+D,cAAY,CAAClE,CAAxE,EAA2EkE,cAAY,CAAC/D,CAAxF,CAAf;;AACA,cAAGkJ,UAAQ,GAAGZ,eAAd,EAA+B;AAC3BA,2BAAe,GAAGY,UAAlB;AACAf,+BAAmB,GAAGpE,cAAtB;AACAsE,yBAAa,GAAG/F,GAAG,CAAC1E,MAApB;AACAwK,0BAAc,GAAGvF,OAAjB;AACH;AACJ,SArD8B,CAuD/B;;AAvD+B;AAAA;AAAA;AAAA;AAAA;;AAwD/B,UAAGP,GAAG,CAAC1D,MAAP,EAAe;AACZ;AACC,YAAG0D,GAAG,CAAChD,OAAJ,CAAYC,MAAZ,GAAqB,CAAxB,EAA2B;AACvB;AACH,SAJU,CAMX;;;AACA,YAAGnC,OAAO,CAAC+L,MAAX,EAAmB;AACf,cAAI3J,MAAM,GAAG8C,GAAG,CAAC7D,SAAJ,CAAc,IAAd,CAAb;AACA,cAAIiL,SAAS,GAAG,KAAhB;;AAFe,sDAGElK,MAHF;AAAA;;AAAA;AAGf,mEAAyB;AAAA,kBAAjBsC,KAAiB;;AAErB,kBAAGpC,MAAM,CAACC,IAAP,CAAYC,KAAZ,CAAkB6J,MAAlB,CAAyBrM,OAAO,CAAC+L,MAAjC,EAAyCrH,KAAzC,CAAH,EAAoD;AAChD;AACA,oBAAIoH,UAAQ,GAAGxJ,MAAM,CAACsB,IAAP,CAAYmF,QAAZ,CAAqBC,OAArB,CAA6B,KAAKtF,MAAL,CAAYjB,CAAzC,EAA4C,KAAKiB,MAAL,CAAYd,CAAxD,EAA2D8B,KAAK,CAACjC,CAAjE,EAAoEiC,KAAK,CAAC9B,CAA1E,CAAf;;AAEA,oBAAGkJ,UAAQ,GAAGZ,eAAd,EAA+B;AAC3BA,iCAAe,GAAGY,UAAlB;AACAf,qCAAmB,GAAGrG,KAAtB;AACAuG,+BAAa,GAAG/F,GAAG,CAAC1E,MAApB;AACA8L,2BAAS,GAAG,IAAZ;AACA;AACH;AACJ;AACJ;AAjBc;AAAA;AAAA;AAAA;AAAA;;AAmBf,cAAGA,SAAH,EACI;AACP;;AAED,YAAIC,mBAAmB,GAAG,EAA1B;AACA,YAAIlK,MAAM,GAAG,IAAIC,MAAM,CAACC,IAAP,CAAYC,KAAhB,EAAb;AACAH,cAAM,CAACI,CAAP,GAAWyC,GAAG,CAAC1E,MAAJ,CAAWiC,CAAX,GAAeyC,GAAG,CAAC1E,MAAJ,CAAWkC,YAAX,IAA2BwC,GAAG,CAAC1E,MAAJ,CAAWmC,OAAX,GAAqB,GAAhD,CAA1B;AACAN,cAAM,CAACO,CAAP,GAAWsC,GAAG,CAAC1E,MAAJ,CAAWoC,CAAX,GAAesC,GAAG,CAAC1E,MAAJ,CAAWqC,aAAX,IAA4BqC,GAAG,CAAC1E,MAAJ,CAAWsC,OAAX,GAAqB,GAAjD,CAA1B,CAjCW,CAmCX;;AACA,YAAIK,QAAQ,GAAG+B,GAAG,CAAC1E,MAAJ,CAAW2C,QAA1B;;AACA,YAAGA,QAAQ,KAAK,CAAhB,EAAmB;AACf,cAAIC,MAAM,GAAG,IAAId,MAAM,CAACC,IAAP,CAAYS,IAAhB,CAAqBkC,GAAG,CAAC1E,MAAJ,CAAWiC,CAAhC,EAAmCyC,GAAG,CAAC1E,MAAJ,CAAWoC,CAA9C,EAAiDP,MAAM,CAACI,CAAxD,EAA2DJ,MAAM,CAACO,CAAlE,CAAb;AACAN,gBAAM,CAACC,IAAP,CAAYS,IAAZ,CAAiBK,UAAjB,CAA4BD,MAA5B,EAAoC8B,GAAG,CAAC1E,MAAJ,CAAWiC,CAA/C,EAAkDyC,GAAG,CAAC1E,MAAJ,CAAWoC,CAA7D,EAAgEN,MAAM,CAACC,IAAP,CAAYS,IAAZ,CAAiBM,KAAjB,CAAuBF,MAAvB,IAAiCD,QAAjG,EAA2Gb,MAAM,CAACC,IAAP,CAAYS,IAAZ,CAAiBO,MAAjB,CAAwBH,MAAxB,CAA3G;AACA,cAAII,EAAE,GAAGJ,MAAM,CAACK,SAAP,EAAT;AACApB,gBAAM,CAACI,CAAP,GAAWe,EAAE,CAACf,CAAd;AACAJ,gBAAM,CAACO,CAAP,GAAWY,EAAE,CAACZ,CAAd;AACH,SA3CU,CA6CX;;;AACA,YAAIpB,MAAM,GAAG,IAAIc,MAAM,CAACC,IAAP,CAAYiK,MAAhB,CAAuBnK,MAAM,CAACI,CAA9B,EAAiCJ,MAAM,CAACO,CAAxC,EAA2CsC,GAAG,CAAC1E,MAAJ,CAAWuD,MAAX,GAAoBmB,GAAG,CAAC1E,MAAJ,CAAWwD,MAA1E,CAAb;;AAEA,YAAG1B,MAAM,CAACC,IAAP,CAAYgE,UAAZ,CAAuBkG,eAAvB,CAAuC,KAAK/B,IAA5C,EAAkDlJ,MAAlD,EAA0D+K,mBAA1D,CAAH,EAAmF;AAAA,sDACvDA,mBADuD;AAAA;;AAAA;AAC/E,mEAA6C;AAAA,kBAArC5F,aAAqC;;AACzC;AACA,kBAAImF,UAAQ,GAAGxJ,MAAM,CAACsB,IAAP,CAAYmF,QAAZ,CAAqBC,OAArB,CAA6B,KAAK0B,IAAL,CAAU9C,EAAvC,EAA2C,KAAK8C,IAAL,CAAU7C,EAArD,EAAyDlB,aAAY,CAAClE,CAAtE,EAAyEkE,aAAY,CAAC/D,CAAtF,CAAf;;AAEA,kBAAGkJ,UAAQ,GAAGZ,eAAd,EAA+B;AAE3BA,+BAAe,GAAGY,UAAlB;AACAf,mCAAmB,GAAGpE,aAAtB;AACAsE,6BAAa,GAAG/F,GAAG,CAAC1E,MAApB;AACH;AACJ;AAX8E;AAAA;AAAA;AAAA;AAAA;AAYlF;AACJ;AACJ,KAxK8B,CA0K/B;;AA1K+B;AAAA;AAAA;AAAA;AAAA;;AA2K/B,MAAG2K,QAAH,EAAa;AACT,SAAKuB,MAAL,CAAYjB,IAAZ;AACA,SAAKiB,MAAL,CAAYhB,mBAAZ,IAAmCH,KAAK,CAACG,mBAAzC;AACA,SAAKgB,MAAL,CAAYf,gBAAZ,IAAgCJ,KAAK,CAACI,gBAAtC;AACA,SAAKe,MAAL,CAAYlI,QAAZ,IAAwB+G,KAAK,CAAC/G,QAA9B;AACH,GALD,MAMK;AACD+G,SAAK,CAAC3L,IAAN,GAAayL,WAAW,CAACC,GAAZ,KAAoBF,SAAjC;AACA,SAAKsB,MAAL,GAAcnB,KAAd;AACH;;AAED,MAAIoB,MAAJ;;AACA,MAAG,CAAC5B,mBAAJ,EAAyB;AACrB,QAAG,KAAK6B,wBAAR,EACI,OAAO,KAAP;AAEJD,UAAM,GAAG,KAAKjC,IAAL,CAAUjH,SAAV,EAAT;AACH,GALD,MAMK;AACDkJ,UAAM,GAAG,IAAIrK,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBuI,mBAAmB,CAACtI,CAA1C,EAA6CsI,mBAAmB,CAACnI,CAAjE,CAAT;AACA+J,UAAM,CAAClH,OAAP,GAAiBuF,cAAjB;AACA2B,UAAM,CAACnM,MAAP,GAAgByK,aAAhB;AACH;;AAED,MAAG,KAAK4B,KAAR,EAAe;AACXF,UAAM,CAAClK,CAAP,GAAWmB,IAAI,CAACiJ,KAAL,CAAWF,MAAM,CAAClK,CAAlB,CAAX;AACAkK,UAAM,CAAC/J,CAAP,GAAWgB,IAAI,CAACiJ,KAAL,CAAWF,MAAM,CAAC/J,CAAlB,CAAX;AACH;;AAED,MAAG,CAACuI,QAAJ,EACI,KAAK2B,SAAL,CAAe,CAACH,MAAD,CAAf;AAEJ,SAAOA,MAAP;AACH,C;;;;;;;;;;;;;;;;;;;;AC3ND;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASI,UAAT,GAAkC;AAAA,MAAd/M,OAAc,uEAAJ,EAAI;AACrC,MAAIgN,aAAa,GAAG,KAAK/I,KAAzB;AACA,MAAI2H,aAAa,GAAG,EAApB;AACA,MAAIqB,IAAI,GAAG,EAAX;AACA,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,aAAa,GAAG,EAApB;AACA,MAAI/B,SAAS,GAAGC,WAAW,CAACC,GAAZ,EAAhB,CANqC,CAOrC;;AACA,OAAKoB,MAAL,GAAc;AACVlB,UAAM,EAAE,YADE;AAEVC,QAAI,EAAE,CAFI;AAGVC,uBAAmB,EAAE,CAHX;AAIVC,oBAAgB,EAAE,CAJR;AAKVnH,YAAQ,EAAE,CALA;AAMV5E,QAAI,EAAE;AANI,GAAd,CARqC,CAiBrC;;AACA,MAAG,CAACI,OAAO,CAACgM,OAAZ,EAAqB;AACjB,QAAG,KAAKlH,UAAR,EACI9E,OAAO,CAACgM,OAAR,GAAkB,KAAKlH,UAAL,CAAgBmH,aAAlC,CADJ,KAGI,OAAOL,aAAP;AACP,GAvBoC,CAyBrC;;;AACA,MAAG,KAAK9G,UAAL,IAAmB,KAAKA,UAAL,CAAgB5D,WAAtC,EAAmD;AAAA,+CAC9B,KAAK4D,UAAL,CAAgB5D,WAAhB,CAA4BkB,MADE;AAAA;;AAAA;AAC/C,0DAAqD;AAAA,YAA7CsC,KAA6C;AACjDwI,kBAAU,CAAC9I,IAAX,CAAgB;AACZM,eAAK,EAAEA,KADK;AAEZT,eAAK,EAAE3B,MAAM,CAACsB,IAAP,CAAYN,KAAZ,CAAkB0F,OAAlB,CAA0B,KAAKtF,MAAL,CAAYjB,CAAtC,EAAyC,KAAKiB,MAAL,CAAYd,CAArD,EAAwD8B,KAAK,CAACjC,CAA9D,EAAiEiC,KAAK,CAAC9B,CAAvE;AAFK,SAAhB;AAIH;AAN8C;AAAA;AAAA;AAAA;AAAA;AAOlD;;AAED,OAAI,IAAI+B,CAAC,GAAC,CAAN,EAASqB,OAAO,GAAGhG,OAAO,CAACgM,OAAR,CAAgB7J,MAAvC,EAA+CwC,CAAC,GAAGqB,OAAnD,EAA4DrB,CAAC,EAA7D,EAAiE;AAC7D,QAAInE,MAAM,GAAGR,OAAO,CAACgM,OAAR,CAAgBrH,CAAhB,CAAb,CAD6D,CAE7D;;AACA,QAAG,CAAC,KAAKyI,aAAL,CAAmB5M,MAAnB,CAAJ,EACI;AAEJ2M,iBAAa,CAAC/I,IAAd,CAAmB5D,MAAnB;AAEA,QAAI0E,GAAG,SAAP;AAAA,QAAShE,WAAW,SAApB;AACA,QAAGV,MAAM,CAACY,IAAP,KAAgB,MAAhB,IAA0BZ,MAAM,CAACY,IAAP,KAAgB,WAA7C,EACI8D,GAAG,GAAG1E,MAAM,CAAC0L,YAAb,CADJ,KAGIhH,GAAG,GAAG1E,MAAM,CAAC2E,IAAP,CAAYC,GAAZ,CAAgB,cAAhB,CAAN,CAZyD,CAc7D;;AACAlE,eAAW,GAAGgE,GAAG,CAAC3E,cAAJ,EAAd;AACAW,eAAW,CAACkL,KAAZ,CAAkBlL,WAAW,CAACuB,CAAZ,GAAgB,GAAlC,EAAuCvB,WAAW,CAAC0B,CAAZ,GAAgB,GAAvD,EAA4D1B,WAAW,CAAC6I,KAAZ,GAAoB,GAAhF,EAAqF7I,WAAW,CAAC4I,MAAZ,GAAqB,GAA1G;AAEA5E,OAAG,CAACiH,YAAJ,GAAmBjL,WAAnB;AAEA+L,QAAI,CAAC7I,IAAL,CAAUc,GAAV,EApB6D,CAqB7D;;AArB6D,gDAsB5CA,GAAG,CAAC7D,SAAJ,CAAc,IAAd,CAtB4C;AAAA;;AAAA;AAsB7D,6DAAsC;AAAA,YAA9BqD,MAA8B;AAClCwI,kBAAU,CAAC9I,IAAX,CAAgB;AACZM,eAAK,EAAEA,MADK;AAEZT,eAAK,EAAE3B,MAAM,CAACsB,IAAP,CAAYN,KAAZ,CAAkB0F,OAAlB,CAA0B,KAAKtF,MAAL,CAAYjB,CAAtC,EAAyC,KAAKiB,MAAL,CAAYd,CAArD,EAAwD8B,MAAK,CAACjC,CAA9D,EAAiEiC,MAAK,CAAC9B,CAAvE;AAFK,SAAhB;AAIH,OA3B4D,CA6B7D;;AA7B6D;AAAA;AAAA;AAAA;AAAA;;AA8B7D,SAAI,IAAIuD,CAAC,GAAGxB,CAAC,GAAC,CAAV,EAAayB,OAAO,GAAGpG,OAAO,CAACgM,OAAR,CAAgB7J,MAA3C,EAAmDgE,CAAC,GAAGC,OAAvD,EAAgED,CAAC,EAAjE,EAAoE;AAChE,UAAIkH,OAAO,GAAGrN,OAAO,CAACgM,OAAR,CAAgB7F,CAAhB,CAAd;AACA,UAAIG,IAAI,SAAR;AACA,UAAG+G,OAAO,CAACjM,IAAR,KAAiB,MAAjB,IAA2BiM,OAAO,CAACjM,IAAR,KAAiB,WAA/C,EACIkF,IAAI,GAAG+G,OAAO,CAACnB,YAAf,CADJ,KAEK;AACD5F,YAAI,GAAG+G,OAAO,CAAClI,IAAR,CAAaC,GAAb,CAAiB,cAAjB,CAAP;AACH,OAP+D,CAQhE;;AACA,UAAG,CAAC9C,MAAM,CAACC,IAAP,CAAYgE,UAAZ,CAAuBC,oBAAvB,CAA4CtB,GAAG,CAAC3E,cAAJ,EAA5C,EAAkE+F,IAAI,CAAC/F,cAAL,EAAlE,CAAJ,EACI,SAV4D,CAYhE;;AAZgE,kDAa5C2E,GAAG,CAAC5D,WAAJ,CAAgB,IAAhB,CAb4C;AAAA;;AAAA;AAahE,+DAA2C;AAAA,cAAnCmF,QAAmC;;AAAA,sDACnBH,IAAI,CAAChF,WAAL,CAAiB,IAAjB,CADmB;AAAA;;AAAA;AACvC,mEAA4C;AAAA,kBAApCoF,QAAoC;AACxC,kBAAIC,YAAY,GAAG,EAAnB;AACA,kBAAG,CAACrE,MAAM,CAACC,IAAP,CAAYgE,UAAZ,CAAuBK,UAAvB,CAAkCH,QAAlC,EAA4CC,QAA5C,EAAsDC,YAAtD,CAAJ,EACI;AAEJuG,wBAAU,CAAC9I,IAAX,CAAgB;AACZM,qBAAK,EAAE,IAAIpC,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBmE,YAAY,CAAClE,CAAnC,EAAsCkE,YAAY,CAAC/D,CAAnD,CADK;AAEZqB,qBAAK,EAAE3B,MAAM,CAACsB,IAAP,CAAYN,KAAZ,CAAkB0F,OAAlB,CAA0B,KAAKtF,MAAL,CAAYjB,CAAtC,EAAyC,KAAKiB,MAAL,CAAYd,CAArD,EAAwD+D,YAAY,CAAClE,CAArE,EAAwEkE,YAAY,CAAC/D,CAArF;AAFK,eAAhB;AAIH;AAVsC;AAAA;AAAA;AAAA;AAAA;AAW1C;AAxB+D;AAAA;AAAA;AAAA;AAAA;AAyBnE;AACJ,GA3FoC,CA6FrC;;;AACAsK,YAAU,CAACI,IAAX,CAAgB,UAASC,CAAT,EAAYC,CAAZ,EAAc;AAC1B;AACA,QAAGD,CAAC,CAACtJ,KAAF,IAAWuJ,CAAC,CAACvJ,KAAhB,EAAuB;AACnB,UAAG3B,MAAM,CAACsB,IAAP,CAAYmF,QAAZ,CAAqBC,OAArB,CAA6B,KAAKtF,MAAL,CAAYjB,CAAzC,EAA4C,KAAKiB,MAAL,CAAYd,CAAxD,EAA2D2K,CAAC,CAAC7I,KAAF,CAAQjC,CAAnE,EAAsE8K,CAAC,CAAC7I,KAAF,CAAQ9B,CAA9E,IAAmFN,MAAM,CAACsB,IAAP,CAAYmF,QAAZ,CAAqBC,OAArB,CAA6B,KAAKtF,MAAL,CAAYjB,CAAzC,EAA4C,KAAKiB,MAAL,CAAYd,CAAxD,EAA2D4K,CAAC,CAAC9I,KAAF,CAAQjC,CAAnE,EAAsE+K,CAAC,CAAC9I,KAAF,CAAQ9B,CAA9E,CAAtF,EACI,OAAO,CAAP,CADJ,KAGI,OAAO,CAAC,CAAR;AACP;;AAED,WAAO2K,CAAC,CAACtJ,KAAF,GAAUuJ,CAAC,CAACvJ,KAAnB;AACH,GAVe,CAUd8B,IAVc,CAUT,IAVS,CAAhB;AAYA,MAAI0H,cAAc,GAAG;AACjBxJ,SAAK,EAAE;AADU,GAArB,CA1GqC,CA8GrC;;AACA,iCAAkBiJ,UAAlB,iCAA6B;AAAzB,QAAInB,MAAM,kBAAV;;AACA;AACA,QAAGA,MAAM,CAAC9H,KAAP,KAAiBwJ,cAAc,CAACxJ,KAAnC,EAA0C;AACtC;AACH;;AAEDwJ,kBAAc,GAAG1B,MAAjB;AAEA,SAAKvB,QAAL,CAAcuB,MAAM,CAAC9H,KAArB;;AACA,QAAI0C,aAAY,GAAG,KAAKmE,IAAL,CAAU;AACzBkB,aAAO,EAAEmB,aADgB;AAEzBpB,YAAM,EAAEA,MAAM,CAACrH,KAFU;AAGzByG,cAAQ,EAAE;AAHe,KAAV,CAAnB;;AAMA,QAAGxE,aAAH,EAAgB;AACZ;AACA,UAAI+G,SAAS,GAAG,KAAhB;;AACA,UAAG,KAAKb,KAAR,EAAe;AACX,YAAIc,aAAa,GAAG,IAAIrL,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBoB,IAAI,CAACiJ,KAAL,CAAWd,MAAM,CAACrH,KAAP,CAAajC,CAAxB,CAAtB,EAAkDmB,IAAI,CAACiJ,KAAL,CAAWd,MAAM,CAACrH,KAAP,CAAa9B,CAAxB,CAAlD,CAApB;AACA8K,iBAAS,GAAGpL,MAAM,CAACC,IAAP,CAAYC,KAAZ,CAAkB6J,MAAlB,CAAyBsB,aAAzB,EAAwChH,aAAxC,CAAZ;AACH,OAHD,MAIK;AACD+G,iBAAS,GAAGpL,MAAM,CAACC,IAAP,CAAYC,KAAZ,CAAkB6J,MAAlB,CAAyBN,MAAM,CAACrH,KAAhC,EAAuCiC,aAAvC,CAAZ;AACH;;AAED,UAAG+G,SAAH,EAAc;AACV,aAAKlD,QAAL,CAAcuB,MAAM,CAAC9H,KAAP,GAAe,MAA7B;AACA,YAAI2J,aAAa,GAAG,KAAK9C,IAAL,CAAU;AAC1BkB,iBAAO,EAAEmB,aADiB;AAE1BhC,kBAAQ,EAAE;AAFgB,SAAV,CAApB;;AAKA,YAAGyC,aAAH,EAAkB;AACdhC,uBAAa,CAACxH,IAAd,CAAmBwJ,aAAnB;AACH;;AAEDhC,qBAAa,CAACxH,IAAd,CAAmBuC,aAAnB;AAEA,aAAK6D,QAAL,CAAcuB,MAAM,CAAC9H,KAAP,GAAe,MAA7B;AACA,YAAI4J,aAAa,GAAG,KAAK/C,IAAL,CAAU;AAC1BkB,iBAAO,EAAEmB,aADiB;AAE1BhC,kBAAQ,EAAE;AAFgB,SAAV,CAApB;;AAKA,YAAG0C,aAAH,EAAkB;AACdjC,uBAAa,CAACxH,IAAd,CAAmByJ,aAAnB;AACH;;AAED;AACH;;AAEDjC,mBAAa,CAACxH,IAAd,CAAmBuC,aAAnB;AACH;AACJ;;AAED,OAAK6D,QAAL,CAAcwC,aAAd;AACA,OAAKpB,aAAL,GAAqBA,aAArB;AAEA,MAAG,KAAKkC,SAAR,EACI,KAAKC,mBAAL,GAA2B,KAAKC,KAAL,EAA3B;AAEJ,OAAKtB,MAAL,CAAY9M,IAAZ,GAAmByL,WAAW,CAACC,GAAZ,KAAoBF,SAAvC;AAEA,OAAK0B,SAAL,CAAelB,aAAf;AAEA,SAAOA,aAAP;AACH,C;;;;;;;;;;;;;;;;;;;;AC/LD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASqC,QAAT,GAAgC;AAAA,MAAdjO,OAAc,uEAAJ,EAAI;AACnC,MAAIgN,aAAa,GAAG,KAAK/I,KAAzB;AACA,MAAI2H,aAAa,GAAG,EAApB;AACA,MAAIqB,IAAI,GAAG,EAAX;AACA,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,aAAa,GAAG,EAApB;AACA,MAAIe,IAAI,GAAG,KAAKA,IAAhB;AACA,MAAIC,QAAQ,GAAG,CAAf;AACA,MAAIC,QAAQ,GAAG,CAAf;AACA,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIjD,SAAS,GAAGC,WAAW,CAACC,GAAZ,EAAhB,CAVmC,CAWnC;;AACA,OAAKoB,MAAL,GAAc;AACVlB,UAAM,EAAE,YADE;AAEVC,QAAI,EAAE,CAFI;AAGVC,uBAAmB,EAAE,CAHX;AAIVC,oBAAgB,EAAE,CAJR;AAKVnH,YAAQ,EAAE,CALA;AAMV5E,QAAI,EAAE;AANI,GAAd,CAZmC,CAqBnC;;AACA,MAAGI,OAAO,CAACkO,IAAR,KAAiBpO,SAApB,EACIoO,IAAI,GAAGlO,OAAO,CAACkO,IAAf;AACJ,MAAGlO,OAAO,CAACsO,OAAR,KAAoBxO,SAAvB,EACIoO,IAAI,GAAG5L,MAAM,CAACsB,IAAP,CAAYiH,QAAZ,CAAqB7K,OAAO,CAACsO,OAA7B,CAAP,CAzB+B,CA2BnC;;AACAH,UAAQ,GAAG,KAAKlK,KAAL,GAAaiK,IAAI,GAAG,CAA/B;AACAE,UAAQ,GAAG,KAAKnK,KAAL,GAAaiK,IAAI,GAAG,CAA/B,CA7BmC,CA+BnC;;AACA,OAAK1D,QAAL,CAAc2D,QAAd;AACAjB,YAAU,CAAC9I,IAAX,CAAgB;AACZM,SAAK,EAAE,KAAKgG,IAAL,CAAUjH,SAAV,EADK;AAEZQ,SAAK,EAAEkK,QAFK;AAGZI,kBAAc,EAAEjM,MAAM,CAACsB,IAAP,CAAY4K,QAAZ,CAAqB,CAACN,IAAD,GAAQ,CAA7B;AAHJ,GAAhB;AAMA,OAAK1D,QAAL,CAAc4D,QAAd;AACAlB,YAAU,CAAC9I,IAAX,CAAgB;AACZM,SAAK,EAAE,KAAKgG,IAAL,CAAUjH,SAAV,EADK;AAEZQ,SAAK,EAAEmK,QAFK;AAGZG,kBAAc,EAAEjM,MAAM,CAACsB,IAAP,CAAY4K,QAAZ,CAAqBN,IAAI,GAAG,CAA5B;AAHJ,GAAhB,EAxCmC,CA8CnC;;AACA,MAAG,CAAClO,OAAO,CAACgM,OAAZ,EAAqB;AACjB,QAAG,KAAKlH,UAAR,EACI9E,OAAO,CAACgM,OAAR,GAAkB,KAAKlH,UAAL,CAAgBmH,aAAlC,CADJ,KAGI,OAAOL,aAAP;AACP,GApDkC,CAsDnC;;;AACA,MAAG,KAAK9G,UAAL,IAAmB,KAAKA,UAAL,CAAgB5D,WAAtC,EAAmD;AAAA,+CAC9B,KAAK4D,UAAL,CAAgB5D,WAAhB,CAA4BkB,MADE;AAAA;;AAAA;AAC/C,0DAAqD;AAAA,YAA7CsC,KAA6C;AAEjD,YAAIT,KAAK,GAAG3B,MAAM,CAACsB,IAAP,CAAYN,KAAZ,CAAkB0F,OAAlB,CAA0B,KAAKtF,MAAL,CAAYjB,CAAtC,EAAyC,KAAKiB,MAAL,CAAYd,CAArD,EAAwD8B,KAAK,CAACjC,CAA9D,EAAiEiC,KAAK,CAAC9B,CAAvE,CAAZ;AACA,YAAI2L,cAAc,GAAGjM,MAAM,CAACsB,IAAP,CAAYN,KAAZ,CAAkBmL,eAAlB,CAAkCnM,MAAM,CAACsB,IAAP,CAAY4K,QAAZ,CAAqBvK,KAArB,CAAlC,EAA+D3B,MAAM,CAACsB,IAAP,CAAY4K,QAAZ,CAAqBxB,aAArB,CAA/D,CAArB;;AAEA,YAAGpJ,IAAI,CAAC8K,GAAL,CAASH,cAAT,IAA2BjM,MAAM,CAACsB,IAAP,CAAY4K,QAAZ,CAAqBN,IAAI,GAAG,CAA5B,CAA9B,EAA8D;AAC1DhB,oBAAU,CAAC9I,IAAX,CAAgB;AACZM,iBAAK,EAAEA,KADK;AAEZT,iBAAK,EAAEA,KAFK;AAGZsK,0BAAc,EAAE,CAACA;AAHL,WAAhB;AAKH;AACJ;AAb8C;AAAA;AAAA;AAAA;AAAA;AAclD;;AAED,OAAI,IAAI5J,CAAC,GAAC,CAAN,EAASqB,OAAO,GAAGhG,OAAO,CAACgM,OAAR,CAAgB7J,MAAvC,EAA+CwC,CAAC,GAAGqB,OAAnD,EAA4DrB,CAAC,EAA7D,EAAiE;AAC7D,QAAInE,MAAM,GAAGR,OAAO,CAACgM,OAAR,CAAgBrH,CAAhB,CAAb,CAD6D,CAE7D;;AACA,QAAG,CAAC,KAAKyI,aAAL,CAAmB5M,MAAnB,CAAJ,EACI;AAEJ2M,iBAAa,CAAC/I,IAAd,CAAmB5D,MAAnB;AAEA,QAAI0E,GAAG,SAAP;AAAA,QAAShE,WAAW,SAApB;AACA,QAAGV,MAAM,CAACY,IAAP,KAAgB,MAAhB,IAA0BZ,MAAM,CAACY,IAAP,KAAgB,WAA7C,EACI8D,GAAG,GAAG1E,MAAM,CAAC0L,YAAb,CADJ,KAGIhH,GAAG,GAAG1E,MAAM,CAAC2E,IAAP,CAAYC,GAAZ,CAAgB,cAAhB,CAAN,CAZyD,CAc7D;;AACAlE,eAAW,GAAGgE,GAAG,CAAC3E,cAAJ,EAAd;AACAW,eAAW,CAACkL,KAAZ,CAAkBlL,WAAW,CAACuB,CAAZ,GAAgB,GAAlC,EAAuCvB,WAAW,CAAC0B,CAAZ,GAAgB,GAAvD,EAA4D1B,WAAW,CAAC6I,KAAZ,GAAoB,GAAhF,EAAqF7I,WAAW,CAAC4I,MAAZ,GAAqB,GAA1G;AAEA5E,OAAG,CAACiH,YAAJ,GAAmBjL,WAAnB;AAEA+L,QAAI,CAAC7I,IAAL,CAAUc,GAAV,EApB6D,CAqB7D;;AArB6D,gDAsB5CA,GAAG,CAAC7D,SAAJ,CAAc,IAAd,CAtB4C;AAAA;;AAAA;AAsB7D,6DAAsC;AAAA,YAA9BqD,MAA8B;;AAElC,YAAIT,OAAK,GAAG3B,MAAM,CAACsB,IAAP,CAAYN,KAAZ,CAAkB0F,OAAlB,CAA0B,KAAKtF,MAAL,CAAYjB,CAAtC,EAAyC,KAAKiB,MAAL,CAAYd,CAArD,EAAwD8B,MAAK,CAACjC,CAA9D,EAAiEiC,MAAK,CAAC9B,CAAvE,CAAZ;;AACA,YAAI2L,gBAAc,GAAGjM,MAAM,CAACsB,IAAP,CAAYN,KAAZ,CAAkBmL,eAAlB,CAAkCnM,MAAM,CAACsB,IAAP,CAAY4K,QAAZ,CAAqBvK,OAArB,CAAlC,EAA+D3B,MAAM,CAACsB,IAAP,CAAY4K,QAAZ,CAAqBxB,aAArB,CAA/D,CAArB;;AAEA,YAAGpJ,IAAI,CAAC8K,GAAL,CAASH,gBAAT,IAA2BjM,MAAM,CAACsB,IAAP,CAAY4K,QAAZ,CAAqBN,IAAI,GAAG,CAA5B,CAA9B,EAA8D;AAC1DhB,oBAAU,CAAC9I,IAAX,CAAgB;AACZM,iBAAK,EAAEA,MADK;AAEZT,iBAAK,EAAE3B,MAAM,CAACsB,IAAP,CAAYN,KAAZ,CAAkB0F,OAAlB,CAA0B,KAAKtF,MAAL,CAAYjB,CAAtC,EAAyC,KAAKiB,MAAL,CAAYd,CAArD,EAAwD8B,MAAK,CAACjC,CAA9D,EAAiEiC,MAAK,CAAC9B,CAAvE,CAFK;AAGZ2L,0BAAc,EAAE,CAACA;AAHL,WAAhB;AAKH;AACJ,OAlC4D,CAoC7D;;AApC6D;AAAA;AAAA;AAAA;AAAA;;AAqC7D,SAAI,IAAIpI,CAAC,GAAGxB,CAAC,GAAC,CAAV,EAAayB,OAAO,GAAGpG,OAAO,CAACgM,OAAR,CAAgB7J,MAA3C,EAAmDgE,CAAC,GAAGC,OAAvD,EAAgED,CAAC,EAAjE,EAAoE;AAChE,UAAIkH,OAAO,GAAGrN,OAAO,CAACgM,OAAR,CAAgB7F,CAAhB,CAAd;AACA,UAAIG,IAAI,SAAR;AACA,UAAG+G,OAAO,CAACjM,IAAR,KAAiB,MAAjB,IAA2BiM,OAAO,CAACjM,IAAR,KAAiB,WAA/C,EACIkF,IAAI,GAAG+G,OAAO,CAACnB,YAAf,CADJ,KAGI5F,IAAI,GAAG+G,OAAO,CAAClI,IAAR,CAAaC,GAAb,CAAiB,cAAjB,CAAP,CAN4D,CAOhE;;AACA,UAAG,CAAC9C,MAAM,CAACC,IAAP,CAAYgE,UAAZ,CAAuBC,oBAAvB,CAA4CtB,GAAG,CAAC3E,cAAJ,EAA5C,EAAkE+F,IAAI,CAAC/F,cAAL,EAAlE,CAAJ,EACI,SAT4D,CAWhE;;AAXgE,kDAY5C2E,GAAG,CAAC5D,WAAJ,CAAgB,IAAhB,CAZ4C;AAAA;;AAAA;AAYhE,+DAA2C;AAAA,cAAnCmF,QAAmC;;AAAA,sDACnBH,IAAI,CAAChF,WAAL,CAAiB,IAAjB,CADmB;AAAA;;AAAA;AACvC,mEAA4C;AAAA,kBAApCoF,QAAoC;AACxC,kBAAIC,YAAY,GAAG,EAAnB;AACA,kBAAG,CAACrE,MAAM,CAACC,IAAP,CAAYgE,UAAZ,CAAuBK,UAAvB,CAAkCH,QAAlC,EAA4CC,QAA5C,EAAsDC,YAAtD,CAAJ,EACI;;AACJ,kBAAI1C,MAAK,GAAG3B,MAAM,CAACsB,IAAP,CAAYN,KAAZ,CAAkB0F,OAAlB,CAA0B,KAAKtF,MAAL,CAAYjB,CAAtC,EAAyC,KAAKiB,MAAL,CAAYd,CAArD,EAAwD+D,YAAY,CAAClE,CAArE,EAAwEkE,YAAY,CAAC/D,CAArF,CAAZ;;AACA,kBAAI2L,eAAc,GAAGjM,MAAM,CAACsB,IAAP,CAAYN,KAAZ,CAAkBmL,eAAlB,CAAkCnM,MAAM,CAACsB,IAAP,CAAY4K,QAAZ,CAAqBvK,MAArB,CAAlC,EAA+D3B,MAAM,CAACsB,IAAP,CAAY4K,QAAZ,CAAqBxB,aAArB,CAA/D,CAArB;;AAEA,kBAAGpJ,IAAI,CAAC8K,GAAL,CAASH,eAAT,IAA2BjM,MAAM,CAACsB,IAAP,CAAY4K,QAAZ,CAAqBN,IAAI,GAAG,CAA5B,CAA9B,EAA8D;AAC1DhB,0BAAU,CAAC9I,IAAX,CAAgB;AACZM,uBAAK,EAAE,IAAIpC,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBmE,YAAY,CAAClE,CAAnC,EAAsCkE,YAAY,CAAC/D,CAAnD,CADK;AAEZqB,uBAAK,EAAE3B,MAAM,CAACsB,IAAP,CAAYN,KAAZ,CAAkB0F,OAAlB,CAA0B,KAAKtF,MAAL,CAAYjB,CAAtC,EAAyC,KAAKiB,MAAL,CAAYd,CAArD,EAAwD+D,YAAY,CAAClE,CAArE,EAAwEkE,YAAY,CAAC/D,CAArF,CAFK;AAGZ2L,gCAAc,EAAE,CAACA;AAHL,iBAAhB;AAKH;AACJ;AAfsC;AAAA;AAAA;AAAA;AAAA;AAgB1C;AA5B+D;AAAA;AAAA;AAAA;AAAA;AA6BnE;AACJ,GA1IkC,CA4InC;;;AACArB,YAAU,CAACI,IAAX,CAAgB,UAASC,CAAT,EAAYC,CAAZ,EAAc;AAC1B;AACA,QAAGD,CAAC,CAACtJ,KAAF,IAAWuJ,CAAC,CAACvJ,KAAhB,EAAuB;AACnB,UAAG3B,MAAM,CAACsB,IAAP,CAAYmF,QAAZ,CAAqBC,OAArB,CAA6B,KAAKtF,MAAL,CAAYjB,CAAzC,EAA4C,KAAKiB,MAAL,CAAYd,CAAxD,EAA2D2K,CAAC,CAAC7I,KAAF,CAAQjC,CAAnE,EAAsE8K,CAAC,CAAC7I,KAAF,CAAQ9B,CAA9E,IAAmFN,MAAM,CAACsB,IAAP,CAAYmF,QAAZ,CAAqBC,OAArB,CAA6B,KAAKtF,MAAL,CAAYjB,CAAzC,EAA4C,KAAKiB,MAAL,CAAYd,CAAxD,EAA2D4K,CAAC,CAAC9I,KAAF,CAAQjC,CAAnE,EAAsE+K,CAAC,CAAC9I,KAAF,CAAQ9B,CAA9E,CAAtF,EACI,OAAO,CAAP,CADJ,KAGI,OAAO,CAAC,CAAR;AACP;;AAED,WAAO2K,CAAC,CAACgB,cAAF,GAAmBf,CAAC,CAACe,cAA5B;AACH,GAVe,CAUdxI,IAVc,CAUT,IAVS,CAAhB;AAYA,MAAI0H,cAAc,GAAG;AACjBxJ,SAAK,EAAE;AADU,GAArB,CAzJmC,CA6JnC;;AACA,iCAAkBiJ,UAAlB,iCAA6B;AAAzB,QAAInB,MAAM,kBAAV;;AACA;AACA,QAAGA,MAAM,CAAC9H,KAAP,KAAiBwJ,cAAc,CAACxJ,KAAnC,EAA0C;AACtC;AACH;;AAEDwJ,kBAAc,GAAG1B,MAAjB;AAEA,SAAKvB,QAAL,CAAcuB,MAAM,CAAC9H,KAArB;;AACA,QAAI0C,aAAY,GAAG,KAAKmE,IAAL,CAAU;AACzBkB,aAAO,EAAEmB,aADgB;AAEzBpB,YAAM,EAAEA,MAAM,CAACrH,KAFU;AAGzByG,cAAQ,EAAE;AAHe,KAAV,CAAnB;;AAKA,QAAGxE,aAAH,EAAgB;AACZ;AACA,UAAI+G,SAAS,GAAG,KAAhB;;AACA,UAAG,KAAKb,KAAR,EAAe;AACX,YAAIc,aAAa,GAAG,IAAIrL,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBoB,IAAI,CAACiJ,KAAL,CAAWd,MAAM,CAACrH,KAAP,CAAajC,CAAxB,CAAtB,EAAkDmB,IAAI,CAACiJ,KAAL,CAAWd,MAAM,CAACrH,KAAP,CAAa9B,CAAxB,CAAlD,CAApB;AACA8K,iBAAS,GAAGpL,MAAM,CAACC,IAAP,CAAYC,KAAZ,CAAkB6J,MAAlB,CAAyBsB,aAAzB,EAAwChH,aAAxC,CAAZ;AACH,OAHD,MAIK;AACD+G,iBAAS,GAAGpL,MAAM,CAACC,IAAP,CAAYC,KAAZ,CAAkB6J,MAAlB,CAAyBN,MAAM,CAACrH,KAAhC,EAAuCiC,aAAvC,CAAZ;AACH;;AACD,UAAG+G,SAAH,EAAc;AACV,aAAKlD,QAAL,CAAcuB,MAAM,CAAC9H,KAAP,GAAe,MAA7B;AACA,YAAI2J,aAAa,GAAG,KAAK9C,IAAL,CAAU;AAC1BkB,iBAAO,EAAEmB,aADiB;AAE1BhC,kBAAQ,EAAE;AAFgB,SAAV,CAApB;;AAKA,YAAGyC,aAAH,EAAkB;AACdhC,uBAAa,CAACxH,IAAd,CAAmBwJ,aAAnB;AACH;;AAEDhC,qBAAa,CAACxH,IAAd,CAAmBuC,aAAnB;AAEA,aAAK6D,QAAL,CAAcuB,MAAM,CAAC9H,KAAP,GAAe,MAA7B;AACA,YAAI4J,aAAa,GAAG,KAAK/C,IAAL,CAAU;AAC1BkB,iBAAO,EAAEmB,aADiB;AAE1BhC,kBAAQ,EAAE;AAFgB,SAAV,CAApB;;AAKA,YAAG0C,aAAH,EAAkB;AACdjC,uBAAa,CAACxH,IAAd,CAAmByJ,aAAnB;AACH;;AAED;AACH;;AAEDjC,mBAAa,CAACxH,IAAd,CAAmBuC,aAAnB;AACH;AACJ;;AAED,OAAK6D,QAAL,CAAcwC,aAAd;AACA,OAAKpB,aAAL,GAAqBA,aAArB;AACA,MAAG,KAAKkC,SAAR,EACI,KAAKC,mBAAL,GAA2B,KAAKC,KAAL,CAAWpC,aAAX,EAA0B,KAA1B,CAA3B;AAEJ,OAAKc,MAAL,CAAY9M,IAAZ,GAAmByL,WAAW,CAACC,GAAZ,KAAoBF,SAAvC;AAEA,OAAK0B,SAAL,CAAelB,aAAf;AAEA,SAAOA,aAAP;AACH,C;;;;;;;;;;;;AC3OD;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS+C,OAAT,GAA2B;AAAA,MAAVT,IAAU,uEAAH,CAAG;AAC9B,OAAKA,IAAL,GAAYA,IAAZ;AACA,SAAO,IAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASU,UAAT,GAA8B;AAAA,MAAVV,IAAU,uEAAH,CAAG;AACjC,OAAKA,IAAL,GAAY5L,MAAM,CAACsB,IAAP,CAAYiH,QAAZ,CAAqBqD,IAArB,CAAZ;AACA,SAAO,IAAP;AACH,C;;;;;;;;;;;;AChCD;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS/M,MAAT,CAAgBnB,OAAhB,EAAyB;AAC5B,OAAKQ,MAAL,GAAcR,OAAO,CAACQ,MAAtB,CAD4B,CAE5B;;AACA,MAAGR,OAAO,CAAC0D,MAAR,KAAmB5D,SAAtB,EACI,KAAK4D,MAAL,CAAY0I,KAAZ,CAAkBpM,OAAO,CAAC0D,MAAR,CAAejB,CAAjC,EAAoCzC,OAAO,CAAC0D,MAAR,CAAed,CAAnD,EAJwB,CAM5B;;AACA,MAAG5C,OAAO,CAACiE,KAAR,KAAkBnE,SAArB,EACI,KAAKmE,KAAL,GAAa3B,MAAM,CAACsB,IAAP,CAAYN,KAAZ,CAAkBmH,SAAlB,CAA4BzK,OAAO,CAACiE,KAApC,CAAb,CARwB,CAU5B;;AACA,MAAGjE,OAAO,CAAC6O,QAAR,KAAqB/O,SAAxB,EACI,KAAKmE,KAAL,GAAa3B,MAAM,CAACsB,IAAP,CAAYN,KAAZ,CAAkBmH,SAAlB,CAA4BnI,MAAM,CAACsB,IAAP,CAAYiH,QAAZ,CAAqB7K,OAAO,CAAC6O,QAA7B,CAA5B,CAAb,CAZwB,CAc5B;;AACA,MAAG7O,OAAO,CAACkO,IAAR,KAAiBpO,SAApB,EACI,KAAKoO,IAAL,GAAYlO,OAAO,CAACkO,IAApB,CAhBwB,CAkB5B;;AACA,MAAGlO,OAAO,CAACsO,OAAR,KAAoBxO,SAAvB,EACI,KAAKoO,IAAL,GAAY5L,MAAM,CAACsB,IAAP,CAAYiH,QAAZ,CAAqB7K,OAAO,CAACsO,OAA7B,CAAZ,CApBwB,CAsB5B;;AACA,MAAGtO,OAAO,CAAC2K,QAAR,KAAqB7K,SAAxB,EACI,KAAK6K,QAAL,GAAgB3K,OAAO,CAAC2K,QAAxB,CAxBwB,CA0B5B;;AACA,MAAG3K,OAAO,CAAC8O,cAAR,KAA2BhP,SAA9B,EACI,KAAKgP,cAAL,GAAsB9O,OAAO,CAAC8O,cAA9B,CA5BwB,CA8B5B;;AACA,MAAG9O,OAAO,CAAC6I,cAAR,KAA2B/I,SAA9B,EACI,KAAK+I,cAAL,GAAsB7I,OAAO,CAAC6I,cAA9B,CAhCwB,CAkC5B;;AACA,MAAG7I,OAAO,CAAC4M,wBAAR,KAAqC9M,SAAxC,EACI,KAAK8M,wBAAL,GAAiC5M,OAAO,CAAC4M,wBAAR,IAAoC,IAArE,CApCwB,CAsC5B;;AACA,MAAG5M,OAAO,CAAC6M,KAAR,KAAkB/M,SAArB,EACI,KAAK+M,KAAL,GAAc7M,OAAO,CAAC6M,KAAR,IAAiB,IAA/B,CAxCwB,CA0C5B;;AACA,MAAG7M,OAAO,CAAC8N,SAAR,KAAsBhO,SAAzB,EACI,KAAKgO,SAAL,GAAkB9N,OAAO,CAAC8N,SAAR,IAAqB,IAAvC,CA5CwB,CA8C5B;;AACA,MAAG9N,OAAO,CAAC+O,aAAR,KAA0BjP,SAA1B,IAAuCE,OAAO,CAAC+O,aAAlD,EACI,KAAKA,aAAL,CAAmB/O,OAAO,CAAC+O,aAA3B;AAEJzM,QAAM,CAACC,IAAP,CAAYS,IAAZ,CAAiBK,UAAjB,CAA4B,KAAKqH,IAAjC,EAAuC,KAAKhH,MAAL,CAAYjB,CAAnD,EAAsD,KAAKiB,MAAL,CAAYd,CAAlE,EAAqE,KAAKqB,KAA1E,EAAiF,KAAK0G,QAAtF;AACA,OAAKzB,oBAAL,CAA0BkD,KAA1B,CAAgC,KAAK1I,MAAL,CAAYjB,CAA5C,EAA+C,KAAKiB,MAAL,CAAYd,CAA3D,EAA6D,KAAKiG,cAAlE;;AAEA,MAAG,KAAK/D,UAAL,CAAgBkK,YAAhB,CAA6BC,OAA7B,IAAwC,KAAKnK,UAAL,CAAgB7G,KAAhB,KAA0B6B,SAArE,EAAgF;AAC5E,SAAKoP,QAAL,GAAiB,KAAKpK,UAAL,CAAgB7G,KAAhB,CAAsBkR,GAAtB,CAA0BD,QAA1B,CAAmC;AAAEE,eAAS,EAAE;AAAErF,aAAK,EAAE,CAAT;AAAYsF,aAAK,EAAE;AAAnB,OAAb;AAA2CC,eAAS,EAAE;AAAED,aAAK,EAAE;AAAT;AAAtD,KAAnC,CAAjB;AACA,SAAKH,QAAL,CAAcK,QAAd,CAAuB,IAAvB;AACH;;AAED,SAAO,IAAP;AACH,C;;;;;;;;;;;;;;;;;;;;ACnFD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASzC,SAAT,CAAmBlB,aAAnB,EAAkC;AACrC,MAAG,KAAKsD,QAAL,KAAkBpP,SAAlB,IAA+B,CAAC,KAAKgF,UAAL,CAAgBkK,YAAhB,CAA6BC,OAAhE,EACI,OAAO,IAAP,CAFiC,CAIrC;;AACA,OAAKC,QAAL,CAAcM,KAAd;AAEA,MAAG,CAAC,KAAK1K,UAAL,CAAgBkK,YAAhB,CAA6BvD,IAAjC,EACI,OAAO,IAAP;;AAEJ,MAAG,KAAK3G,UAAL,CAAgBkK,YAAhB,CAA6BE,QAA7B,CAAsCjN,GAAzC,EAA8C;AAC1C,SAAKiN,QAAL,CAAcE,SAAd,CAAwB,CAAxB,EAA2B,KAAKtK,UAAL,CAAgBkK,YAAhB,CAA6BE,QAA7B,CAAsCjN,GAAjE;;AAD0C,+CAGlB2J,aAHkB;AAAA;;AAAA;AAG1C,0DAAuC;AAAA,YAA/BjF,YAA+B;AACnC,aAAKuI,QAAL,CAAcO,eAAd,CAA8B;AAC1B7H,YAAE,EAAE,KAAKlE,MAAL,CAAYjB,CADU;AAE1BoF,YAAE,EAAE,KAAKnE,MAAL,CAAYd,CAFU;AAG1BkF,YAAE,EAAEnB,YAAY,CAAClE,CAHS;AAI1BsF,YAAE,EAAEpB,YAAY,CAAC/D;AAJS,SAA9B;AAMH;AAVyC;AAAA;AAAA;AAAA;AAAA;AAW7C;;AAED,MAAG,KAAKkC,UAAL,CAAgBkK,YAAhB,CAA6BE,QAA7B,CAAsCQ,QAAzC,EAAmD;AAC/C,SAAKR,QAAL,CAAcI,SAAd,CAAwB,KAAKxK,UAAL,CAAgBkK,YAAhB,CAA6BE,QAA7B,CAAsCQ,QAA9D;AAEA,SAAKR,QAAL,CAAcS,SAAd,CAAwB,KAAKjM,MAAL,CAAYjB,CAApC,EAAuC,KAAKiB,MAAL,CAAYd,CAAnD,EAAsD,CAAtD;;AAH+C,gDAKvBgJ,aALuB;AAAA;;AAAA;AAK/C,6DAAuC;AAAA,YAA/BjF,aAA+B;AACnC,aAAKuI,QAAL,CAAcS,SAAd,CAAwBhJ,aAAY,CAAClE,CAArC,EAAwCkE,aAAY,CAAC/D,CAArD,EAAwD,CAAxD;AACH;AAP8C;AAAA;AAAA;AAAA;AAAA;AAQlD;;AAED,SAAO,IAAP;AACH,C;;;;;;;;;;;;AC9CD;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASmM,aAAT,GAAwC;AAAA,MAAjB3N,IAAiB,uEAAV,QAAU;AAE3C,MAAG,KAAK2F,IAAL,KAAcjH,SAAjB,EACI,OAAO,IAAP;AAEJ,OAAK8P,eAAL,GAAuB,KAAK9K,UAAL,CAAgB7G,KAAhB,CAAsBkR,GAAtB,CAA0B3N,MAA1B,CAAiC,KAAKkC,MAAL,CAAYjB,CAA7C,EAAgD,KAAKiB,MAAL,CAAYd,CAA5D,EAA+D,KAAKkM,cAApE,CAAvB;AACA,OAAKc,eAAL,CAAqBlF,IAArB,GAA4B,IAA5B;;AAEA,MAAGtJ,IAAI,KAAK,QAAZ,EAAsB;AAClB,SAAKyO,QAAL,GAAgB,QAAhB;;AAEA,QAAG,KAAKf,cAAL,IAAuBxM,MAAM,CAACsB,IAAP,CAAYkF,gBAAtC,EAAwD;AACpD,UAAIzB,MAAM,GAAG,KAAKvC,UAAL,CAAgB5D,WAA7B;;AACA,WAAK4D,UAAL,CAAgB7G,KAAhB,CAAsBiK,MAAtB,CAA6BiH,GAA7B,CAAiCW,UAAjC,CAA4C,KAAKF,eAAjD,EAAkE;AAAEG,aAAK,EAAE;AAAE3O,cAAI,EAAE,WAAR;AAAqBqB,WAAC,EAAC4E,MAAM,CAAC3G,SAAP,CAAiBsP,OAAxC;AAAiDpN,WAAC,EAACyE,MAAM,CAAC3G,SAAP,CAAiBuP,OAApE;AAA6ElG,eAAK,EAAC1C,MAAM,CAAC3G,SAAP,CAAiBqJ,KAApG;AAA2GD,gBAAM,EAACzC,MAAM,CAAC3G,SAAP,CAAiBoJ;AAAnI,SAAT;AAAsJoG,aAAK,EAAE,2BAA7J;AAA0LC,gBAAQ,EAAE,IAApM;AAA0MC,qBAAa,EAAC;AAAxN,OAAlE;AACH,KAHD,MAIK;AACD,WAAKtL,UAAL,CAAgB7G,KAAhB,CAAsBiK,MAAtB,CAA6BiH,GAA7B,CAAiCW,UAAjC,CAA4C,KAAKF,eAAjD,EAAkE;AAAEG,aAAK,EAAE;AAAE3O,cAAI,EAAE;AAAR,SAAT;AAA6B8O,aAAK,EAAE,2BAApC;AAAiEC,gBAAQ,EAAE,IAA3E;AAAiFC,qBAAa,EAAC;AAA/F,OAAlE;AACH;;AAED,SAAKrJ,IAAL,GAAY,KAAK6I,eAAL,CAAqB7I,IAAjC;AACA,SAAKA,IAAL,CAAU2D,IAAV,GAAiB,IAAjB;AACA,SAAK2F,kBAAL;AACH,GAdD,MAeK;AACD,SAAKR,QAAL,GAAgB,QAAhB;;AACA,SAAK/K,UAAL,CAAgB7G,KAAhB,CAAsBqS,OAAtB,CAA8BnB,GAA9B,CAAkCoB,QAAlC,CAA2C,KAAKX,eAAhD;;AAEA,SAAK7I,IAAL,GAAY,KAAK6I,eAAL,CAAqB7I,IAAjC;AACA,SAAKA,IAAL,CACKyJ,SADL,CACe,KAAK1B,cADpB,EAEK2B,eAFL,CAEqB,KAFrB,EAGKC,YAHL,CAGkB,IAHlB;AAIA,SAAK3J,IAAL,CAAU2D,IAAV,GAAiB,IAAjB;AACH;;AAED,SAAO,IAAP;AACH,C;;;;;;;;;;;;AChDD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASiG,oBAAT,CAA8BC,KAA9B,EAAqC;AACxC,OAAK7J,IAAL,CAAU8J,eAAV,CAA0BC,QAA1B,GAAqCF,KAArC;AAEA,SAAO,IAAP;AACH;AAAA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASG,iBAAT,CAA2BH,KAA3B,EAAkC;AACrC,OAAK7J,IAAL,CAAU8J,eAAV,CAA0BG,KAA1B,GAAkCJ,KAAlC;AAEA,SAAO,IAAP;AACH;AAAA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,SAASK,eAAT,CAAyBC,UAAzB,EAAqC;AACxC,MAAIC,KAAK,GAAG,CAAZ;;AAEA,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,UAAd,CAAL,EACA;AACIC,SAAK,GAAGD,UAAR;AACH,GAHD,MAKA;AACI,SAAK,IAAIvM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuM,UAAU,CAAC/O,MAA/B,EAAuCwC,CAAC,EAAxC,EACA;AACIwM,WAAK,IAAID,UAAU,CAACvM,CAAD,CAAnB;AACH;AACJ;;AAED,OAAKoC,IAAL,CAAU8J,eAAV,CAA0BS,IAA1B,GAAiCH,KAAjC;AAEA,SAAO,IAAP;AACH;AAAA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASI,YAAT,CAAsBC,QAAtB,EAAgC;AACnC,MAAIC,IAAI,GAAG,IAAX;;AACA,OAAK1K,IAAL,CAAU2K,iBAAV,GAA8B,UAASC,aAAT,EAAwB;AAClD,QAAGA,aAAa,CAACC,WAAjB,EAA8B;AAC1BJ,cAAQ,CAACG,aAAD,CAAR;AACH,KAFD,MAGK,IAAGF,IAAI,CAACI,cAAL,CAAoBF,aAApB,CAAH,EAAuC;AACxCA,mBAAa,CAACC,WAAd,GAA4B,IAA5B;AACAJ,cAAQ,CAACG,aAAD,CAAR;AACH;AACJ,GARD;;AAUA,SAAO,IAAP;AACH;AAAA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASG,eAAT,CAAyBN,QAAzB,EAAmC;AACtC,OAAKzK,IAAL,CAAUgL,oBAAV,GAAiC,UAASJ,aAAT,EAAwB;AACrD,QAAGA,aAAa,CAACC,WAAjB,EAA8B;AAC1BD,mBAAa,CAACC,WAAd,GAA4B,KAA5B;AACAJ,cAAQ,CAACG,aAAD,CAAR;AACH;AACJ,GALD;;AAOA,SAAO,IAAP;AACH;AAAA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAAStB,kBAAT,CAA4BmB,QAA5B,EAAsC;AACzC,MAAIC,IAAI,GAAG,IAAX;;AACA,MAAIO,IAAI,GAAG,SAAPA,IAAO,CAASL,aAAT,EAAwB;AAC/B,QAAGF,IAAI,CAACI,cAAL,CAAoBF,aAApB,CAAH,EAAuC;AACnC,UAAI5K,IAAI,GAAG4K,aAAa,CAACM,KAAd,CAAoB/B,KAApB,KAA8B,2BAA9B,GAA4DyB,aAAa,CAACO,KAA1E,GAAkFP,aAAa,CAACM,KAA3G;;AAEA,UAAGN,aAAa,CAACC,WAAd,KAA8B,IAAjC,EAAuC;AACnCD,qBAAa,CAACC,WAAd,GAA4B,IAA5B;;AACA,YAAGH,IAAI,CAAC1K,IAAL,CAAU2K,iBAAb,EAAgC;AAC5BD,cAAI,CAAC1K,IAAL,CAAU2K,iBAAV,CAA4BC,aAA5B;AACH;;AAED,YAAGF,IAAI,CAAC1K,IAAL,CAAUoL,aAAV,KAA4BrS,SAA5B,IAAyC2R,IAAI,CAAC1K,IAAL,CAAUoL,aAAV,CAAwBpL,IAAI,CAACqL,EAA7B,CAA5C,EAA8E;AAC1EX,cAAI,CAAC1K,IAAL,CAAUoL,aAAV,CAAwBpL,IAAI,CAACqL,EAA7B,EAAiCrL,IAAjC,EAAuC4K,aAAvC;AACH;AACJ;;AACD,UAAGH,QAAH,EACIA,QAAQ,CAACG,aAAD,CAAR;AACP,KAfD,MAgBK;AACD,UAAGF,IAAI,CAAC1K,IAAL,CAAUgL,oBAAV,IAAkCJ,aAAa,CAACC,WAAd,KAA8B,IAAnE,EAAyE;AACrEH,YAAI,CAAC1K,IAAL,CAAUgL,oBAAV,CAA+BJ,aAA/B;AACH;AACJ;AACJ,GAtBD;;AAwBA,OAAK5K,IAAL,CAAUsL,uBAAV,GAAoCL,IAApC;AAEA,SAAO,IAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASM,gBAAT,CAA0BvL,IAA1B,EAAgCyK,QAAhC,EAA0C;AAC7C,MAAIC,IAAI,GAAG,IAAX;;AACA,MAAIO,IAAI,GAAG,SAAPA,IAAO,CAASjL,IAAT,EAAe4K,aAAf,EAA8B;AACrC,QAAGA,aAAa,CAACC,WAAjB,EAA8B;AAC1BJ,cAAQ,CAACzK,IAAD,EAAO4K,aAAP,CAAR;AACH,KAFD,MAGK,IAAGF,IAAI,CAACI,cAAL,CAAoBF,aAApB,CAAH,EAAuC;AACxCA,mBAAa,CAACC,WAAd,GAA4B,IAA5B;AACAJ,cAAQ,CAACzK,IAAD,EAAO4K,aAAP,CAAR;AACH;AACJ,GARD;;AAUA,MAAI,CAACP,KAAK,CAACC,OAAN,CAActK,IAAd,CAAL,EACA;AACIA,QAAI,GAAG,CAAEA,IAAF,CAAP;AACH;;AAED,OAAK,IAAIpC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoC,IAAI,CAAC5E,MAAzB,EAAiCwC,CAAC,EAAlC,EACA;AACI,QAAI4N,GAAG,GAAIxL,IAAI,CAACpC,CAAD,CAAJ,CAAQ6N,cAAR,CAAuB,MAAvB,CAAD,GAAmCzL,IAAI,CAACpC,CAAD,CAAJ,CAAQoC,IAA3C,GAAkDA,IAAI,CAACpC,CAAD,CAAhE;AAEA,SAAKoC,IAAL,CAAUuL,gBAAV,CAA2BC,GAA3B,EAAgCP,IAAhC;AACH;;AAED,SAAO,IAAP;AACH;AAAA,C;;;;;;;;;;;;AC5ND;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASpQ,SAAT,CAAmBa,CAAnB,EAAsBG,CAAtB,EAAyB;AAC5B,OAAKc,MAAL,CAAY0I,KAAZ,CAAkB3J,CAAlB,EAAqBG,CAArB;AACAN,QAAM,CAACC,IAAP,CAAYS,IAAZ,CAAiBK,UAAjB,CAA4B,KAAKqH,IAAjC,EAAuC,KAAKhH,MAAL,CAAYjB,CAAnD,EAAsD,KAAKiB,MAAL,CAAYd,CAAlE,EAAqE,KAAKqB,KAA1E,EAAiF,KAAK0G,QAAtF;AACA,OAAKzB,oBAAL,CAA0BkD,KAA1B,CAAgC,KAAK1I,MAAL,CAAYjB,CAA5C,EAA+C,KAAKiB,MAAL,CAAYd,CAA3D,EAA6D,KAAKiG,cAAlE;;AAEA,MAAG,KAAKgH,QAAL,KAAkB,QAAlB,IAA8B,KAAKf,cAAL,KAAwBxM,MAAM,CAACsB,IAAP,CAAYkF,gBAArE,EAAuF;AACnF,SAAK8G,eAAL,CAAqBnN,CAArB,GAAyBA,CAAzB;AACA,SAAKmN,eAAL,CAAqBhN,CAArB,GAAyBA,CAAzB;AACH,GAHD,MAIK,IAAG,KAAKiN,QAAL,KAAkB,QAArB,EAA+B;AAChC,SAAKD,eAAL,CAAqBnN,CAArB,GAAyBA,CAAzB;AACA,SAAKmN,eAAL,CAAqBhN,CAArB,GAAyBA,CAAzB;AACH;;AAED,SAAO,IAAP;AACH,C;;;;;;;;;;;;;;;;;;;;;;;AC5BD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS6P,OAAT,CAAiBzG,OAAjB,EAA0B;AAC7B,MAAI0G,OAAO,GAAG,EAAd;AACA,MAAIC,aAAa,GAAG,IAAIrQ,MAAM,CAACC,IAAP,CAAYiK,MAAhB,CAAuB,KAAK9I,MAAL,CAAYjB,CAAnC,EAAsC,KAAKiB,MAAL,CAAYd,CAAlD,EAAqD,KAAKkM,cAA1D,CAApB,CAF6B,CAI7B;;AACA,MAAG,KAAKe,QAAL,KAAkB,QAArB,EAA+B;AAC3B,QAAI+C,eAAe,GAAG,KAAtB;;AACA,QAAG5G,OAAO,KAAKlM,SAAf,EAA0B;AACtBkM,aAAO,GAAG,KAAKlH,UAAL,CAAgB7G,KAAhB,CAAsBiK,MAAtB,CAA6B2K,KAA7B,CAAmCC,QAAnC,CAA4C,KAAK/L,IAAjD,EAAuD,KAAKjC,UAAL,CAAgB7G,KAAhB,CAAsBiK,MAAtB,CAA6B6K,eAA7B,EAAvD,CAAV;;AADsB,iDAGJ/G,OAHI;AAAA;;AAAA;AAGtB,4DAA2B;AAAA,cAAnBxL,MAAmB;AACvB,cAAIuG,IAAI,GAAGvG,MAAM,CAACyR,KAAP,KAAiB,KAAKlL,IAAtB,GAA6BvG,MAAM,CAAC0R,KAApC,GAA4C1R,MAAM,CAACyR,KAA9D;AAEA,cAAG,KAAKe,iBAAL,CAAuBjM,IAAvB,CAAH,EACI2L,OAAO,CAACtO,IAAR,CAAa2C,IAAb;AACP;AARqB;AAAA;AAAA;AAAA;AAAA;AASzB,KATD,CAUA;AAVA,SAWK;AACD,UAAG,CAACqK,KAAK,CAACC,OAAN,CAAcrF,OAAd,CAAJ,EACIA,OAAO,GAAG,CAACA,OAAD,CAAV;;AAFH,kDAIiBA,OAJjB;AAAA;;AAAA;AAID,+DAA2B;AAAA,cAAnBxL,OAAmB;AACvB,cAAGA,OAAM,KAAK,KAAKuG,IAAnB,EACI;AAEJ,cAAG,KAAKiM,iBAAL,CAAuBxS,OAAvB,CAAH,EACIkS,OAAO,CAACtO,IAAR,CAAa5D,OAAb;AACP;AAVA;AAAA;AAAA;AAAA;AAAA;AAWJ;AACJ,GAzBD,CA0BA;AA1BA,OA2BK;AACD,QAAI2G,MAAM,GAAG,KAAb,CADC,CAED;;AACA,QAAG6E,OAAO,KAAKlM,SAAf,EAA0B;AACtBkM,aAAO,GAAG,KAAKlH,UAAL,CAAgB7G,KAAhB,CAAsBqS,OAAtB,CAA8B2C,WAA9B,CAA0C,KAAKvP,MAAL,CAAYjB,CAAtD,EAAyD,KAAKiB,MAAL,CAAYd,CAArE,EAAwE,KAAKkM,cAA7E,EAA6F,IAA7F,EAAmG,IAAnG,CAAV;AACA3H,YAAM,GAAG,IAAT;AACH,KAHD,CAIA;AAJA,SAKK,IAAG,CAACiK,KAAK,CAACC,OAAN,CAAcrF,OAAd,CAAJ,EAA4B;AAC7BA,aAAO,GAAG,CAACA,OAAD,CAAV;AACH,KAVA,CAWD;;;AACA,QAAG7E,MAAH,EAAW;AAAA,kDACS6E,OADT;AAAA;;AAAA;AACP,+DAAyB;AAAA,cAAjBjF,KAAiB;AACrB,cAAGA,KAAI,KAAK,KAAKA,IAAjB,EACI;AAEJ,cAAImM,MAAM,SAAV,CAJqB,CAKrB;;AACA,cAAGnM,KAAI,CAACoM,QAAR,EAAkB;AACdD,kBAAM,GAAG,IAAI5Q,MAAM,CAACC,IAAP,CAAYiK,MAAhB,CAAuBzF,KAAI,CAACE,QAAL,CAAcxE,CAAd,GAAkBsE,KAAI,CAACqM,SAA9C,EAAyDrM,KAAI,CAACE,QAAL,CAAcrE,CAAd,GAAkBmE,KAAI,CAACqM,SAAhF,EAA2FrM,KAAI,CAACqM,SAAhG,CAAT;AACH,WAFD,MAGK;AACDF,kBAAM,GAAG,IAAI5Q,MAAM,CAACC,IAAP,CAAY6F,SAAhB,CAA0BrB,KAAI,CAACtE,CAA/B,EAAkCsE,KAAI,CAACnE,CAAvC,EAA0CmE,KAAI,CAACgD,KAA/C,EAAsDhD,KAAI,CAAC+C,MAA3D,CAAT;AACH;;AAED,cAAG,KAAKuJ,WAAL,CAAiBH,MAAjB,CAAH,EACIR,OAAO,CAACtO,IAAR,CAAa2C,KAAI,CAAC+I,UAAlB;AACP;AAhBM;AAAA;AAAA;AAAA;AAAA;AAiBV,KAjBD,CAkBA;AAlBA,SAmBK;AAAA,kDACiB9D,OADjB;AAAA;;AAAA;AACD,+DAA2B;AAAA,cAAnBxL,QAAmB;AACvB,cAAGA,QAAM,CAACuG,IAAP,KAAgBjH,SAAnB,EACI;;AAEJ,cAAIoT,OAAM,SAAV,CAJuB,CAKvB;;;AACA,cAAG1S,QAAM,CAACuG,IAAP,CAAYoM,QAAf,EAAyB;AACrBD,mBAAM,GAAG,IAAI5Q,MAAM,CAACC,IAAP,CAAYiK,MAAhB,CAAuBhM,QAAM,CAACuG,IAAP,CAAYE,QAAZ,CAAqBxE,CAArB,GAAyBjC,QAAM,CAACuG,IAAP,CAAYqM,SAA5D,EAAuE5S,QAAM,CAACuG,IAAP,CAAYE,QAAZ,CAAqBrE,CAArB,GAAyBpC,QAAM,CAACuG,IAAP,CAAYqM,SAA5G,EAAuH5S,QAAM,CAACuG,IAAP,CAAYqM,SAAnI,CAAT;AACA,gBAAG,CAAC9Q,MAAM,CAACC,IAAP,CAAYgE,UAAZ,CAAuB+M,cAAvB,CAAsCX,aAAtC,EAAqDO,OAArD,CAAJ,EACI;AACP,WAJD,MAKK;AACDA,mBAAM,GAAG,IAAI5Q,MAAM,CAACC,IAAP,CAAY6F,SAAhB,CAA0B5H,QAAM,CAACuG,IAAP,CAAYtE,CAAtC,EAAyCjC,QAAM,CAACuG,IAAP,CAAYnE,CAArD,EAAwDpC,QAAM,CAACuG,IAAP,CAAYgD,KAApE,EAA2EvJ,QAAM,CAACuG,IAAP,CAAY+C,MAAvF,CAAT;AACA,gBAAG,CAACxH,MAAM,CAACC,IAAP,CAAYgE,UAAZ,CAAuBgN,iBAAvB,CAAyCZ,aAAzC,EAAwDO,OAAxD,CAAJ,EACI;AACP;;AAED,cAAG,KAAKM,iBAAL,CAAuBN,OAAvB,CAAH,EACIR,OAAO,CAACtO,IAAR,CAAa5D,QAAb;AACP;AApBA;AAAA;AAAA;AAAA;AAAA;AAqBJ;AACJ;;AAED,SAAOkS,OAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASb,cAAT,CAAwB4B,OAAxB,EAAiCC,OAAjC,EAA0C;AAC7C,MAAIC,IAAJ,EAAUC,IAAV,EAAgB7H,MAAhB,CAD6C,CAE7C;;AACA,MAAG0H,OAAO,CAACxB,KAAR,KAAkBnS,SAAlB,IAA+B2T,OAAO,CAACvB,KAAR,KAAkBpS,SAApD,EAA+D;AAC3D6T,QAAI,GAAGF,OAAO,CAACxB,KAAf;AACA2B,QAAI,GAAGH,OAAO,CAACvB,KAAf;AACH,GAHD,MAIK;AACDyB,QAAI,GAAGF,OAAP;AACAG,QAAI,GAAGF,OAAP;AACH;;AAED,MAAGC,IAAI,CAACjJ,IAAL,KAAc5K,SAAd,IAA2B6T,IAAI,CAACjJ,IAAL,KAAc,IAA5C,EACIqB,MAAM,GAAG6H,IAAT,CADJ,KAEK,IAAGA,IAAI,CAAClJ,IAAL,KAAc5K,SAAd,IAA2B8T,IAAI,CAAClJ,IAAL,KAAc,IAA5C,EACDqB,MAAM,GAAG4H,IAAT,CADC,KAGD,OAAO,KAAP;AAEJ,SAAQ,KAAKlB,OAAL,CAAa1G,MAAb,EAAqB5J,MAArB,GAA8B,CAAtC;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASqR,iBAAT,CAA2BN,MAA3B,EAAmC;AACtC,MAAIT,OAAO,GAAG,KAAd,CADsC,CAGtC;;AAHsC,8CAIrB,KAAK1E,mBAJgB;AAAA;;AAAA;AAItC,2DAA2C;AAAA,UAAnCC,KAAmC;;AACvC;AACA,UAAGkF,MAAM,CAAC9R,IAAP,IAAe,CAAlB,EAAqB;AACjBqR,eAAO,GAAGnQ,MAAM,CAACC,IAAP,CAAYgE,UAAZ,CAAuBsN,gBAAvB,CAAwC7F,KAAxC,EAA+CkF,MAA/C,CAAV;AACH,OAFD,CAGA;AAHA,WAIK;AACDT,eAAO,GAAGnQ,MAAM,CAACC,IAAP,CAAYgE,UAAZ,CAAuBuN,mBAAvB,CAA2CZ,MAA3C,EAAmDlF,KAAnD,CAAV;AACH;;AAED,UAAGyE,OAAH,EAAY;AACR,eAAO,IAAP;AACH;AACJ;AAjBqC;AAAA;AAAA;AAAA;AAAA;;AAmBtC,SAAO,KAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASO,iBAAT,CAA2BxS,MAA3B,EAAmC;AACtC,MAAIuG,IAAJ;AAEA,MAAGvG,MAAM,CAACY,IAAP,KAAgB,MAAnB,EACI2F,IAAI,GAAGvG,MAAP,CADJ,KAEK,IAAGA,MAAM,CAACuG,IAAP,KAAgBjH,SAAnB,EACDiH,IAAI,GAAGvG,MAAM,CAACuG,IAAd,CADC,KAGD,OAAO,KAAP,CARkC,CAUtC;;AACA,MAAIQ,KAAK,GAAGR,IAAI,CAACQ,KAAL,CAAWpF,MAAX,GAAoB,CAApB,GAAwB4E,IAAI,CAACQ,KAAL,CAAWS,MAAX,CAAkB,CAAlB,CAAxB,GAA+CjB,IAAI,CAACQ,KAAhE,CAXsC,CAYtC;;AAZsC,8CAatBA,KAbsB;AAAA;;AAAA;AAatC,2DAAuB;AAAA,UAAfwM,IAAe;AACnB,UAAIrO,MAAM,GAAGqO,IAAI,CAACvM,QAAL,CAAc,CAAd,CAAb;;AAEA,WAAI,IAAI7C,CAAC,GAAG,CAAR,EAAWxC,MAAM,GAAG4R,IAAI,CAACvM,QAAL,CAAcrF,MAAtC,EAA8CwC,CAAC,GAAGxC,MAAlD,EAA0DwC,CAAC,EAA3D,EAA+D;AAC3D,YAAIiB,MAAM,GAAGmO,IAAI,CAACvM,QAAL,CAAc7C,CAAd,CAAb;;AACA,YAAIc,QAAO,GAAG,IAAInD,MAAM,CAACC,IAAP,CAAYS,IAAhB,CAAqB0C,MAAM,CAACjD,CAA5B,EAA+BiD,MAAM,CAAC9C,CAAtC,EAAyCgD,MAAM,CAACnD,CAAhD,EAAmDmD,MAAM,CAAChD,CAA1D,CAAd,CAF2D,CAI3D;;;AAJ2D,oDAK1C,KAAKmL,mBALqC;AAAA;;AAAA;AAK3D,iEAA2C;AAAA,gBAAnCC,KAAmC;;AACvC,gBAAIyE,QAAO,GAAGnQ,MAAM,CAACC,IAAP,CAAYgE,UAAZ,CAAuByN,cAAvB,CAAsChG,KAAtC,EAA6CvI,QAA7C,CAAd,CADuC,CAEvC;;;AACA,gBAAG,CAACgN,QAAJ,EACIA,QAAO,GAAGnQ,MAAM,CAACC,IAAP,CAAY0R,QAAZ,CAAqBC,aAArB,CAAmClG,KAAnC,EAA0CvI,QAAO,CAACE,SAAR,EAA1C,CAAV;AACJ,gBAAG,CAAC8M,QAAJ,EACIA,QAAO,GAAGnQ,MAAM,CAACC,IAAP,CAAY0R,QAAZ,CAAqBC,aAArB,CAAmClG,KAAnC,EAA0CvI,QAAO,CAAChC,SAAR,EAA1C,CAAV;;AAEJ,gBAAGgP,QAAH,EAAY;AACR,qBAAO,IAAP;AACH;AACJ;AAhB0D;AAAA;AAAA;AAAA;AAAA;;AAiB3D/M,cAAM,GAAGE,MAAT;AACH,OArBkB,CAuBnB;;;AACA,UAAIH,OAAO,GAAG,IAAInD,MAAM,CAACC,IAAP,CAAYS,IAAhB,CAAqB+Q,IAAI,CAACvM,QAAL,CAAcuM,IAAI,CAACvM,QAAL,CAAcrF,MAAd,GAAuB,CAArC,EAAwCM,CAA7D,EAAgEsR,IAAI,CAACvM,QAAL,CAAcuM,IAAI,CAACvM,QAAL,CAAcrF,MAAd,GAAuB,CAArC,EAAwCS,CAAxG,EAA2GmR,IAAI,CAACvM,QAAL,CAAc,CAAd,EAAiB/E,CAA5H,EAA+HsR,IAAI,CAACvM,QAAL,CAAc,CAAd,EAAiB5E,CAAhJ,CAAd,CAxBmB,CAyBlB;;AAzBkB,kDA0BF,KAAKmL,mBA1BH;AAAA;;AAAA;AA0BnB,+DAA2C;AAAA,cAAnCC,MAAmC;;AACvC,cAAIyE,SAAO,GAAGnQ,MAAM,CAACC,IAAP,CAAYgE,UAAZ,CAAuByN,cAAvB,CAAsChG,MAAtC,EAA6CvI,OAA7C,CAAd;;AAEA,cAAGgN,SAAH,EAAY;AACR,mBAAO,IAAP;AACH;AACJ;AAhCkB;AAAA;AAAA;AAAA;AAAA;AAiCtB;AA9CqC;AAAA;AAAA;AAAA;AAAA;;AAgDtC,SAAO,KAAP;AACH,C;;;;;;;;;;;;AC1OD;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS0B,WAAT,GAA8D;AAAA,MAAzCxJ,QAAyC,uEAA9BrI,MAAM,CAACsB,IAAP,CAAYkF,gBAAkB;AACjE,OAAK6B,QAAL,GAAgBA,QAAhB;AACArI,QAAM,CAACC,IAAP,CAAYS,IAAZ,CAAiBK,UAAjB,CAA4B,KAAKqH,IAAjC,EAAuC,KAAKhH,MAAL,CAAYjB,CAAnD,EAAsD,KAAKiB,MAAL,CAAYd,CAAlE,EAAqE,KAAKqB,KAA1E,EAAiF,KAAK0G,QAAtF;AACA,SAAO,IAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASyJ,iBAAT,GAA+C;AAAA,MAApBvL,cAAoB,uEAAH,CAAG;AAClD,OAAKA,cAAL,GAAsBA,cAAtB;AACA,OAAKK,oBAAL,CAA0BkD,KAA1B,CAAgC,KAAK1I,MAAL,CAAYjB,CAA5C,EAA+C,KAAKiB,MAAL,CAAYd,CAA3D,EAA6D,KAAKiG,cAAlE;AAEA,SAAO,IAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASwL,iBAAT,GAA0E;AAAA,MAA/CvF,cAA+C,uEAA9BxM,MAAM,CAACsB,IAAP,CAAYkF,gBAAkB;AAC7E,MAAIwL,WAAW,GAAG,KAAKxF,cAAL,IAAuBxM,MAAM,CAACsB,IAAP,CAAYkF,gBAArD;AACA,OAAKgG,cAAL,GAAsBA,cAAtB;AACA,OAAKc,eAAL,CAAqB2E,SAArB,CAA+B,KAAKzF,cAApC;;AAEA,MAAG,KAAKe,QAAL,KAAkB,QAArB,EAA+B;AAC3B,QAAG,KAAKf,cAAL,IAAuBxM,MAAM,CAACsB,IAAP,CAAYkF,gBAAtC,EAAwD;AACpD,UAAIzB,MAAM,GAAG,KAAKvC,UAAL,CAAgB5D,WAA7B;;AAEA,WAAK4D,UAAL,CAAgB7G,KAAhB,CAAsBiK,MAAtB,CAA6BnB,IAA7B,CAAkCxB,GAAlC,CAAsC,KAAKwB,IAA3C,EAAiD;AAC7CgJ,aAAK,EAAE;AACH3O,cAAI,EAAE,WADH;AAEHqB,WAAC,EAAE4E,MAAM,CAAC3G,SAAP,CAAiBsP,OAFjB;AAGHpN,WAAC,EAAEyE,MAAM,CAAC3G,SAAP,CAAiBuP,OAHjB;AAIHlG,eAAK,EAAE1C,MAAM,CAAC3G,SAAP,CAAiBqJ,KAJrB;AAKHD,gBAAM,EAAEzC,MAAM,CAAC3G,SAAP,CAAiBoJ,MALtB;AAMH9C,sBAAY,EAAC;AANV;AADsC,OAAjD;AAUH,KAbD,MAcK,IAAGsN,WAAH,EAAgB;AACjB,WAAKxP,UAAL,CAAgB7G,KAAhB,CAAsBiK,MAAtB,CAA6BnB,IAA7B,CAAkCxB,GAAlC,CAAsC,KAAKwB,IAA3C,EAAiD;AAC7CgJ,aAAK,EAAE;AACH3O,cAAI,EAAE,QADH;AAEHqB,WAAC,EAAE,KAAKmN,eAAL,CAAqBnN,CAFrB;AAGHG,WAAC,EAAE,KAAKgN,eAAL,CAAqBhN;AAHrB,SADsC;AAM7CoE,oBAAY,EAAE,KAAK8H,cAN0B;AAO7C0F,gBAAQ,EAAE;AAPmC,OAAjD;AASH,KAVI,MAWA;AACD,WAAK5E,eAAL,CAAqB2E,SAArB,CAA+B,KAAKzF,cAApC;AACH;;AACD,SAAKhK,UAAL,CAAgB7G,KAAhB,CAAsBiK,MAAtB,CAA6BnB,IAA7B,CAAkCxB,GAAlC,CAAsC,KAAKwB,IAA3C,EAAiD,cAAjD,EAAiE,KAAK+H,cAAtE;AACH,GA9BD,MA+BK,IAAG,KAAKe,QAAL,KAAkB,QAArB,EAA+B;AAChC,SAAK9I,IAAL,CAAUyJ,SAAV,CAAoB,KAAK1B,cAAzB;AACH;;AAED,SAAO,IAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAAS1B,aAAT,CAAuB5M,MAAvB,EAA+C;AAAA,MAAhB6G,MAAgB,uEAAP,KAAO;AAClD,MAAG,CAAC,KAAKwB,cAAT,EACI,OAAO,IAAP;AAEJ,MAAI4L,YAAJ;AACA,MAAGpN,MAAH,EACIoN,YAAY,GAAGpN,MAAf,CADJ,KAEK;AACD,QAAG7G,MAAM,CAACY,IAAP,KAAgB,MAAhB,IAA0BZ,MAAM,CAACY,IAAP,KAAgB,WAA7C,EACIqT,YAAY,GAAGjU,MAAM,CAAC0L,YAAP,CAAoB3L,cAApB,EAAf,CADJ,KAGIkU,YAAY,GAAGjU,MAAM,CAAC2E,IAAP,CAAYC,GAAZ,CAAgB,cAAhB,EAAgC7E,cAAhC,EAAf;AACP;AAED,MAAG+B,MAAM,CAACC,IAAP,CAAYgE,UAAZ,CAAuBgN,iBAAvB,CAAyC,KAAKrK,oBAA9C,EAAoEuL,YAApE,CAAH,EACI,OAAO,IAAP;AAEJ,SAAO,KAAP;AACH,C;;;;;;;;;;;;AC7HD;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,GAAT,CAAa1U,OAAb,EAAsB8G,SAAtB,EAAiC;AACpC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACI,OAAKhC,UAAL,GAAkBgC,SAAS,GAAGA,SAAH,GAAe,KAA1C;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI,OAAKpD,MAAL,GAAc,IAAIpB,MAAM,CAACC,IAAP,CAAYC,KAAhB,EAAd;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,OAAKkI,IAAL,GAAY,IAAIpI,MAAM,CAACC,IAAP,CAAYS,IAAhB,EAAZ;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,OAAKiB,KAAL,GAAa,CAAb;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,OAAKiK,IAAL,GAAY,CAAZ;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,OAAKvD,QAAL,GAAgBrI,MAAM,CAACsB,IAAP,CAAYkF,gBAA5B;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,OAAKD,cAAL,GAAsB,CAAtB;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,OAAKK,oBAAL,GAA4B,IAAI5G,MAAM,CAACC,IAAP,CAAYiK,MAAhB,EAA5B;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,OAAKsC,cAAL,GAAsBxM,MAAM,CAACsB,IAAP,CAAYkF,gBAAlC;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,OAAK8D,wBAAL,GAAgC,IAAhC;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,OAAKC,KAAL,GAAa,KAAb;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,OAAKiB,SAAL,GAAiB,KAAjB;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,OAAKlC,aAAL,GAAqB,EAArB;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,OAAKmC,mBAAL,GAA2B,EAA3B;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACI;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,OAAK8B,QAAL,GAAgB,KAAhB;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,OAAKnD,MAAL,GAAc;AACVlB,UAAM,EAAE,MADE;AAEVC,QAAI,EAAE,CAFI;AAGVC,uBAAmB,EAAE,CAHX;AAIVC,oBAAgB,EAAE,CAJR;AAKVnH,YAAQ,EAAE,CALA;AAMV5E,QAAI,EAAE;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","file":"phaser-raycaster.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"PhaserRaycaster\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PhaserRaycaster\"] = factory();\n\telse\n\t\troot[\"PhaserRaycaster\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main.js\");\n","var PhaserRaycaster = function (scene)\n{\n    //The Scene that owns this plugin\n    this.scene = scene;\n\n    this.systems = scene.sys;\n\n    if (!scene.sys.settings.isBooted)\n    {\n        scene.sys.events.once('boot', this.boot, this);\n    }\n};\n\n//Static function called by the PluginFile Loader.\nPhaserRaycaster.register = function (PluginManager)\n{\n    //  Register this plugin with the PluginManager, so it can be added to Scenes.\n\n    //  The first argument is the name this plugin will be known as in the PluginManager. It should not conflict with already registered plugins.\n    //  The second argument is a reference to the plugin object, which will be instantiated by the PluginManager when the Scene boots.\n    //  The third argument is the local mapping. This will make the plugin available under `this.sys.base` and also `this.base` from a Scene if\n    //  it has an entry in the InjectionMap.\n    PluginManager.register('PhaserRaycaster', PhaserRaycaster, 'base');\n};\n\nPhaserRaycaster.prototype = {\n\n    //  Called when the Plugin is booted by the PluginManager.\n    //  If you need to reference other systems in the Scene (like the Loader or DisplayList) then set-up those references now, not in the constructor.\n    boot: function ()\n    {\n        var eventEmitter = this.systems.events;\n\n        //  Listening to the following events is entirely optional, although we would recommend cleanly shutting down and destroying at least.\n        //  If you don't need any of these events then remove the listeners and the relevant methods too.\n\n        eventEmitter.on('start', this.start, this);\n\n        eventEmitter.on('preupdate', this.preUpdate, this);\n        eventEmitter.on('update', this.update, this);\n        eventEmitter.on('postupdate', this.postUpdate, this);\n\n        eventEmitter.on('pause', this.pause, this);\n        eventEmitter.on('resume', this.resume, this);\n\n        eventEmitter.on('sleep', this.sleep, this);\n        eventEmitter.on('wake', this.wake, this);\n\n        eventEmitter.on('shutdown', this.shutdown, this);\n        eventEmitter.on('destroy', this.destroy, this);\n    },\n\n    //A test method.\n    test: function (name)\n    {\n        console.log('RaycasterPlugin says hello ' + name + '!');\n    },\n\n    //Called when a Scene is started by the SceneManager. The Scene is now active, visible and running.\n    start: function ()\n    {\n    },\n\n    //Called every Scene step - phase 1\n    preUpdate: function (time, delta)\n    {\n    },\n\n    //Called every Scene step - phase 2\n    update: function (time, delta)\n    {\n    },\n\n    //Called every Scene step - phase 3\n    postUpdate: function (time, delta)\n    {\n    },\n\n    //Called when a Scene is paused. A paused scene doesn't have its Step run, but still renders.\n    pause: function ()\n    {\n    },\n\n    //Called when a Scene is resumed from a paused state.\n    resume: function ()\n    {\n    },\n\n    //Called when a Scene is put to sleep. A sleeping scene doesn't update or render, but isn't destroyed or shutdown. preUpdate events still fire.\n    sleep: function ()\n    {\n    },\n\n    //Called when a Scene is woken from a sleeping state.\n    wake: function ()\n    {\n    },\n\n    //Called when a Scene shuts down, it may then come back again later (which will invoke the 'start' event) but should be considered dormant.\n    shutdown: function ()\n    {\n    },\n\n    //Called when a Scene is destroyed by the Scene Manager. There is no coming back from a destroyed Scene, so clear up all resources here.\n    destroy: function ()\n    {\n        this.shutdown();\n\n        this.scene = undefined;\n    },\n\n    //Create Raycaster object\n    createRaycaster: function(options = {}) {\n        options.scene = this.scene;\n        return new this._Raycaster(options);\n    }\n\n};\n\nPhaserRaycaster.prototype.constructor = PhaserRaycaster;\nPhaserRaycaster.prototype._Raycaster = require('./raycaster-core.js').Raycaster;\n\n//Make sure you export the plugin for webpack to expose\n\nmodule.exports = PhaserRaycaster;\n","/**\n* Get mapped object's bounding box.\n*\n* @method Raycaster.Map#matterBody.getBoundingBox\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @return {Phaser.Geom.Rectangle} - Mapped object's bounding box.\n*/\nexport function getBoundingBox() {\n    return this.object.getBounds();\n}\n","let rectangle = require('./map-rectangle-methods.js');\nlet line = require('./map-line-methods.js');\nlet polygon = require('./map-polygon-methods.js');\nlet arc = require('./map-circle-methods.js');\nlet container = require('./map-container-methods.js');\nlet tilemap = require('./map-tilemap-methods.js');\nlet matterBody = require('./map-matterBody-methods.js');\nlet segmentCount = require('./segmentsCount.js');\nlet boundingBox = require('./boundingBox.js');\n\n/**\n * Configure map.\n *\n * @method Raycaster.Map#config\n * @memberof Raycaster.Map\n * @instance\n * @since 0.6.0\n *\n * @param {object} [options] - Map's congfiguration options. May include:\n * @param {object} options.object - Game object to map\n * @param {string} [options.type] - Map type. If not defined, it will be determined based on object.\n * @param {boolean} [options.dynamic = false] - If set true, map will be dynamic (updated on scene update event).\n * @param {boolean} [options.active = true] - If set true, map will be active (will provide points, segments and will be updated).\n * @param {integer} [options.segmentCount] - Circle map's segment count. If set to 0, map won't be generating segments and relay only on tangent points calculated for currently testing ray.\n * @param {boolean} [options.forceConvex] - If set true, matter body map will use convex body (hull) for non-covex bodies.\n * @param {boolean} [options.forceVerticesMapping] - If set true, matter body map will use only vertices for mapping circle bodies.\n * \n * @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n */\nexport function config(options) {\n    this.object = options.object;\n    //object type\n    if(options.type === undefined)\n        options.type = options.object.type;\n    if(options.type === 'body' || options.type === 'composite')\n        options.type = 'MatterBody';\n    this.type = options.type;\n    \n    switch(options.type) {\n        case 'Polygon':\n            this.getPoints = polygon.getPoints;\n            this.getSegments = polygon.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = polygon.updateMap;\n            break;\n        case 'Arc':\n            //circle segments count\n            this.segmentCount = (options.segmentCount) ? options.segmentCount : 0;\n            this.circle = (options.segmentCount) ? false : true;\n            this.getPoints = arc.getPoints;\n            this.getSegments = arc.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = arc.updateMap;\n            this.setSegmentCount = segmentCount.setSegmentCount;\n            break;\n        case 'Line':\n            this.getPoints = line.getPoints;\n            this.getSegments = line.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = line.updateMap;\n            break;\n        case 'Container':\n            this.getPoints = container.getPoints;\n            this.getSegments = container.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = container.updateMap;\n            break;\n        case 'StaticTilemapLayer':\n            //ray colliding tiles\n            this.collisionTiles = (options.collisionTiles) ? options.collisionTiles : [];\n            this.getPoints = tilemap.getPoints;\n            this.getSegments = tilemap.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = tilemap.updateMap;\n            this.setCollisionTiles = tilemap.setCollisionTiles;\n            //reset tilemap origin\n            this.object.setOrigin(0,0);\n            break;\n        case 'DynamicTilemapLayer':\n            //ray colliding tiles\n            this.collisionTiles = (options.collisionTiles) ? options.collisionTiles : [];\n            this.getPoints = tilemap.getPoints;\n            this.getSegments = tilemap.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = tilemap.updateMap;\n            this.setCollisionTiles = tilemap.setCollisionTiles;\n            //reset tilemap origin\n            this.object.setOrigin(0,0);\n            break;\n        case 'TilemapLayer':\n            //ray colliding tiles\n            this.collisionTiles = (options.collisionTiles) ? options.collisionTiles : [];\n            this.getPoints = tilemap.getPoints;\n            this.getSegments = tilemap.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = tilemap.updateMap;\n            this.setCollisionTiles = tilemap.setCollisionTiles;\n            //reset tilemap origin\n            this.object.setOrigin(0,0);\n            break;\n        case 'MatterBody':\n            //force convex body (hull) mapping\n            this.forceConvex = (options.forceConvex) ? true : false;\n            //force mapping by vertices\n            this.forceVerticesMapping = (options.forceVerticesMapping) ? true : false;\n            this.circle = false;\n            this.getPoints = matterBody.getPoints;\n            this.getSegments = matterBody.getSegments;\n            this.getBoundingBox = matterBody.getBoundingBox;\n            this.updateMap = matterBody.updateMap;\n            break;\n        default:\n            this.getPoints = rectangle.getPoints;\n            this.getSegments = rectangle.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = rectangle.updateMap;\n    }\n\n    //dynamic map\n    this.dynamic = (options.dynamic == true) ? true : false;\n\n    //enable/disable map\n    this.active = (options.active !== undefined) ? options.active : true;\n\n    return this;\n}\n","/*Map methods for circles*/\n/**\n* Get array of mapped circle's vertices used as rays targets.\n* If {@link Raycaster.Map#segmentCount Raycaster.Map#segmentCount} is set to 0, it'll calculatoe tangent points for passed ray.\n*\n* @method Raycaster.Map#arc.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n\n    if(this._points.length > 0)\n        return this._points;\n    \n    let points = [];\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * (this.object.originX - 0.5);\n    offset.y = this.object.y - this.object.displayHeight * (this.object.originY - 0.5);\n\n    //calculate tangent rays\n    if(ray) {\n        let rayA = new Phaser.Geom.Line();\n        let rayB = new Phaser.Geom.Line();\n        let c;\n        \n        let rotation = this.object.rotation;\n        \n        if(rotation !== 0) {\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, offset.x, offset.y);\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n            let cB = vector.getPointB();\n            c = new Phaser.Geom.Line(ray.origin.x, ray.origin.y, cB.x, cB.y);\n        }\n        else { \n            c = new Phaser.Geom.Line(ray.origin.x, ray.origin.y, offset.x, offset.y);\n        }\n\n        let rayLength = Math.sqrt(Math.pow(Phaser.Geom.Line.Length(c), 2) - Math.pow(this.object.radius * this.object.scaleX, 2));\n\n        //ray angle\n        let angle = Phaser.Geom.Line.Angle(c);\n        let dAngle = Math.asin((this.object.radius * this.object.scaleX) / Phaser.Geom.Line.Length(c));\n        Phaser.Geom.Line.SetToAngle(rayA, ray.origin.x, ray.origin.y, angle - dAngle, rayLength);\n        Phaser.Geom.Line.SetToAngle(rayB, ray.origin.x, ray.origin.y, angle + dAngle, rayLength);\n\n        //adding tangent points\n        points.push(rayA.getPointB());\n        points.push(rayB.getPointB());\n    }\n\n    return points;\n};\n\n/**\n* Get array of mapped circle's segments used to test object's intersection with ray.\n* If {@link Raycaster.Map#segmentCount Raycaster.Map#segmentCount} is set to 0, it'll return empty array.\n*\n* @method Raycaster.Map#arc.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update circles's map of points and segments.\n*\n* @method Raycaster.Map#arc.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    if(!this.segmentCount) {\n        this._points = [];\n        this._segments = [];\n        return this;\n    }\n    \n    //calculate offset based on object position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX + this.object.radius * this.object.scaleX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY + this.object.radius * this.object.scaleY;\n\n    //get points surrounding circle\n    let points = this.object.geom.getPoints(this.segmentCount);\n    let segments = []\n\n    //set points\n    //calculate positions after object's rotation\n    let rotation = this.object.rotation;\n    if(rotation !== 0) {\n        let newPoints = [];\n        for(let point of points) {\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, this.object.x + (point.x + this.object.radius) * this.object.scaleX, this.object.y + (point.y + this.object.radius) * this.object.scaleY);\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n            newPoints.push(vector.getPointB());\n        }\n        points = newPoints;\n    }\n    //if rotation === 0\n    else {\n        for(let point of points) {\n            point.x = point.x * this.object.scaleX + offset.x;\n            point.y = point.y * this.object.scaleY + offset.y;\n        }\n    }\n\n    //set segments\n    for(let i = 0, length = points.length; i < length; i++) {\n        if(i+1 < length)\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\n        else\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\n    }\n\n    this._points = points;\n    this._segments = segments;\n    return this;\n};\n","/*Map methods for containers*/\n/**\n* Get array of mapped container's and its children vertices used as rays targets.\n*\n* @method Raycaster.Map#container.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.1\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false, getCircles = false) {\n    if(!this.active)\n        return [];\n\n    let points = [];\n    if(!getCircles)\n        points = this._points;\n    //calculate offset based on container position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\n\n    //get tangent points of container's circles\n    if(ray){\n        //create temporary ray\n        let vector = new Phaser.Geom.Line(0, 0, ray.origin.x - offset.x, ray.origin.y - offset.y);\n        Phaser.Geom.Line.SetToAngle(vector, 0, 0, Phaser.Geom.Line.Angle(vector) - this.object.rotation, Phaser.Geom.Line.Length(vector));\n\n        let tempRay = ray._raycaster.createRay({\n            origin: {\n                x: vector.getPointB().x,\n                y: vector.getPointB().y\n            }\n        });\n\n        for(let child of this.object.list){\n            if(child.type === 'Arc'){\n\n                let map = child.data.get('raycasterMap');\n                if(map._points.length == 0){\n                    for(let point of map.getPoints(tempRay, true)){\n                        let vector = new Phaser.Geom.Line(0, 0, point.x, point.y);\n                        Phaser.Geom.Line.SetToAngle(vector, 0, 0, Phaser.Geom.Line.Angle(vector) + this.object.rotation, Phaser.Geom.Line.Length(vector));\n\n                        points.push(new Phaser.Geom.Point(vector.getPointB().x + offset.x, vector.getPointB().y + offset.y));\n                    }\n                }\n            }\n            else if(child.type === 'Container') {\n                for(let point of child.data.get('raycasterMap').getPoints(tempRay, true)){\n                    if(this.object.rotation !== 0) {\n                        let vector = new Phaser.Geom.Line(this.object.x, this.object.y, point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y);\n                        Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + this.object.rotation, Phaser.Geom.Line.Length(vector));\n                        points.push(vector.getPointB());\n                    }\n                    //if rotation === 0\n                    else\n                        points.push(new Phaser.Geom.Point(point.x * this.object.scaleX + offset.x, point.y * this.object.scaleX + offset.y));\n                }\n            }\n\n        }\n    }\n\n    return points;\n};\n\n/**\n* Get array of mapped container's and its children segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#container.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.1\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n\n    return this._segments;\n};\n\n/**\n* Update container's and its children maps of points and segments.\n*\n* @method Raycaster.Map#container.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.1\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    let container = this.object;\n\n    //calculate offset based on container position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\n\n    let rotation = container.rotation;\n\n    //iterate through container's children\n    container.iterate(function(child){\n        if(!child.data)\n            child.setDataEnabled();\n\n        //get child map\n        let map = child.data.get('raycasterMap');\n        if(!map) {\n            map = new this.constructor({\n                object: child,\n                segmentCount: this.segmentCount\n            });\n            child.data.set('raycasterMap', map);\n        }\n        else\n            map.updateMap();\n\n        //add child points\n        let childPoints = [];\n        for(let point of map.getPoints()) {\n            //calculate positions after container's rotation\n            if(rotation !== 0) {\n                let vector = new Phaser.Geom.Line(this.object.x, this.object.y, point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y);\n                Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n                points.push(vector.getPointB());\n            }\n            //if rotation === 0\n            else\n                points.push(new Phaser.Geom.Point(point.x * container.scaleX + offset.x, point.y * container.scaleX + offset.y));\n\n            childPoints.push(points[points.length - 1])\n        }\n\n        //add child segments\n        for(let segment of map.getSegments()) {\n            //calculate positions after container's rotation\n            if(rotation !== 0) {\n                let pointA = segment.getPointA();\n                let pointB = segment.getPointB();\n                let vectorA = new Phaser.Geom.Line(this.object.x, this.object.y, pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y);\n                let vectorB = new Phaser.Geom.Line(this.object.x, this.object.y, pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y);\n                Phaser.Geom.Line.SetToAngle(vectorA, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorA) + rotation, Phaser.Geom.Line.Length(vectorA));\n                Phaser.Geom.Line.SetToAngle(vectorB, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorB) + rotation, Phaser.Geom.Line.Length(vectorB));\n\n                segments.push(new Phaser.Geom.Line(vectorA.getPointB().x, vectorA.getPointB().y, vectorB.getPointB().x, vectorB.getPointB().y));\n            }\n            //if rotation === 0\n            else\n                segments.push(new Phaser.Geom.Line(segment.getPointA().x * container.scaleX + offset.x, segment.getPointA().y * container.scaleY + offset.y, segment.getPointB().x * container.scaleX + offset.x, segment.getPointB().y * container.scaleY + offset.y));\n        }\n\n    }.bind(this));\n\n    //get children intersections\n    for(let i = 0, iLength = container.list.length; i < iLength; i++){\n        let childA = container.list[i];\n        let mapA = childA.data.get('raycasterMap');\n\n        for(let j = i+1, jLength = container.list.length; j < jLength; j++){\n            let childB = container.list[j];\n            let mapB = childB.data.get('raycasterMap');\n            //check if bounding boxes overlap\n            if(!Phaser.Geom.Intersects.RectangleToRectangle(childA.getBounds(), childB.getBounds()))\n                continue;\n\n            //find objects intersections\n            for(let segmentA of mapA.getSegments()) {\n                for(let segmentB of mapB.getSegments()) {\n                    let intersection = [];\n                    if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\n                        continue;\n                    \n                     //calculate positions after container's rotation\n                    if(rotation !== 0) {\n                        let vector = new Phaser.Geom.Line(this.object.x, this.object.y, intersection.x * this.object.scaleX + offset.x, intersection.y * this.object.scaleY + offset.y);\n                        Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n                        points.push(vector.getPointB());\n                    }\n                    //if rotation === 0\n                    else\n                        points.push(new Phaser.Geom.Point(intersection.x * container.scaleX + offset.x, intersection.y * container.scaleX + offset.y));\n                }\n            }\n        }\n    }\n\n    this._points = points;\n    this._segments = segments;\n\n    return this;\n};\n","/**\n * @classdesc\n *\n * Map class responsible for mapping game objects.\n *\n * @namespace Raycaster.Map\n * @class Raycaster.Map\n * @constructor\n * @since 6.0.0\n *\n * @param {object} options - Map specific configuration settings.\n * @param {Raycaster} [raycaster] - Parent raycaster object.\n */\nexport function Map(options, raycaster) {\n    /**\n    * Reference to parent Raycaster object.\n    *\n    * @name Raycaster.Map#_raycaster\n    * @type {Raycaster}\n    * @private\n    * @since 0.9.0\n    */\n    this._raycaster = raycaster ? raycaster : false;\n    /**\n    * Mapped object's type\n    *\n    * @name Raycaster.Map#type\n    * @type {string}\n    * @readonly\n    * @since 0.6.0\n    */\n    this.type;\n    /**\n    * If set true, map will be tested by ray. Otherwise it will be ignored.\n    *\n    * @name Raycaster.Map#active\n    * @type {boolean}\n    * @default true\n    * @since 0.7.2\n    */\n    this.active;\n    /**\n    * If set true, map will be automatically updated on scene update event.\n    *\n    * @name Raycaster.Map#dynamic\n    * @type {boolean}\n    * @default false\n    * @since 0.6.0\n    */\n    this.dynamic;\n    /**\n    * If set true, map will be treated by ray as circle. Set automaticalyy on map update.\n    *\n    * @name Raycaster.Map#circle\n    * @type {boolean}\n    * @default false\n    * @since 0.9.0\n    */\n    this.circle = false;\n    /**\n    * Reference to mapped object.\n    *\n    * @name Raycaster.Map#object\n    * @type {object}\n    * @readonly\n    * @since 0.6.0\n    */\n    this.object;\n    /**\n    * Array of mapped object's vertices used as rays targets.\n    *\n    * @name Raycaster.Map#_points\n    * @type {array}\n    * @private\n    * @since 0.6.0\n    */\n    this._points = [];\n    /**\n    * Array of mapped object's segments used to test object's intersection with ray.\n    *\n    * @name Raycaster.Map#_segments\n    * @type {array}\n    * @private\n    * @since 0.6.0\n    */\n    this._segments = [];\n    /**\n    * Get array of mapped object's vertices used as rays targets.\n    *\n    * @method Raycaster.Map#getPoints\n    * @memberof Raycaster.Map\n    * @instance\n    * @since 0.6.0\n    *\n    * @param {Raycatser.Ray} [ray] - {@link Raycaster.Ray Raycaster.Ray} object used in some some types of maps.\n    *\n    * @return {Phaser.Geom.Point[]} Array of mapped object's vertices.\n    */\n    this.getPoints;\n    /**\n    * Get array of mapped object's segments used to test object's intersection with ray.\n    *\n    * @method Raycaster.Map#getSegments\n    * @memberof Raycaster.Map\n    * @instance\n    * @since 0.6.0\n    *\n    * @param {Raycatser.Ray} [ray] - {@link Raycaster.Ray Raycaster.Ray} object used in some some types of maps.\n    *\n    * @return {Phaser.Geom.Line[]} Array of mapped object's segments.\n    */\n    this.getSegments;\n    /**\n    * Get mapped object's bounding box.\n    *\n    * @method Raycaster.Map#getBoundingBox\n    * @memberof Raycaster.Map\n    * @instance\n    * @since 0.9.0\n    *\n    * @return {Phaser.Geom.Rectangle} Mapped object's bounding box.\n    */\n    this.getBoundingBox;\n    /**\n    * Update object's map of points and segments.\n    *\n    * @method Raycaster.Map#updateMap\n    * @memberof Raycaster.Map\n    * @instance\n    * @since 0.6.0\n    *\n    * @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n    */\n    this.updateMap;\n\n    this.config(options);\n    this.updateMap();\n\n    return this;\n};\n\nMap.prototype = {\n    config: require('./config.js').config\n};\n\nMap.prototype.constructor = Map;\n","/*Map methods for lines*/\n/**\n* Get array of mapped line's vertices used as rays targets.\n*\n* @method Raycaster.Map#line.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n    return this._points;\n};\n\n/**\n* Get array of mapped line's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#line.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update line's map of points and segments.\n*\n* @method Raycaster.Map#line.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    \n    //calculate offset based on object position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\n    let pointA = this.object.geom.getPointA();\n    let pointB = this.object.geom.getPointB();\n\n    //calculate positions after object's rotation\n    let rotation = this.object.rotation;\n    if(rotation !== 0) {\n        let vectorA = new Phaser.Geom.Line(this.object.x, this.object.y, pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y);\n        Phaser.Geom.Line.SetToAngle(vectorA, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorA) + rotation, Phaser.Geom.Line.Length(vectorA));\n        pointA = vectorA.getPointB();\n\n        let vectorB = new Phaser.Geom.Line(this.object.x, this.object.y, pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y);\n        Phaser.Geom.Line.SetToAngle(vectorB, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorB) + rotation, Phaser.Geom.Line.Length(vectorB));\n        pointB = vectorB.getPointB();\n\n        //set points\n        points.push(new Phaser.Geom.Point(pointA.x, pointA.y));\n        points.push(new Phaser.Geom.Point(pointB.x, pointB.y));\n        //set segment\n        segments.push(new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y));\n    }\n    //if rotation === 0\n    else {\n        //set points\n        points.push(new Phaser.Geom.Point(pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y));\n        points.push(new Phaser.Geom.Point(pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y));\n        //set segment\n        segments.push(new Phaser.Geom.Line(pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y, pointB.x + offset.x * this.object.scaleX, pointB.y * this.object.scaleY + offset.y));\n    }\n    \n\n    this._points = points;\n    this._segments = segments;\n    return this;\n};\n","/*Map methods for matter body*/\n/**\n* Get array of mapped matter body's vertices used as rays targets.\n*\n* @method Raycaster.Map#matterBody.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n\n    let body = this.object.type === 'body' || this.object.type === 'composite' ? this.object : this.object.body;\n\n    //calculate tangent rays\n    if(ray && !this.forceVerticesMapping && body.circleRadius > 0) {\n        let points = [];\n        let rayA = new Phaser.Geom.Line();\n        let rayB = new Phaser.Geom.Line();\n        let c = new Phaser.Geom.Line(ray.origin.x, ray.origin.y, body.position.x, body.position.y);\n\n        let rayLength = Math.sqrt(Math.pow(Phaser.Geom.Line.Length(c), 2) - Math.pow(body.circleRadius * body.scale.x, 2));\n\n        //ray angle\n        let angle = Phaser.Geom.Line.Angle(c);\n        let dAngle = Math.asin((body.circleRadius * body.scale.x) / Phaser.Geom.Line.Length(c));\n        Phaser.Geom.Line.SetToAngle(rayA, ray.origin.x, ray.origin.y, angle - dAngle, rayLength);\n        Phaser.Geom.Line.SetToAngle(rayB, ray.origin.x, ray.origin.y, angle + dAngle, rayLength);\n\n        //adding tangent points\n        points.push(rayA.getPointB());\n        points.push(rayB.getPointB());\n\n        return points;\n    }\n\n    return this._points;\n};\n\n/**\n* Get array of mapped matter body's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#matterBody.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update matter body's map of points and segments.\n*\n* @method Raycaster.Map#matterBody.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    let body = this.object.type === 'body' || this.object.type === 'composite' ? this.object : this.object.body;\n    let bodies = [body];\n    let generateBounds = false;\n\n    if(body.circleRadius > 0 && !this.forceVerticesMapping) {\n        this.circle = true;\n        this._points = points;\n        this._segments = segments;\n\n        return this;\n    }\n\n    this.circle = false;\n\n    if(body.type == 'composite')\n        bodies = body.bodies;\n\n    if( ( body.bounds === undefined && body.type == 'composite' ) || ( body.type == 'composite' && this.dynamic ) ) {\n        generateBounds = true;\n    }\n    \n    for(let bodyItem of bodies) {\n        //if convex body\n        if(bodyItem.parts.length === 1 || this.forceConvex) {\n            let vertices = bodyItem.parts[0].vertices;\n\n            points.push(new Phaser.Geom.Point(vertices[0].x, vertices[0].y));\n\n            for(let i = 1, length = vertices.length; i < length; i++) {\n                let pointA = new Phaser.Geom.Point(vertices[i - 1].x, vertices[i - 1].y);\n                let pointB = new Phaser.Geom.Point(vertices[i].x, vertices[i].y);\n\n                points.push(pointB);\n\n                //add segment\n                let segment = new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y);\n                segments.push(segment);\n            }\n\n            //closing segment\n            let segment = new Phaser.Geom.Line(vertices[vertices.length - 1].x, vertices[vertices.length - 1].y, vertices[0].x, vertices[0].y);\n            segments.push(segment);\n        }\n\n        //if concave body\n        else if(bodyItem.parts.length > 1) {\n            for(let i = 1, length = bodyItem.parts.length; i < length; i++) {\n                let vertices = bodyItem.parts[i].vertices;\n                let pointA = new Phaser.Geom.Point(vertices[0].x, vertices[0].y);\n\n                if(points.find(point => point.x == pointA.x && point.y == pointA.y) === undefined)\n                    points.push(pointA);\n\n                for(let j = 1, length = vertices.length; j < length; j++) {\n                    let pointB = new Phaser.Geom.Point(vertices[j].x, vertices[j].y);\n                    //check if segment was already added\n                    let segmentIndex = segments.findIndex(segment => (segment.x1 == pointA.x && segment.y1 == pointA.y && segment.x2 == pointB.x && segment.y2 == pointB.y) || (segment.x1 == pointB.x && segment.y1 == pointB.y && segment.x2 == pointA.x && segment.y2 == pointA.y));\n                    \n                    if(segmentIndex !== -1) {\n                        segments.splice(segmentIndex, 1);\n                        pointA = pointB;\n                        continue;\n                    }\n                    \n                    if(points.find(point => point.x == pointB.x && point.y == pointB.y) === undefined)\n                        points.push(pointB);\n\n                    //add segment\n                    let segment = new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y);\n                    segments.push(segment);\n                    \n                    pointA = pointB;\n                }\n                \n                //closing segment\n                let closingSegment = new Phaser.Geom.Line(vertices[vertices.length - 1].x, vertices[vertices.length - 1].y, vertices[0].x, vertices[0].y);\n\n                let segmentIndex = segments.findIndex(segment => (segment.x1 == closingSegment.x1 && segment.y1 == closingSegment.y1 && segment.x2 == closingSegment.x2 && segment.y2 == closingSegment.y2) || (segment.x1 == closingSegment.x2 && segment.y1 == closingSegment.y2 && segment.x2 == closingSegment.x1 && segment.y2 == closingSegment.y1));\n                if(segmentIndex === undefined)\n                    segments.push(closingSegment);\n            }\n        }\n    }\n\n    this._points = points;\n    this._segments = segments;\n\n    if(generateBounds) {\n        let bounds = this._raycaster.scene.matter.composite.bounds(body);\n        body.bounds = bounds;\n    }\n\n    return this;\n};\n\n/**\n* Get matter body's bounding box.\n*\n* @method Raycaster.Map#matterBody.getBoundingBox\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @return {Phaser.Geom.Rectangle} - Matter body's bounding box.\n*/\nexport function getBoundingBox() {\n    let bounds = this.object.type === 'body' || this.object.type === 'composite' ? this.object.bounds : this.object.body.bounds;\n\n    return new Phaser.Geom.Rectangle(bounds.min.x, bounds.min.y, bounds.max.x - bounds.min.x, bounds.max.y - bounds.min.y);\n}\n\n","/*Map methods for polygons*/\n/**\n* Get array of mapped polygon's vertices used as rays targets.\n*\n* @method Raycaster.Map#polygon.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n    return this._points;\n};\n\n/**\n* Get array of mapped polygon's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#polygon.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update polygon's map of points and segments.\n*\n* @method Raycaster.Map#polygon.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    \n    //calculate offset based on object position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\n    //set points\n    //calculate positions after object's rotation\n    let rotation = this.object.rotation;\n    if(rotation !== 0) {\n        for(let point of this.object.geom.points) {\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y);\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n            points.push(vector.getPointB());\n        }\n    }\n    //if rotation === 0\n    else {\n        for(let point of this.object.geom.points) {\n            points.push(new Phaser.Geom.Point(point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y));\n        }\n    }\n\n    //set segments\n    for(let i = 0, length = points.length; i < length; i++) {\n        if(i+1 < length)\n            segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));   \n    }\n    //if polygon is closed\n    if(this.object.closePath) {\n        let last = points.length - 1;\n        segments.push(new Phaser.Geom.Line(points[last].x, points[last].y, points[0].x, points[0].y));\n    }\n\n    this._points = points;\n    this._segments = segments;\n\n    return this;\n};\n","/*Map methods for rectangles*/\n/**\n* Get array of mapped rectangle's vertices used as rays targets.\n*\n* @method Raycaster.Map#rectangle.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n    return this._points;\n};\n\n/**\n* Get array of mapped rectangle's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#rectangle.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update rectangle's map of points and segments.\n*\n* @method Raycaster.Map#rectangle.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n        \n    let points = [];\n    let segments = [];\n\n    //set points\n    points = [\n        this.object.getTopLeft(),\n        this.object.getTopRight(),\n        this.object.getBottomRight(),\n        this.object.getBottomLeft()\n    ];\n\n    //set segments\n    for(let i = 0, length = points.length; i < length; i++) {\n        if(i+1 < length)\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\n        else\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\n    }\n\n    this._points = points;\n    this._segments = segments;\n\n    return this;\n};\n","/*Map methods for tilemaps*/\n/**\n* Get array of mapped tilemap's vertices used as rays targets.\n*\n* @method Raycaster.Map#tilemap.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.3\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n    if(!ray || ray && (ray.detectionRange == 0 || ray.detectionRange >= Phaser.Math.MAX_SAFE_INTEGER))\n        return this._points;\n\n    let points = [];\n    for(let point of this._points) {\n        if(Phaser.Math.Distance.Between(ray.origin.x, ray.origin.y, point.x, point.y) <= ray.detectionRange)\n            points.push(point);\n    }\n\n    //get intersections between tilemap's segments and ray's detection range edge\n    let segments = this.getSegments(ray);\n\n    for(let segment of segments) {\n        if(Phaser.Math.Distance.Between(ray.origin.x, ray.origin.y, segment.x1, segment.y1) > ray.detectionRange)\n            points.push(new Phaser.Geom.Point(segment.x1, segment.y1));\n        \n        if(Phaser.Math.Distance.Between(ray.origin.x, ray.origin.y, segment.x2, segment.y2) > ray.detectionRange)\n            points.push(new Phaser.Geom.Point(segment.x2, segment.y2));\n    }\n\n    return points;\n};\n\n/**\n* Get array of mapped tilemap's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#tilemap.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.3\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments(ray = false) {\n    if(!this.active)\n        return [];\n    if(!ray || ray && (ray.detectionRange == 0 || ray.detectionRange >= Phaser.Math.MAX_SAFE_INTEGER))\n        return this._segments;\n\n    let segments = [];\n    for(let segment of this._segments) {\n        if(Phaser.Geom.Intersects.LineToCircle(segment, ray.detectionRangeCircle)) {\n            segments.push(segment);\n        }\n    }\n\n    return segments;\n};\n\n/**\n* Update tilemap's map of points and segments.\n*\n* @method Raycaster.Map#tilemap.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.3\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    \n    //calculate offset based on object position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x;\n    offset.y = this.object.y;\n\n    let horizontal = false;\n    let horizontals = [];\n    let verticals = [];\n\n    //iterate rows\n    for(let i = 0, iLength = this.object.layer.data.length; i < iLength; i++) {\n        let row = this.object.layer.data[i];\n\n        //iterate row's tiles\n        for(let j = 0, jLength = row.length; j < jLength; j++) {\n            let tile = row[j];\n\n            //check if tile and its top and left neighbours have different are from different sets (rays blocking and non-bloking)\n            let upperEdge = ((i > 0 && this.collisionTiles.includes(this.object.layer.data[i-1][j].index) != this.collisionTiles.includes(tile.index)) || (i == 0 && this.collisionTiles.includes(tile.index))) ? true : false;\n            let leftEdge = ((j > 0 && this.collisionTiles.includes(this.object.layer.data[i][j-1].index) != this.collisionTiles.includes(tile.index)) || (j == 0 && this.collisionTiles.includes(tile.index))) ? true : false;\n\n            //get current tile's column last vertical line\n            let vertical = false;\n            if(verticals.length <= j)\n                verticals[j] = [];\n            else if(verticals[j].length > 0)\n                vertical = verticals[j][verticals[j].length - 1];\n\n            //check if tile has edge from left\n            if(leftEdge) {\n                if(vertical && vertical.y + vertical.height == i)\n                    vertical.height++;\n                else {\n                    verticals[j].push({\n                        x: tile.x,\n                        y: tile.y,\n                        height: 1\n                    });\n                }\n            }\n\n            //check if tile has edge from top\n            if(upperEdge) {\n                if(horizontal)\n                    horizontal.width++;\n                else\n                    horizontal = {\n                        x: tile.x,\n                        y: tile.y,\n                        width: 1\n                    };\n                continue;\n            }\n\n            if(horizontal) {\n                let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n                let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n                let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n                segments.push(segment);\n                horizontals.push(segment);\n                points.push(new Phaser.Geom.Point(x, y));\n                points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n                horizontal = false;\n            }\n        }\n        \n        //at the end of row add segment if exist\n        if(horizontal) {\n            let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n            let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n            let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n            segments.push(segment);\n            horizontals.push(segment);\n            points.push(new Phaser.Geom.Point(x, y));\n            points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n            horizontal = false;\n        }\n    }\n\n    //add bottom horizontal segments\n    for(let tile of this.object.layer.data[this.object.layer.data.length - 1]) {\n        if(this.collisionTiles.includes(tile.index)) {\n            if(horizontal)\n                horizontal.width++;\n            else\n                horizontal = {\n                    x: tile.x,\n                    y: tile.y + 1,\n                    width: 1\n                };\n            continue;\n        }\n\n        if(horizontal) {\n            let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n            let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n            let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n            segments.push(segment);\n            horizontals.push(segment);\n            points.push(new Phaser.Geom.Point(x, y));\n            points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n            horizontal = false;\n        }\n    }\n\n    //add segment if exist\n    if(horizontal) {\n        let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n        let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n        let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n        segments.push(segment);\n        horizontals.push(segment);\n        points.push(new Phaser.Geom.Point(x, y));\n        points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n        horizontal = false;\n    }\n    \n    //add right vertical segments\n    let vertical = false;\n    let verticalsLastColumn = [];\n    for(let row of this.object.layer.data) {\n        let tile = row[row.length - 1];\n\n        //if tile blocks ray\n        if(this.collisionTiles.includes(tile.index)) {\n            if(vertical) {\n                vertical.height++;\n            }\n            else {\n                vertical = {\n                    x: tile.x + 1,\n                    y: tile.y,\n                    height: 1\n                };\n            }\n\n            continue;\n        }\n\n        if(vertical) {\n            verticalsLastColumn.push(vertical);\n            vertical = false;\n        }\n    }\n\n    verticals.push(verticalsLastColumn);\n    \n    //add vertical segments\n    for(let column of verticals) {\n        if(!column)\n            continue;\n\n        for(let vertical of column) {\n            let x = vertical.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n            let y1 = vertical.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n            let y2 = y1 + this.object.layer.tileHeight * this.object.scaleY * vertical.height;\n            let segment = new Phaser.Geom.Line(x, y1, x, y2)\n            segments.push(segment);\n\n            //add points if they're not already there\n            if(!points.filter(point => point.x == x && point.y == y1))\n                points.push(new Phaser.Geom.Point(x, y));\n\n            if(!points.filter(point => point.x == x && point.y == y2))\n                points.push(new Phaser.Geom.Point(x, y));\n\n            //get intersections between horizontal segments and vertical\n            for(let horizontalSegment of horizontals) {\n                if(segment.x1 == horizontalSegment.x1 || segment.x1 == horizontalSegment.x2 || segment.x2 == horizontalSegment.x1 || segment.x2 == horizontalSegment.x2)\n                    continue;\n\n                if(segment.y1 == horizontalSegment.y1 || segment.y1 == horizontalSegment.y2 || segment.y2 == horizontalSegment.y1 || segment.y2 == horizontalSegment.y2)\n                    continue;\n\n                let point = new Phaser.Geom.Point();\n                if(Phaser.Geom.Intersects.LineToLine(segment, horizontalSegment, point)) {\n                    points.push(point);\n                }\n            }\n        }\n    }\n\n    this._points = points;\n    this._segments = segments;\n    return this;\n};\n\n/**\n* Set tile types which should be mapped (for Phaser.Tilemaps.StaticTilemapLayer and Phaser.Tilemaps.DynamicTilemapLayer maps only).\n*\n* @method Raycaster.Map#setCollisionTiles\n* @memberof Raycaster.Map\n* @instance\n* @since 0.7.3\n*\n* @param {array} [tiles = []] - Set of tile's indexes to map.\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function setCollisionTiles(tiles = []) {\n    this.collisionTiles = tiles;\n    return this;\n}\n","/**\n * Set segment count for cirle's map.\n * If set to 0, map won't be generating segments and relay only on tangent points calculated for currently testing ray.\n *\n * @method Raycaster.Map#setSegmentCount\n * @memberof Raycaster.Map\n * @instance\n * @since 0.6.0\n *\n * @param {integer} count - Circle map's segment count.\n *\n * @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n */\nexport function setSegmentCount(count) {\n    this.segmentCount = count;\n    this.circle = count ? false : true;\n\n    this.updateMap();\n    return this;\n}\n","/**\n * Set ray's angle (direction) in radians.\n *\n * @method Raycaster.Ray#setAngle\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {float} [angle = 0] - Ray's angle in radians.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setAngle(angle = 0) {\n    this.angle = Phaser.Math.Angle.Normalize(angle);\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    return this;\n}\n\n/**\n * Set ray's angle (direction) in degrees.\n *\n * @method Raycaster.Ray#setAngleDeg\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.1\n *\n * @param {float} [angle = 0] - Ray's angle in degrees.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setAngleDeg(angle = 0) {\n    this.angle = Phaser.Math.Angle.Normalize(Phaser.Math.DegToRad(angle));\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    return this;\n}\n","/**\n * Cast ray to find closest intersection with tested mapped objects.\n *\n * @method Raycaster.Ray#cast\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {object} [options] - options that may include:\n * @param {object[]} [options.objects = {Raycaster#mappedObjects}] - Array of game objects to test. If not provided test all mapped game objects.\n * @param {Phaser.Geom.Point} [options.target] - Ray's target point. Used in other casting methods to determine if ray was targeting mapped objects point.\n * @param {boolean} [options.internal = false] - Flag determining if method is used by other casting method.\n *\n * @return {(Phaser.Geom.Point|boolean)} Ray's closest intersection with tested objects. Returns false if no intersection has been found. Additionally contains reference to hit mapped object and segment if available.\n */\nexport function cast(options = {}) {\n    let closestIntersection;\n    let closestSegment;\n    let closestObject;\n    let closestDistance = this.rayRange;\n    let internal = options.internal ? options.internal : false;\n    let startTime = performance.now();\n    let stats = {\n        method: 'cast',\n        rays: 1,\n        testedMappedObjects: 0,\n        hitMappedObjects: 0,\n        segments: 0,\n        time: 0\n    };\n\n    //if bounding box is defined check bounding box intersection\n    if(this._raycaster && this._raycaster.boundingBox) {\n        let intersections = [];\n        Phaser.Geom.Intersects.GetLineToRectangle(this._ray, this._raycaster.boundingBox.rectangle, intersections);\n        if(intersections.length === 1)\n            closestIntersection = intersections[0];\n        else if(intersections.length > 1) {\n            for(let intersection of intersections) {\n                let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\n                if(distance < closestDistance) {\n                    closestDistance = distance;\n                    closestIntersection = intersection;\n                }\n            }\n        }\n        //if ray target is declared\n        else if(options.target){\n            let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, options.target.x, options.target.y);\n            //if target is within ray range\n            if(this.rayRange > distance) {\n                closestDistance = distance;\n                closestIntersection = options.target;\n            }\n        }\n    }\n\n    //if no objects to cast ray were passed, use raycasters mapped objects\n    if(!options.objects) {\n        if(this._raycaster)\n            options.objects = this._raycaster.mappedObjects;\n        else\n            return intersections;\n    }\n    \n    for(let object of options.objects) {\n        let map, boundingBox;\n        \n        if(object.type === 'body' || object.type === 'composite')\n            map = object.raycasterMap;\n        else\n            map = object.data.get('raycasterMap');\n\n        stats.testedMappedObjects++;\n\n        //get slightly enlarged bounding box due to fridge cases, when ray \"glanced\" border box's corner (v0.10.1)\n        if(internal) {\n            boundingBox = map._boundingBox;\n        }\n        else {\n            boundingBox = map.getBoundingBox();\n            boundingBox.setTo(boundingBox.x - 0.1, boundingBox.y - 0.1, boundingBox.width + 0.2, boundingBox.height + 0.2);\n        }\n\n        //check if object is intersected by ray\n        if(Phaser.Geom.Intersects.GetLineToRectangle(this._ray, boundingBox).length === 0)\n            continue;\n\n        stats.hitMappedObjects++;\n        stats.segments += map.getSegments(this).length;\n        \n        //check intersections\n        for(let segment of map.getSegments(this)) {\n            let intersection = [];\n\n            //if target point is segmemt point\n            if(options.target) {\n                if(\n                    Phaser.Geom.Point.Equals(options.target, segment.getPointA())\n                    || Phaser.Geom.Point.Equals(options.target, segment.getPointB())\n                ) {\n                    intersection = options.target;\n                }\n                else if(!Phaser.Geom.Intersects.LineToLine(this._ray, segment, intersection))\n                    continue;\n            }\n            //if no intersection continue\n            else if(!Phaser.Geom.Intersects.LineToLine(this._ray, segment, intersection))\n              continue;\n            \n            //get closest intersection\n            let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\n            if(distance < closestDistance) {\n                closestDistance = distance;\n                closestIntersection = intersection;\n                closestObject = map.object;\n                closestSegment = segment;\n            }\n        }\n\n        //check if map is circular\n        if(map.circle) {\n           //if circular map has generated points (besides tangent points to ray)\n            if(map._points.length > 0) {\n                continue;\n            }\n            \n            //check if target point is a circle tangent point to ray\n            if(options.target) {\n                let points = map.getPoints(this);\n                let isTangent = false;\n                for(let point of points) {\n\n                    if(Phaser.Geom.Point.Equals(options.target, point)) {\n                        //get closest intersection\n                        let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, point.x, point.y);\n\n                        if(distance < closestDistance) {\n                            closestDistance = distance;\n                            closestIntersection = point;\n                            closestObject = map.object;\n                            isTangent = true;\n                            break;\n                        }\n                    }\n                }\n\n                if(isTangent)\n                    continue;\n            }\n\n            let circleIntersections = [];\n            let offset = new Phaser.Geom.Point();\n            offset.x = map.object.x - map.object.displayWidth * (map.object.originX - 0.5);\n            offset.y = map.object.y - map.object.displayHeight * (map.object.originY - 0.5);\n\n            //calculate circle's center after rotation\n            let rotation = map.object.rotation;\n            if(rotation !== 0) {\n                let vector = new Phaser.Geom.Line(map.object.x, map.object.y, offset.x, offset.y);\n                Phaser.Geom.Line.SetToAngle(vector, map.object.x, map.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n                let cB = vector.getPointB();\n                offset.x = cB.x;\n                offset.y = cB.y;\n            }\n\n            //create transformed circle\n            let circle = new Phaser.Geom.Circle(offset.x, offset.y, map.object.radius * map.object.scaleX);\n\n            if(Phaser.Geom.Intersects.GetLineToCircle(this._ray, circle, circleIntersections)) {\n                for(let intersection of circleIntersections) {\n                    //get closest intersection\n                    let distance = Phaser.Math.Distance.Between(this._ray.x1, this._ray.y1, intersection.x, intersection.y);\n\n                    if(distance < closestDistance) {\n\n                        closestDistance = distance;\n                        closestIntersection = intersection;\n                        closestObject = map.object;\n                    }\n                }\n            }\n        }\n    }\n\n    //update stats\n    if(internal) {\n        this._stats.rays++;\n        this._stats.testedMappedObjects += stats.testedMappedObjects;\n        this._stats.hitMappedObjects += stats.hitMappedObjects;\n        this._stats.segments += stats.segments;\n    }\n    else {\n        stats.time = performance.now() - startTime;\n        this._stats = stats;\n    }\n\n    let result;\n    if(!closestIntersection) {\n        if(this.ignoreNotIntersectedRays)\n            return false;\n\n        result = this._ray.getPointB();\n    }\n    else {\n        result = new Phaser.Geom.Point(closestIntersection.x, closestIntersection.y);\n        result.segment = closestSegment;\n        result.object = closestObject;\n    }\n\n    if(this.round) {\n        result.x = Math.round(result.x);\n        result.y = Math.round(result.y);\n    }\n\n    if(!internal)\n        this.drawDebug([result]);\n    \n    return result;\n}\n","/**\n * Cast ray in all directions to find closest intersections with tested mapped objects.\n *\n * @method Raycaster.Ray#castCircle\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {object} [options] - options that may include:\n * @param {object[]} [options.objects = Raycaster.mappedObjects] - Array of game objects to test. If not provided test all mapped game objects.\n *\n * @return {Phaser.Geom.Point[]} Array of points of ray's closest intersections with tested objects. Additionally each point contains reference to hit mapped object and it's segment if available.\n */\nexport function castCircle(options = {}) {\n    let originalAngle = this.angle;\n    let intersections = [];\n    let maps = [];\n    let rayTargets = [];\n    let testedObjects = [];\n    let startTime = performance.now();\n    //reset stats\n    this._stats = {\n        method: 'castCircle',\n        rays: 0,\n        testedMappedObjects: 0,\n        hitMappedObjects: 0,\n        segments: 0,\n        time: 0\n    };\n\n    //if no objects to cast ray were passed, use raycasters mapped objects\n    if(!options.objects) {\n        if(this._raycaster)\n            options.objects = this._raycaster.mappedObjects;\n        else\n            return intersections;\n    }\n\n    //if bounding box is defined add bounding box points to \n    if(this._raycaster && this._raycaster.boundingBox) {\n        for(let point of this._raycaster.boundingBox.points) {\n            rayTargets.push({\n                point: point,\n                angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y)\n            });\n        }\n    }\n\n    for(let i=0, iLength = options.objects.length; i < iLength; i++) {\n        let object = options.objects[i];\n        //if bound in range\n        if(!this.boundsInRange(object))\n            continue;\n        \n        testedObjects.push(object);\n\n        let map, boundingBox;\n        if(object.type === 'body' || object.type === 'composite')\n            map = object.raycasterMap;\n        else\n            map = object.data.get('raycasterMap');\n\n        //get slightly enlarged bounding box due to fridge cases, when ray \"glanced\" border box's corner (v0.10.1)\n        boundingBox = map.getBoundingBox();\n        boundingBox.setTo(boundingBox.x - 0.1, boundingBox.y - 0.1, boundingBox.width + 0.2, boundingBox.height + 0.2);\n\n        map._boundingBox = boundingBox;\n\n        maps.push(map);\n        //get points and angles\n        for(let point of map.getPoints(this)) {\n            rayTargets.push({\n                point: point,\n                angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y)\n            });\n        }\n\n        //get objects intersections\n        for(let j = i+1, jLength = options.objects.length; j < jLength; j++){\n            let objectB = options.objects[j];\n            let mapB;\n            if(objectB.type === 'body' || objectB.type === 'composite')\n                mapB = objectB.raycasterMap;\n            else {\n                mapB = objectB.data.get('raycasterMap');\n            }\n            //check if bounding boxes overlap\n            if(!Phaser.Geom.Intersects.RectangleToRectangle(map.getBoundingBox(), mapB.getBoundingBox()))\n                continue;\n            \n            //find objects intersections\n            for(let segmentA of map.getSegments(this)) {\n                for(let segmentB of mapB.getSegments(this)) {\n                    let intersection = [];\n                    if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\n                        continue;\n                    \n                    rayTargets.push({\n                        point: new Phaser.Geom.Point(intersection.x, intersection.y),\n                        angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y)\n                    });\n                }\n            }\n        }\n    }\n\n    //sort target points by angle\n    rayTargets.sort(function(a, b){\n        //if rays towards points have the same angles promote closer one\n        if(a.angle == b.angle) {\n            if(Phaser.Math.Distance.Between(this.origin.x, this.origin.y, a.point.x, a.point.y) > Phaser.Math.Distance.Between(this.origin.x, this.origin.y, b.point.x, b.point.y))\n                return 1;\n            else\n                return -1;\n        }\n\n        return a.angle - b.angle;\n    }.bind(this));\n\n    let previousTarget = {\n        angle: false\n    };\n\n    //cast rays\n    for(let target of rayTargets){\n        //if current target is the same as previous one skip loop\n        if(target.angle === previousTarget.angle) {\n            continue;\n        }\n\n        previousTarget = target;\n\n        this.setAngle(target.angle);\n        let intersection = this.cast({\n            objects: testedObjects,\n            target: target.point,\n            internal: true\n        });\n\n        if(intersection){\n            //if intersection hits target point cast two additional rays\n            let castSides = false;\n            if(this.round) {\n                let roundedTarget = new Phaser.Geom.Point(Math.round(target.point.x), Math.round(target.point.y));\n                castSides = Phaser.Geom.Point.Equals(roundedTarget, intersection)\n            }\n            else {\n                castSides = Phaser.Geom.Point.Equals(target.point, intersection);\n            }\n            \n            if(castSides) {\n                this.setAngle(target.angle - 0.0001);\n                let intersectionA = this.cast({\n                    objects: testedObjects,\n                    internal: true\n                });\n\n                if(intersectionA) {\n                    intersections.push(intersectionA);\n                }\n\n                intersections.push(intersection);\n\n                this.setAngle(target.angle + 0.0001);\n                let intersectionB = this.cast({\n                    objects: testedObjects,\n                    internal: true\n                });\n\n                if(intersectionB) {\n                    intersections.push(intersectionB);\n                }\n\n                continue;\n            }\n\n            intersections.push(intersection);\n        }\n    }\n\n    this.setAngle(originalAngle);\n    this.intersections = intersections;\n\n    if(this.autoSlice)\n        this.slicedIntersections = this.slice();\n\n    this._stats.time = performance.now() - startTime;\n\n    this.drawDebug(intersections);\n\n    return intersections;\n}\n","/**\n * Cast ray in a cone to find closest intersections with tested mapped objects.\n *\n * @method Raycaster.Ray#castCone\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.7.0\n *\n * @param {object} [options] - options that may include:\n * @param {object[]} [options.objects = Raycaster.mappedObjects] - Array of game objects to test. If not provided test all mapped game objects.\n *\n * @return {Phaser.Geom.Point[]} Array of points of ray's closest intersections with tested objects. Additionally each point contains reference to hit mapped object and it's segment if available.\n */\nexport function castCone(options = {}) {\n    let originalAngle = this.angle;\n    let intersections = [];\n    let maps = [];\n    let rayTargets = [];\n    let testedObjects = [];\n    let cone = this.cone;\n    let minAngle = 0;\n    let maxAngle = 0;\n    let angleOffset = 0;\n    let startTime = performance.now();\n    //reset stats\n    this._stats = {\n        method: 'castCircle',\n        rays: 0,\n        testedMappedObjects: 0,\n        hitMappedObjects: 0,\n        segments: 0,\n        time: 0\n    };\n\n    //set cone\n    if(options.cone !== undefined)\n        cone = options.cone;\n    if(options.coneDeg !== undefined)\n        cone = Phaser.Math.DegToRad(options.coneDeg);\n\n    //set cone min and max angle\n    minAngle = this.angle - cone / 2;\n    maxAngle = this.angle + cone / 2;\n\n    //add min and max angle points\n    this.setAngle(minAngle);\n    rayTargets.push({\n        point: this._ray.getPointB(),\n        angle: minAngle,\n        angleOffsetDeg: Phaser.Math.RadToDeg(-cone / 2)\n    });\n\n    this.setAngle(maxAngle);\n    rayTargets.push({\n        point: this._ray.getPointB(),\n        angle: maxAngle,\n        angleOffsetDeg: Phaser.Math.RadToDeg(cone / 2)\n    });\n\n    //if no objects to cast ray were passed, use raycasters mapped objects\n    if(!options.objects) {\n        if(this._raycaster)\n            options.objects = this._raycaster.mappedObjects;\n        else\n            return intersections;\n    }\n\n    //if bounding box is defined add bounding box points to \n    if(this._raycaster && this._raycaster.boundingBox) {\n        for(let point of this._raycaster.boundingBox.points) {\n\n            let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y);\n            let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\n\n            if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\n                rayTargets.push({\n                    point: point,\n                    angle: angle,\n                    angleOffsetDeg: -angleOffsetDeg\n                });\n            }\n        }\n    }\n\n    for(let i=0, iLength = options.objects.length; i < iLength; i++) {\n        let object = options.objects[i];\n        //if bound in range\n        if(!this.boundsInRange(object))\n            continue;\n        \n        testedObjects.push(object);\n\n        let map, boundingBox;\n        if(object.type === 'body' || object.type === 'composite')\n            map = object.raycasterMap;\n        else\n            map = object.data.get('raycasterMap');\n\n        //get slightly enlarged bounding box due to fridge cases, when ray \"glanced\" border box's corner (v0.10.1)\n        boundingBox = map.getBoundingBox();\n        boundingBox.setTo(boundingBox.x - 0.1, boundingBox.y - 0.1, boundingBox.width + 0.2, boundingBox.height + 0.2);\n\n        map._boundingBox = boundingBox;\n\n        maps.push(map);\n        //get points and angles\n        for(let point of map.getPoints(this)) {\n\n            let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y);\n            let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\n\n            if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\n                rayTargets.push({\n                    point: point,\n                    angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y),\n                    angleOffsetDeg: -angleOffsetDeg\n                });\n            }\n        }\n\n        //get objects intersections\n        for(let j = i+1, jLength = options.objects.length; j < jLength; j++){\n            let objectB = options.objects[j];\n            let mapB;\n            if(objectB.type === 'body' || objectB.type === 'composite')\n                mapB = objectB.raycasterMap;\n            else\n                mapB = objectB.data.get('raycasterMap');\n            //check if bounding boxes overlap\n            if(!Phaser.Geom.Intersects.RectangleToRectangle(map.getBoundingBox(), mapB.getBoundingBox()))\n                continue;\n            \n            //find objects intersections\n            for(let segmentA of map.getSegments(this)) {\n                for(let segmentB of mapB.getSegments(this)) {\n                    let intersection = [];\n                    if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\n                        continue;\n                    let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\n                    let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\n\n                    if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\n                        rayTargets.push({\n                            point: new Phaser.Geom.Point(intersection.x, intersection.y),\n                            angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y),\n                            angleOffsetDeg: -angleOffsetDeg\n                        });\n                    }\n                }\n            }\n        }\n    }\n\n    //sort target points by angle\n    rayTargets.sort(function(a, b){\n        //if rays towards points have the same angles promote closer one\n        if(a.angle == b.angle) {\n            if(Phaser.Math.Distance.Between(this.origin.x, this.origin.y, a.point.x, a.point.y) > Phaser.Math.Distance.Between(this.origin.x, this.origin.y, b.point.x, b.point.y))\n                return 1;\n            else\n                return -1;\n        }\n\n        return a.angleOffsetDeg - b.angleOffsetDeg;\n    }.bind(this));\n\n    let previousTarget = {\n        angle: false\n    };\n\n    //cast rays\n    for(let target of rayTargets){\n        //if current target is the same as previous one skip loop\n        if(target.angle === previousTarget.angle) {\n            continue;\n        }\n\n        previousTarget = target;\n        \n        this.setAngle(target.angle);\n        let intersection = this.cast({\n            objects: testedObjects,\n            target: target.point,\n            internal: true\n        });\n        if(intersection){\n            //if intersection hits target point cast two additional rays\n            let castSides = false;\n            if(this.round) {\n                let roundedTarget = new Phaser.Geom.Point(Math.round(target.point.x), Math.round(target.point.y));\n                castSides = Phaser.Geom.Point.Equals(roundedTarget, intersection)\n            }\n            else {\n                castSides = Phaser.Geom.Point.Equals(target.point, intersection);\n            }\n            if(castSides) {\n                this.setAngle(target.angle - 0.0001);\n                let intersectionA = this.cast({\n                    objects: testedObjects,\n                    internal: true\n                });\n\n                if(intersectionA) {\n                    intersections.push(intersectionA);\n                }\n\n                intersections.push(intersection);\n\n                this.setAngle(target.angle + 0.0001);\n                let intersectionB = this.cast({\n                    objects: testedObjects,\n                    internal: true\n                });\n\n                if(intersectionB) {\n                    intersections.push(intersectionB);\n                }\n\n                continue;\n            }\n\n            intersections.push(intersection);\n        }\n    }\n\n    this.setAngle(originalAngle);\n    this.intersections = intersections;\n    if(this.autoSlice)\n        this.slicedIntersections = this.slice(intersections, false);\n    \n    this._stats.time = performance.now() - startTime;\n\n    this.drawDebug(intersections);\n\n    return intersections;\n}\n","/**\n * Set ray's cone angle (width) in radians.\n *\n * @method Raycaster.Ray#setCone\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.7.0\n *\n * @param {float} [cone = 0] - Ray's cone angle in radians.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setCone(cone = 0) {\n    this.cone = cone;\n    return this;\n}\n\n/**\n * Set ray's cone angle (width) in degrees.\n *\n * @method Raycaster.Ray#setConeDeg\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.7.0\n *\n * @param {float} [cone = 0] - Ray's cone angle in degrees.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setConeDeg(cone = 0) {\n    this.cone = Phaser.Math.DegToRad(cone);\n    return this;\n}\n","/**\n * Configure ray.\n *\n * @method Raycaster.Ray#config\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {object} [options] - Ray's congfiguration options. May include:\n * @param {Phaser.Geom.Point} [options.origin = {x:0, y:0}] - Ray's position.\n * @param {float} [options.angle = 0] - Ray's angle in radians.\n * @param {float} [options.angleDeg = 0] - Ray's angle in degrees.\n * @param {float} [options.cone = 0] - Ray's cone angle in radians.\n * @param {float} [options.coneDeg = 0] - Ray's cone angle in degrees.\n * @param {integer} [options.range = Phaser.Math.MAX_SAFE_INTEGER] - Ray's range.\n * @param {integer} [options.collisionRange = Phaser.Math.MAX_SAFE_INTEGER] - Ray's maximum collision range of ray's field of view.\n * @param {integer} [options.detectionRange = Phaser.Math.MAX_SAFE_INTEGER] - Maximum distance between ray's position and tested objects bounding boxes.\n * @param {boolean} [options.ignoreNotIntersectedRays = true] - If set true, ray returns false when it didn't hit anything. Otherwise returns ray's target position.\n * @param {boolean} [options.autoSlice = false] - If set true, ray will automatically slice intersections into array of triangles and store it in {@link Raycaster.Ray#slicedIntersections Ray.slicedIntersections}.\n * @param {boolean} [options.round = false] - If set true, point where ray hit will be rounded.\n * @param {(boolean|'arcade'|'matter')} [options.enablePhysics = false] - Add to ray physics body. Body will be a circle with radius equal to {@link Raycaster.Ray#collisionRange Ray.collisionRange}. If set true, arcade physics body will be added.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function config(options) {\n    this.object = options.object;\n    //origin\n    if(options.origin !== undefined)\n        this.origin.setTo(options.origin.x, options.origin.y);\n\n    //angle\n    if(options.angle !== undefined)\n        this.angle = Phaser.Math.Angle.Normalize(options.angle);\n\n    //angle deg\n    if(options.angleDeg !== undefined)\n        this.angle = Phaser.Math.Angle.Normalize(Phaser.Math.DegToRad(options.angleDeg));\n\n    //cone angle\n    if(options.cone !== undefined)\n        this.cone = options.cone;\n\n    //cone angle deg\n    if(options.coneDeg !== undefined)\n        this.cone = Phaser.Math.DegToRad(options.coneDeg);\n\n    //ray range (0 = max)\n    if(options.rayRange !== undefined)\n        this.rayRange = options.rayRange;\n\n    //collision range (0 = max)\n    if(options.collisionRange !== undefined)\n        this.collisionRange = options.collisionRange;\n\n    //detection range (0 = max)\n    if(options.detectionRange !== undefined)\n        this.detectionRange = options.detectionRange;\n\n    //ignore not intersected rays\n    if(options.ignoreNotIntersectedRays !== undefined)\n        this.ignoreNotIntersectedRays = (options.ignoreNotIntersectedRays == true)\n    \n    //round\n    if(options.round !== undefined)\n        this.round = (options.round == true)\n\n    //auto slice\n    if(options.autoSlice !== undefined)\n        this.autoSlice = (options.autoSlice == true)\n\n    //enable physics\n    if(options.enablePhysics !== undefined && options.enablePhysics)\n        this.enablePhysics(options.enablePhysics);\n    \n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\n\n    if(this._raycaster.debugOptions.enabled && this._raycaster.scene !== undefined) {\n        this.graphics =  this._raycaster.scene.add.graphics({ lineStyle: { width: 1, color: 0x00ff00}, fillStyle: { color: 0xff00ff } });\n        this.graphics.setDepth(1000);\n    }\n\n    return this;\n}\n","/**\r\n * Draw rays in debug mode\r\n *\r\n * @method Raycaster.Ray#drawDebug\r\n * @memberof Raycaster\r\n * @private\r\n * @since 0.10\r\n * \r\n * @param {Phaser.Geom.Point[]} Array of points of ray's closest intersections with tested objects.\r\n * \r\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\r\n */\r\nexport function drawDebug(intersections) {\r\n    if(this.graphics === undefined || !this._raycaster.debugOptions.enabled)\r\n        return this;\r\n\r\n    //clear\r\n    this.graphics.clear();\r\n\r\n    if(!this._raycaster.debugOptions.rays)\r\n        return this;\r\n    \r\n    if(this._raycaster.debugOptions.graphics.ray) {\r\n        this.graphics.lineStyle(1, this._raycaster.debugOptions.graphics.ray);\r\n\r\n        for(let intersection of intersections) {\r\n            this.graphics.strokeLineShape({\r\n                x1: this.origin.x,\r\n                y1: this.origin.y,\r\n                x2: intersection.x,\r\n                y2: intersection.y\r\n            });\r\n        }\r\n    }\r\n\r\n    if(this._raycaster.debugOptions.graphics.rayPoint) {\r\n        this.graphics.fillStyle(this._raycaster.debugOptions.graphics.rayPoint);\r\n\r\n        this.graphics.fillPoint(this.origin.x, this.origin.y, 3);\r\n        \r\n        for(let intersection of intersections) {\r\n            this.graphics.fillPoint(intersection.x, intersection.y, 3);\r\n        }\r\n    }\r\n\r\n    return this;\r\n}","/**\n * Add to ray physics body. Body will be a circle with radius equal to {@link Raycaster.Ray#collisionRange Ray.collisionRange}. Physics body can be added only once.\n *\n * @method Raycaster.Ray#enablePhysics\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {'arcade'|'matter'} [type = 'arcade'] - Physics type\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function enablePhysics(type = 'arcade') {\n    \n    if(this.body !== undefined)\n        return this;\n\n    this.collisionCircle = this._raycaster.scene.add.circle(this.origin.x, this.origin.y, this.collisionRange);\n    this.collisionCircle._ray = this;\n\n    if(type === 'matter') {\n        this.bodyType = 'matter';\n\n        if(this.collisionRange == Phaser.Math.MAX_SAFE_INTEGER) {\n            let bounds = this._raycaster.boundingBox;\n            this._raycaster.scene.matter.add.gameObject(this.collisionCircle, { shape: { type: 'rectangle', x:bounds.rectangle.centerX, y:bounds.rectangle.centerY, width:bounds.rectangle.width, height:bounds.rectangle.height }, label: 'phaser-raycaster-ray-body', isSensor: true, ignoreGravity:true });\n        }\n        else {\n            this._raycaster.scene.matter.add.gameObject(this.collisionCircle, { shape: { type: 'circle' }, label: 'phaser-raycaster-ray-body', isSensor: true, ignoreGravity:true });\n        }\n\n        this.body = this.collisionCircle.body;\n        this.body._ray = this;\n        this.setOnCollideActive();\n    }\n    else {\n        this.bodyType = 'arcade';\n        this._raycaster.scene.physics.add.existing(this.collisionCircle);\n\n        this.body = this.collisionCircle.body;\n        this.body\n            .setCircle(this.collisionRange)\n            .setAllowGravity(false)\n            .setImmovable(true);\n        this.body._ray = this;\n    }\n\n    return this;\n}\n","/*Matter physics methods for ray body*/\n/**\n * Sets the collision category of this ray's Matter Body. This number must be a power of two between 2^0 (= 1) and 2^31.\n * Two bodies with different collision groups (see {@link #setCollisionGroup}) will only collide if their collision\n * categories are included in their collision masks (see {@link #setCollidesWith}).\n *\n * @method Raycaster.Ray#setCollisionCategory\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {number} value - Unique category bitfield.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setCollisionCategory(value) {\n    this.body.collisionFilter.category = value;\n\n    return this;\n};\n\n/**\n * Sets the collision group of this ray's Matter Body. If this is zero or two Matter Bodies have different values,\n * they will collide according to the usual rules (see {@link #setCollisionCategory} and {@link #setCollisionGroup}).\n * If two Matter Bodies have the same positive value, they will always collide; if they have the same negative value,\n * they will never collide.\n *\n * @method Raycaster.Ray#setCollisionCategory\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {number} value - Unique group index.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setCollisionGroup(value) {\n    this.body.collisionFilter.group = value;\n\n    return this;\n};\n\n/**\n * Sets the collision mask for this ray's Matter Body. Two Matter Bodies with different collision groups will only\n * collide if each one includes the other's category in its mask based on a bitwise AND, i.e. `(categoryA & maskB) !== 0`\n * and `(categoryB & maskA) !== 0` are both true.*\n *\n * @method Raycaster.Ray#setCollidesWith\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {(number|number[])} categories - A unique category bitfield, or an array of them.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\n\nexport function setCollidesWith(categories) {\n    var flags = 0;\n\n    if (!Array.isArray(categories))\n    {\n        flags = categories;\n    }\n    else\n    {\n        for (var i = 0; i < categories.length; i++)\n        {\n            flags |= categories[i];\n        }\n    }\n\n    this.body.collisionFilter.mask = flags;\n\n    return this;\n};\n\n/**\n * The callback is sent a `Phaser.Types.Physics.Matter.MatterCollisionData` object.\n * \n * This does not change the bodies collision category, group or filter. Those must be set in addition\n * to the callback.\n *\n * @method Raycaster.Ray#setOnCollide\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {function} callback - The callback to invoke when this body starts colliding with another.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setOnCollide(callback) {\n    let self = this;\n    this.body.onCollideCallback = function(collisionInfo) {\n        if(collisionInfo.rayCollided) {\n            callback(collisionInfo);\n        }\n        else if(self.processOverlap(collisionInfo)) {\n            collisionInfo.rayCollided = true;\n            callback(collisionInfo);\n        }\n    };\n\n    return this;\n};\n\n/**\n * The callback is sent a `Phaser.Types.Physics.Matter.MatterCollisionData` object.\n * \n * This does not change the bodies collision category, group or filter. Those must be set in addition\n * to the callback.\n *\n * @method Raycaster.Ray#setOnCollideEnd\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {function} callback - The callback to invoke when this body stops colliding with another.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setOnCollideEnd(callback) {\n    this.body.onCollideEndCallback = function(collisionInfo) {\n        if(collisionInfo.rayCollided) {\n            collisionInfo.rayCollided = false;\n            callback(collisionInfo);\n        }\n    }\n\n    return this;\n};\n\n/**\n * The callback is sent a `Phaser.Types.Physics.Matter.MatterCollisionData` object.\n * \n * This does not change the bodies collision category, group or filter. Those must be set in addition\n * to the callback.\n *\n * @method Raycaster.Ray#setOnCollideActive\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {function} callback - The callback to invoke for the duration of this body colliding with another.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setOnCollideActive(callback) {\n    let self = this;\n    let func = function(collisionInfo) {\n        if(self.processOverlap(collisionInfo)) {\n            let body = collisionInfo.bodyA.label === 'phaser-raycaster-ray-body' ? collisionInfo.bodyB : collisionInfo.bodyA;\n\n            if(collisionInfo.rayCollided !== true) {\n                collisionInfo.rayCollided = true;\n                if(self.body.onCollideCallback) {\n                    self.body.onCollideCallback(collisionInfo);\n                }\n\n                if(self.body.onCollideWith !== undefined && self.body.onCollideWith[body.id]) {\n                    self.body.onCollideWith[body.id](body, collisionInfo);\n                }\n            }\n            if(callback)\n                callback(collisionInfo);\n        }\n        else {\n            if(self.body.onCollideEndCallback && collisionInfo.rayCollided === true) {\n                self.body.onCollideEndCallback(collisionInfo);\n            }\n        }\n    }\n\n    this.body.onCollideActiveCallback = func;\n\n    return this;\n}\n\n/**\n * The callback is sent a reference to the other body, along with a `Phaser.Types.Physics.Matter.MatterCollisionData` object.\n * \n * This does not change the bodies collision category, group or filter. Those must be set in addition\n * to the callback.\n *\n * @method Raycaster.Ray#setOnCollideWith\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {(MatterJS.Body|MatterJS.Body[])} body - The body, or an array of bodies, to test for collisions with.\n * @param {function} callback - The callback to invoke when this body collides with the given body or bodies.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setOnCollideWith(body, callback) {\n    let self = this;\n    let func = function(body, collisionInfo) {\n        if(collisionInfo.rayCollided) {\n            callback(body, collisionInfo);\n        }\n        else if(self.processOverlap(collisionInfo)) {\n            collisionInfo.rayCollided = true;\n            callback(body, collisionInfo);\n        }\n    }\n\n    if (!Array.isArray(body))\n    {\n        body = [ body ];\n    }\n\n    for (var i = 0; i < body.length; i++)\n    {\n        var src = (body[i].hasOwnProperty('body')) ? body[i].body : body[i];\n\n        this.body.setOnCollideWith(src, func);\n    }\n\n    return this;\n};\n","/**\n * Set ray's source position.\n *\n * @method Raycaster.Ray#setOrigin\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {integer} x - X coordinate.\n * @param {integer} y - Y coordinate.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setOrigin(x, y) {\n    this.origin.setTo(x, y);\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\n\n    if(this.bodyType === 'matter' && this.collisionRange !== Phaser.Math.MAX_SAFE_INTEGER) {\n        this.collisionCircle.x = x;\n        this.collisionCircle.y = y;\n    }\n    else if(this.bodyType === 'arcade') {\n        this.collisionCircle.x = x;\n        this.collisionCircle.y = y;\n    }\n\n    return this;\n}\n","/**\n * Get game objects overlaping field of view.\n *\n * @method Raycaster.Ray#overlap\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {object|object[]} [objects] - Game object / array off game objects to test.\n *\n * @return {object[]} Array of game objects that overlaps with field of view.\n */\nexport function overlap(objects) {\n    let targets = [];\n    let overlapCircle = new Phaser.Geom.Circle(this.origin.x, this.origin.y, this.collisionRange);\n\n    //matter physics\n    if(this.bodyType === 'matter') {\n        let isCollisionInfo = false;\n        if(objects === undefined) {\n            objects = this._raycaster.scene.matter.query.collides(this.body, this._raycaster.scene.matter.getMatterBodies());\n\n            for(let object of objects) {   \n                let body = object.bodyA === this.body ? object.bodyB : object.bodyA;\n\n                if(this.testMatterOverlap(body))\n                    targets.push(body);\n            }\n        }\n        //get object's body\n        else {\n            if(!Array.isArray(objects))\n                objects = [objects];\n            \n            for(let object of objects) {\n                if(object === this.body)\n                    continue;\n    \n                if(this.testMatterOverlap(object))\n                    targets.push(object);\n            }\n        }\n    }\n    //arcade physics\n    else {\n        let bodies = false;\n        //get bodies in range\n        if(objects === undefined) {\n            objects = this._raycaster.scene.physics.overlapCirc(this.origin.x, this.origin.y, this.collisionRange, true, true);\n            bodies = true;\n        }\n        //get object's body\n        else if(!Array.isArray(objects)) {\n            objects = [objects];\n        }\n        //if objects are bodies\n        if(bodies) {\n            for(let body of objects) {\n                if(body === this.body)\n                    continue;\n            \n                let hitbox;\n                //get physics body hitbox\n                if(body.isCircle) {\n                    hitbox = new Phaser.Geom.Circle(body.position.x + body.halfWidth, body.position.y + body.halfWidth, body.halfWidth);\n                }\n                else {\n                    hitbox = new Phaser.Geom.Rectangle(body.x, body.y, body.width, body.height);\n                }\n\n                if(this.testOverlap(hitbox))\n                    targets.push(body.gameObject);\n            }\n        }\n        //if objects are game objects\n        else {\n            for(let object of objects) {\n                if(object.body === undefined)\n                    continue;\n\n                let hitbox;\n                //get physics body hitbox\n                if(object.body.isCircle) {\n                    hitbox = new Phaser.Geom.Circle(object.body.position.x + object.body.halfWidth, object.body.position.y + object.body.halfWidth, object.body.halfWidth);\n                    if(!Phaser.Geom.Intersects.CircleToCircle(overlapCircle, hitbox))\n                        continue;\n                }\n                else {\n                    hitbox = new Phaser.Geom.Rectangle(object.body.x, object.body.y, object.body.width, object.body.height);\n                    if(!Phaser.Geom.Intersects.CircleToRectangle(overlapCircle, hitbox))\n                        continue;\n                }\n\n                if(this.testArcadeOverlap(hitbox))\n                    targets.push(object);\n            }\n        }\n    }\n\n    return targets;\n}\n\n/**\n * Process callback for physics collider / overlap.\n *\n * @method Raycaster.Ray#processOverlap\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {object} object1 - Game object or matter body passed by collider / overlap or matter CollisionInfo object.\n * @param {object} object2 - Game object or matter body passed by collider / overlap. Ignored if matter CollisionInfo object was passed as first argument.\n *\n * @return {boolean} Return true if game object is overlapping ray's field of view.\n */\nexport function processOverlap(object1, object2) {\n    let obj1, obj2, target;\n    //check if it's matter collisionInfo object\n    if(object1.bodyA !== undefined && object1.bodyB !== undefined) {\n        obj1 = object1.bodyA;\n        obj2 = object1.bodyB;\n    }\n    else {\n        obj1 = object1;\n        obj2 = object2;\n    }\n\n    if(obj1._ray !== undefined && obj1._ray === this)\n        target = obj2;\n    else if(obj2._ray !== undefined && obj2._ray === this)\n        target = obj1;\n    else\n        return false;\n\n    return (this.overlap(target).length > 0);\n}   \n\n/**\n * Test if hitbox overlaps with field of view. Method used in {@link Raycaster.Ray#overlap Ray.overlap}.\n *\n * @method Raycaster.Ray#testArcadeOverlap\n * @memberof Raycaster.Ray\n * @instance\n * @private\n * @since 0.8.0\n *\n * @param {object} hitbox - Game object's hitbox generated inside {@link Raycaster.Ray#overlap Ray.overlap}.\n *\n * @return {boolean} True if hitbox overlaps with {@link Raycaster.Ray Raycaster.Ray} field of view.\n */\nexport function testArcadeOverlap(hitbox) {\n    let overlap = false;\n\n    //iterate through field of view slices to check collisions with target\n    for(let slice of this.slicedIntersections) {\n        //if hitbox is a circle\n        if(hitbox.type == 0) {\n            overlap = Phaser.Geom.Intersects.TriangleToCircle(slice, hitbox);\n        }\n        //if hitbox is a rectangle\n        else {\n            overlap = Phaser.Geom.Intersects.RectangleToTriangle(hitbox, slice);\n        }\n\n        if(overlap) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * Test if matter body overlaps with field of view. Method used in {@link Raycaster.Ray#overlap Ray.overlap}.\n *\n * @method Raycaster.Ray#testMatterOverlap\n * @memberof Raycaster.Ray\n * @instance\n * @private\n * @since 0.9.0\n *\n * @param {object} body - Matter body.\n *\n * @return {boolean} True if body overlaps with {@link Raycaster.Ray Raycaster.Ray} field of view.\n */\nexport function testMatterOverlap(object) {\n    let body;\n\n    if(object.type === 'body')\n        body = object;\n    else if(object.body !== undefined)\n        body = object.body;\n    else\n        return false;\n\n    //if body is concave, ignore convex body\n    let parts = body.parts.length > 1 ? body.parts.splice(1) : body.parts;\n    //iterate through bodies\n    for(let part of parts) {\n        let pointA = part.vertices[0];\n\n        for(let i = 1, length = part.vertices.length; i < length; i++) {\n            let pointB = part.vertices[i];\n            let segment = new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y);\n\n            //iterate through field of view slices to check collisions with target\n            for(let slice of this.slicedIntersections) {\n                let overlap = Phaser.Geom.Intersects.TriangleToLine(slice, segment);\n                //additional checking if slice contain segment's points due to TriangleToLine bug.\n                if(!overlap)\n                    overlap = Phaser.Geom.Triangle.ContainsPoint(slice, segment.getPointA());\n                if(!overlap)\n                    overlap = Phaser.Geom.Triangle.ContainsPoint(slice, segment.getPointB());\n\n                if(overlap) {\n                    return true;\n                }\n            }\n            pointA = pointB;\n        }\n\n        //closing segment\n        let segment = new Phaser.Geom.Line(part.vertices[part.vertices.length - 1].x, part.vertices[part.vertices.length - 1].y, part.vertices[0].x, part.vertices[0].y);\n         //iterate through field of view slices to check collisions with target\n        for(let slice of this.slicedIntersections) {\n            let overlap = Phaser.Geom.Intersects.TriangleToLine(slice, segment);\n\n            if(overlap) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n","/**\n * Set ray's range.\n *\n * @method Raycaster.Ray#setRayRange\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {integer} [rayRange = Phaser.Math.MAX_SAFE_INTEGER] - Ray's range.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setRayRange(rayRange = Phaser.Math.MAX_SAFE_INTEGER) {\n    this.rayRange = rayRange;\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    return this;\n}\n\n/**\n * Set ray's maximum detection range. Objects outside detection range won't be tested.\n * Ray tests all objects when set to 0.\n *\n * @method Raycaster.Ray#setDetectionRange\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {integer} [detectionRange = 0] - Maximum distance between ray's position and tested objects bounding boxes.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setDetectionRange(detectionRange = 0) {\n    this.detectionRange = detectionRange;\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\n\n    return this;\n}\n\n/**\n * Set ray's field of view maximum collision range. Objects outside collision range won't be tested by {@link Raycaster.Ray#overlap Raycaster.Ray.overlap} method.\n * Determines ray's physics body radius.\n *\n * @method Raycaster.Ray#setCollisionRange\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {integer} [collisionRange = Phaser.Math.MAX_SAFE_INTEGER] - Ray's collision range and physics body radius.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setCollisionRange(collisionRange = Phaser.Math.MAX_SAFE_INTEGER) {\n    let oldRangeMax = this.collisionRange == Phaser.Math.MAX_SAFE_INTEGER;\n    this.collisionRange = collisionRange;\n    this.collisionCircle.setRadius(this.collisionRange);\n\n    if(this.bodyType === 'matter') {\n        if(this.collisionRange == Phaser.Math.MAX_SAFE_INTEGER) {\n            let bounds = this._raycaster.boundingBox;\n\n            this._raycaster.scene.matter.body.set(this.body, {\n                shape: {\n                    type: 'rectangle',\n                    x: bounds.rectangle.centerX,\n                    y: bounds.rectangle.centerY,\n                    width: bounds.rectangle.width,\n                    height: bounds.rectangle.height,\n                    circleRadius:0\n                }\n            });\n        }\n        else if(oldRangeMax) {\n            this._raycaster.scene.matter.body.set(this.body, {\n                shape: {\n                    type: 'circle',\n                    x: this.collisionCircle.x,\n                    y: this.collisionCircle.y\n                },\n                circleRadius: this.collisionRange,\n                isStatic: false\n            });\n        }\n        else {\n            this.collisionCircle.setRadius(this.collisionRange);\n        }\n        this._raycaster.scene.matter.body.set(this.body, 'circleRadius', this.collisionRange)\n    }\n    else if(this.bodyType === 'arcade') {\n        this.body.setCircle(this.collisionRange);\n    }\n\n    return this;\n}\n\n/**\n * Test if object's bounding box is in ray's detection range.\n *\n * @method Raycaster.Ray#boundsInRange\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {object} object - Tested object\n * @param {(Phaser.Geom.Rectangle|boolean)} [bounds = false] - Tested object's bounds. If not passed bounds will be generated automatically.\n *\n * @return {boolean} Information if object is in ray's detection range.\n */\nexport function boundsInRange(object, bounds = false) {\n    if(!this.detectionRange)\n        return true;\n\n    let objectBounds;\n    if(bounds)\n        objectBounds = bounds;\n    else {\n        if(object.type === 'body' || object.type === 'composite')\n            objectBounds = object.raycasterMap.getBoundingBox();\n        else\n            objectBounds = object.data.get('raycasterMap').getBoundingBox();\n    }\n\n    if(Phaser.Geom.Intersects.CircleToRectangle(this.detectionRangeCircle, objectBounds))\n        return true;\n\n    return false;\n}\n","/**\n * @classdesc\n *\n * Ray class responsible for casting ray's and testing their collisions with mapped objects.\n *\n * @namespace Raycaster.Ray\n * @class Raycaster.Ray\n * @constructor\n * @since 6.0.0\n *\n * @param {object} options - Ray specific configuration settings.\n * @param {Raycaster} [raycaster] - Parent raycaster object.\n */\nexport function Ray(options, raycaster) {\n    /**\n    * Reference to parent Raycaster object.\n    *\n    * @name Raycaster.Ray#_raycaster\n    * @type {Raycaster}\n    * @private\n    * @since 0.6.0\n    */\n    this._raycaster = raycaster ? raycaster : false;\n    /**\n    * Ray's source position.\n    *\n    * @name Raycaster.Ray#origin\n    * @type {Phaser.Geom.Point}\n    * @since 0.6.0\n    */\n    this.origin = new Phaser.Geom.Point();\n    /**\n    * Ray's representation used to calculating intersections.\n    *\n    * @name Raycaster.Ray#_ray\n    * @type {Phaser.Geom.Line}\n    * @private\n    * @since 0.6.0\n    */\n    this._ray = new Phaser.Geom.Line();\n    /**\n    * Ray's angle in radians.\n    *\n    * @name Raycaster.Ray#angle\n    * @type {float}\n    * @default 0\n    * @since 0.6.0\n    */\n    this.angle = 0;\n    /**\n    * Ray's cone width angle in radians.\n    *\n    * @name Raycaster.Ray#cone\n    * @type {float}\n    * @default 0\n    * @since 0.7.0\n    */\n    this.cone = 0;\n    /**\n    * Ray's maximum range\n    *\n    * @name Raycaster.Ray#rayRange\n    * @type {integer}\n    * @default Phaser.Math.MAX_SAFE_INTEGER\n    * @since 0.6.0\n    */\n    this.rayRange = Phaser.Math.MAX_SAFE_INTEGER;\n    /**\n    * Ray's maximum detection range. Objects outside detection range won't be tested.\n    * Ray tests all objects when set to 0.\n    *\n    * @name Raycaster.Ray#detectionRange\n    * @type {integer}\n    * @default\n    * @since 0.6.0\n    */\n    this.detectionRange = 0;\n    /**\n    * Ray's representation of detection range used in calculating if objects are in range.\n    *\n    * @name Raycaster.Ray#detectionRangeCircle\n    * @type {Phaser.Geom.Circle}\n    * @private\n    * @since 0.6.0\n    */\n    this.detectionRangeCircle = new Phaser.Geom.Circle();\n    /**\n    * Ray's maximum collision range of ray's field of view. Radius of {@link Raycaster.Ray#collisionRangeCircle Ray.body}.\n    *\n    * @name Raycaster.Ray#collisionRange\n    * @type {integer}\n    * @default Phaser.Math.MAX_SAFE_INTEGER\n    * @since 0.8.0\n    */\n    this.collisionRange = Phaser.Math.MAX_SAFE_INTEGER;\n    /**\n    * If set true, ray returns false when it didn't hit anything. Otherwise returns ray's target position.\n    *\n    * @name Raycaster.Ray#ignoreNotIntersectedRays\n    * @type {boolean}\n    * @default true\n    * @since 0.6.0\n    */\n    this.ignoreNotIntersectedRays = true;\n    /**\n    * If set true, ray's hit points will be rounded.\n    *\n    * @name Raycaster.Ray#round\n    * @type {boolean}\n    * @default false\n    * @since 0.8.1\n    */\n    this.round = false;\n    /**\n    * If set true, ray will automatically slice intersections into array of triangles and store it in {@link Raycaster.Ray#slicedIntersections Ray.slicedIntersections}.\n    *\n    * @name Raycaster.Ray#autoSlice\n    * @type {boolean}\n    * @default false\n    * @since 0.8.0\n    */\n    this.autoSlice = false;\n    /**\n    * Array of intersections from last raycast representing field of view.\n    *\n    * @name Raycaster.Ray#intersections\n    * @type {object[]}\n    * @default []\n    * @since 0.8.0\n    */\n    this.intersections = [];\n    /**\n    * Array of triangles representing slices of field of view from last raycast.\n    *\n    * @name Raycaster.Ray#slicedIntersections\n    * @type {Phaser.Geom.Triangle[]}\n    * @default []\n    * @since 0.8.0\n    */\n    this.slicedIntersections = [];\n\n    /**\n    * Physics body for testing field of view collisions.\n    *\n    * @name Raycaster.Ray#body\n    * @type {object}\n    * @default undefined\n    * @since 0.8.0\n    */\n    //this.body = false;\n    /**\n    * Physics body type.\n    *\n    * @name Raycaster.Ray#bodyType\n    * @type {(bolean|'arcade'|'matter')}\n    * @default false\n    * @since 0.9.0\n    */\n    this.bodyType = false;\n\n    /**\n    * Ray casting stats.\n    *\n    * @name Raycaster.Ray#_stats\n    * @type {object}\n    * @private\n    * @since 0.10.0\n    * \n    * @property {string} method Used casting method (cast, castCircle, castCone).\n    * @property {number} rays Casted rays.\n    * @property {number} testedMappedObjects Tested mapped objects.\n    * @property {number} hitMappedObjects Hit mapped objects.\n    * @property {number} segments Tested segments.\n    * @property {number} time Casting time.\n    */\n    this._stats = {\n        method: 'cast',\n        rays: 0,\n        testedMappedObjects: 0,\n        hitMappedObjects: 0,\n        segments: 0,\n        time: 0\n    };\n\n    /**\n    * Ray's graphics object used for debug\n    *\n    * @name Raycaster.Ray#graphics\n    * @type {Phaser.GameObjects.Graphics}\n    * @private\n    * @since 0.10.0\n    */\n     this.graphics;\n\n    this.config(options);\n};\n\nRay.prototype = {\n    config: require('./config.js').config,\n    getStats: require('./stats.js').getStats,\n    setRay: require('./ray.js').setRay,    \n    setOrigin: require('./origin.js').setOrigin,\n    setRayRange: require('./range.js').setRayRange,\n    setAngle: require('./angle.js').setAngle,\n    setAngleDeg: require('./angle.js').setAngleDeg,\n    setCone: require('./cone.js').setCone,\n    setConeDeg: require('./cone.js').setConeDeg,\n    setDetectionRange: require('./range.js').setDetectionRange,\n    boundsInRange: require('./range.js').boundsInRange,\n    cast: require('./cast.js').cast,\n    castCircle: require('./castCircle.js').castCircle,\n    castCone: require('./castCone.js').castCone,\n    slice: require('./slice.js').slice,\n    setCollisionRange: require('./range.js').setCollisionRange,\n    enablePhysics: require('./enablePhysics.js').enablePhysics,\n    overlap: require('./overlap.js').overlap,\n    processOverlap: require('./overlap.js').processOverlap,\n    testArcadeOverlap: require('./overlap.js').testArcadeOverlap,\n    testMatterOverlap: require('./overlap.js').testMatterOverlap,\n    setCollisionCategory: require('./matter-physics-methods.js').setCollisionCategory,\n    setCollisionGroup: require('./matter-physics-methods.js').setCollisionGroup,\n    setCollidesWith: require('./matter-physics-methods.js').setCollidesWith,\n    setOnCollide: require('./matter-physics-methods.js').setOnCollide,\n    setOnCollideEnd: require('./matter-physics-methods.js').setOnCollideEnd,\n    setOnCollideActive: require('./matter-physics-methods.js').setOnCollideActive,\n    setOnCollideWith: require('./matter-physics-methods.js').setOnCollideWith,\n    drawDebug: require('./debug.js').drawDebug\n};\n","/**\n * Set ray's position, direction (angle) and range.\n *\n * @method Raycaster.Ray#setRay\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {integer} x - X coordinate.\n * @param {integer} y - Y coordinate.\n * @param {float} [angle] - Ray's angle in radians.\n * @param {integer} [range = Phaser.Math.MAX_SAFE_INTEGER] - Ray's range.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setRay(x, y, angle, rayRange = Phaser.Math.MAX_SAFE_INTEGER) {\n    this.origin.setTo(x, y);\n    this.angle = Phaser.Math.Angle.Normalize(angle);\n    this.rayRange = rayRange;\n\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y, this.detectionRange);\n    return this;\n}\n","/**\n * Slice ray's field of view represented by polygon or array of points into array of triangles.\n *\n * @method Raycaster.Ray#slice\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {(object[]|Phaser.Geom.Polygon)} [fov = {Ray#fov}] - Array of points or polygon representing field of view. If not passed, filed of view from last raycaste will be used.\n * @param {boolean} [closed = true|{Ray#fov}] - Define if field of view polygon is closed (first and last vertices sholud be connected). If fov was not passed, value depends of last type of casting.\n *\n * @return {Phaser.Geom.Triangle[]} Array of triangles representing slices of field of view.\n */\nexport function slice(intersections = this.intersections, closed = true) {\n    //if intersections is Phaser.Geom.Polygon object\n    if(!Array.isArray(intersections)) {\n        if(intersections.type === 4)\n            intersections = intersections.points;\n        else\n            return [];\n    }\n\n    if(intersections.length === 0)\n        return [];\n\n    let slices = [];\n    for(let i = 0, iLength = intersections.length - 1; i < iLength; i++) {\n        slices.push(new Phaser.Geom.Triangle(this.origin.x, this.origin.y, intersections[i].x, intersections[i].y, intersections[i+1].x, intersections[i+1].y));\n    }\n\n    if(closed)\n        slices.push(new Phaser.Geom.Triangle(this.origin.x, this.origin.y, intersections[0].x, intersections[0].y, intersections[intersections.length-1].x, intersections[intersections.length-1].y));\n\n    return slices;\n}\n","/**\r\n * Get ray statistics for last casting. Stats include\r\n * * number of casted rays,\r\n * * number of tested mapped objects,\r\n * * number of tested map segments.\r\n * * casting time\r\n *\r\n * @method Raycaster.Ray#getStats\r\n * @memberof Raycaster.Ray\r\n * @instance\r\n * @since 0.10.0\r\n *\r\n * @return {object} Statisticss from last casting.\r\n */\r\n export function getStats() {\r\n     return this._stats;\r\n }\r\n","/**\r\n* @author       Marcin Walczak <contact@marcin-walczak.pl>\r\n* @copyright    2021 Marcin Walczak\r\n* @license      {@link https://github.com/wiserim/phaser-raycaster/blob/master/LICENSE|MIT License}\r\n*/\r\n\r\n/**\r\n * @classdesc\r\n *\r\n * Raycaster class responsible for creating ray objects and managing mapped objects.\r\n * \r\n * @namespace Raycaster\r\n * @class Raycaster\r\n * @constructor\r\n * @since 6.0.0\r\n *\r\n * @param {object} [options] - Raycaster's configuration options. May include:\r\n * @param {Phaser.Scene} [options.scene] - Scene in which Raycaster will be used.\r\n * @param {integer} [options.mapSegmentCount = 0] - Number of segments of circle maps. If set to 0, map will be teste\r\n * @param {(object|object[])} [options.objects] - Game object or array of game objects to map.\r\n * @param {Phaser.Geom.Rectangle} [options.boundingBox] - Raycaster's bounding box.\r\n * @param {boolean} [options.autoUpdate = true] - If set true, automatically update dynamic maps on scene update event.\r\n * @param {bool|object} [options.debug] - Enable debug mode or configure it {@link Raycaster#debugOptions debugOptions}.\r\n */\r\nexport function Raycaster(options) {\r\n    /**\r\n    * Plugin version.\r\n    *\r\n    * @name Raycaster#version\r\n    * @type {string}\r\n    * @readonly\r\n    * @since 0.6.0\r\n    */\r\n    this.version = '0.10.1';\r\n    /**\r\n    * Raycaster's scene\r\n    *\r\n    * @name Raycaster#scene\r\n    * @type {Phaser.Scene}\r\n    * @private\r\n    * @since 0.6.0\r\n    */\r\n    this.scene;\r\n    /**\r\n    * Raycaster's graphics object used for debug\r\n    *\r\n    * @name Raycaster#graphics\r\n    * @type {Phaser.GameObjects.Graphics}\r\n    * @private\r\n    * @since 0.10.0\r\n    */\r\n    this.graphics;\r\n    /**\r\n    * Raycaster's debug config\r\n    *\r\n    * @name Raycaster#debugOptions\r\n    * @type {Object}\r\n    * @since 0.10.0\r\n    * \r\n    * @property {bool} [enable = false] Enable debug mode\r\n    * @property {bool} [maps = true] - Enable maps debug\r\n    * @param {bool} [rays = true] - Enable rays debug\r\n    * @property {bool} graphics - Debug graphics options\r\n    * @property {bool|number} [graphics.ray = 0x00ff00] - Debug ray color. Set false to disable.\r\n    * @property {bool|number} [graphics.rayPoint = 0xff00ff] - Debug ray point color. Set false to disable.\r\n    * @property {bool|number} [graphics.mapPoint = 0x00ffff] - debug map point color. Set false to disable.\r\n    * @property {bool|number} [graphics.mapSegment = 0x0000ff] - Debug map segment color. Set false to disable.\r\n    * @property {bool|number} [graphics.mapBoundingBox = 0xff0000] - Debug map bounding box color. Set false to disable.\r\n    */\r\n    this.debugOptions = {\r\n        enabled: false,\r\n        maps: true,\r\n        rays: true,\r\n        graphics: {\r\n            ray: 0x00ff00,\r\n            rayPoint: 0xff00ff,\r\n            mapPoint: 0x00ffff,\r\n            mapSegment: 0x0000ff,\r\n            mapBoundingBox: 0xff0000\r\n        }\r\n    };\r\n\r\n    /**\r\n    * Raycaster statistics.\r\n    *\r\n    * @name Raycaster.Raycaster#_stats\r\n    * @type {object}\r\n    * @private\r\n    * @since 0.10.0\r\n    * \r\n    * @property {object} mappedObjects Mapped objects statistics.\r\n    * @property {number} mappedObjects.total Mapped objects total.\r\n    * @property {number} mappedObjects.static Static maps.\r\n    * @property {number} mappedObjects.dynamic Dynamic maps.\r\n    * @property {number} mappedObjects.rectangleMaps Rectangle maps.\r\n    * @property {number} mappedObjects.polygonMaps Polygon maps.\r\n    * @property {number} mappedObjects.circleMaps Circle maps.\r\n    * @property {number} mappedObjects.lineMaps Line maps.\r\n    * @property {number} mappedObjects.containerMaps Container maps.\r\n    * @property {number} mappedObjects.tilemapMaps Tilemap maps.\r\n    * @property {number} mappedObjects.matterMaps Matter body maps.\r\n    */\r\n     this._stats = {\r\n        mappedObjects: {\r\n            total: 0,\r\n            static: 0,\r\n            dynamic: 0,\r\n            rectangleMaps: 0,\r\n            polygonMaps: 0,\r\n            circleMaps: 0,\r\n            lineMaps: 0,\r\n            containerMaps: 0,\r\n            tilemapMaps: 0,\r\n            matterMaps: 0\r\n        }\r\n     };\r\n\r\n    /**\r\n    * Raycaster's bounding box.\r\n    *\r\n    * @name Raycaster#boundingBox\r\n    * @type {Phaser.Geom.Rectangle}\r\n    * @default false\r\n    * @private\r\n    * @since 0.6.0\r\n    */\r\n    this.boundingBox = false;\r\n    /**\r\n    * Array of mapped game objects.\r\n    *\r\n    * @name Raycaster#mappedObjects\r\n    * @type {object[]}\r\n    * @since 0.6.0\r\n    */\r\n    this.mappedObjects = [];\r\n    this.sortedPoints = [];\r\n    /**\r\n    * Number of segments of circle maps.\r\n    *\r\n    * @name Raycaster#mapSegmentCount\r\n    * @type {integer}\r\n    * @default 0\r\n    * @since 0.6.0\r\n    */\r\n    this.mapSegmentCount = 0;\r\n\r\n    if(options !== undefined) {\r\n        if(options.boundingBox === undefined && options.scene !== undefined) {\r\n            if(options.scene.physics !== undefined)\r\n                options.boundingBox = options.scene.physics.world.bounds;\r\n            else if(options.scene.matter !== undefined) {\r\n                let walls = options.scene.matter.world.walls;\r\n\r\n                if(walls.top !== null) {\r\n                    options.boundingBox = new Phaser.Geom.Rectangle(\r\n                        walls.top.vertices[3].x,\r\n                        walls.top.vertices[3].y,\r\n                        walls.bottom.vertices[1].x - walls.top.vertices[3].x,\r\n                        walls.bottom.vertices[1].y - walls.top.vertices[3].y\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setOptions(options);\r\n\r\n        if(options.autoUpdate === undefined || options.autoUpdate)\r\n            //automatically update event\r\n            this.scene.events.on('update', this.update.bind(this));\r\n    }\r\n    else\r\n        //automatically update event\r\n        this.scene.events.on('update', this.update.bind(this));\r\n\r\n    return this;\r\n}\r\n\r\nRaycaster.prototype = {\r\n    /**\r\n    * Configure raycaster.\r\n    *\r\n    * @method Raycaster#setOptions\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    *\r\n    * @param {object} [options] - Raycaster's congfiguration options. May include:\r\n    * @param {Phaser.Scene} [options.scene] - Scene in which Raycaster will be used.\r\n    * @param {integer} [options.mapSegmentCount = 0] - Number of segments of circle maps.\r\n    * @param {(object|object[])} [options.objects] - Game object or array of game objects to map.\r\n    * @param {Phaser.Geom.Rectangle} [options.boundingBox] - Raycaster's bounding box.\r\n    * @param {bool|object} [options.debug] - Enable debug mode or cofigure {@link Raycaster#debugOptions debugOptions}.\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    setOptions: function(options) {\r\n        if(options.scene !== undefined) {\r\n            this.scene = options.scene;\r\n            this.graphics =  this.scene.add.graphics({ lineStyle: { width: 1, color: 0x00ff00}, fillStyle: { color: 0xff00ff } });\r\n            this.graphics.setDepth(999);\r\n        }\r\n\r\n        if(options.debug !== undefined && options.debug !== false) {\r\n            this.debugOptions.enabled = true;\r\n\r\n            if(typeof options.debug === 'object')\r\n                Object.assign(this.debugOptions, options.debug);\r\n        }\r\n            \r\n\r\n        if(options.mapSegmentCount !== undefined)\r\n            this.mapSegmentCount = options.mapSegmentCount;\r\n\r\n        if(options.objects !== undefined)\r\n            this.mapGameObjects(options.objects);\r\n\r\n        if(options.boundingBox !== undefined)\r\n            this.setBoundingBox(options.boundingBox.x, options.boundingBox.y, options.boundingBox.width, options.boundingBox.height)\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Set Raycatser's bounding box.\r\n    *\r\n    * @method Raycaster#setBoundingBox\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    *\r\n    * @param {integer} x - The X coordinate of the top left corner of bounding box.\r\n    * @param {integer} y - The Y coordinate of the top left corner of bounding box.\r\n    * @param {integer} width - The width of bounding box.\r\n    * @param {integer} height - The height of bounding box.\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    setBoundingBox: function(x, y, width, height) {\r\n        this.boundingBox = {\r\n            rectangle: new Phaser.Geom.Rectangle(x, y, width, height),\r\n            points: [],\r\n            segments: []\r\n        }\r\n        //set points\r\n        let points = [\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.left, this.boundingBox.rectangle.top),\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.right, this.boundingBox.rectangle.top),\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.right, this.boundingBox.rectangle.bottom),\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.left, this.boundingBox.rectangle.bottom)\r\n        ];\r\n\r\n        this.boundingBox.points = points;\r\n\r\n        //set segments\r\n        for(let i = 0, length = this.boundingBox.points.length; i < length; i++) {\r\n            if(i+1 < length)\r\n            this.boundingBox.segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\r\n            else\r\n            this.boundingBox.segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\r\n        }\r\n    },\r\n\r\n    /**\r\n    * Map game objects\r\n    *\r\n    * @method Raycaster#mapGameObjects\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    *\r\n    * @param {object|object[]} objects - Game object / matter body or array of game objects / matter bodies to map.\r\n    * @param {boolean} [dynamic = false] - {@link Raycaster.Map Raycaster.Map} dynamic flag (determines map will be updated automatically).\r\n    * @param {object} [options] - Additional options for {@link Raycaster.Map Raycaster.Map}\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    mapGameObjects: function(objects, dynamic = false, options = {}) {\r\n        options.dynamic = dynamic;\r\n        options.segmentCount = (options.segmentCount !== undefined) ? options.segmentCount : this.segmentCount;\r\n\r\n        if(!Array.isArray(objects))\r\n            objects = [objects];\r\n        \r\n        for(let object of objects) {\r\n            if(this.mappedObjects.includes(object))\r\n                continue;\r\n\r\n            let config = {};\r\n            for(let option in options) {\r\n                config[option] = options[option];\r\n            }\r\n            config.object = object;\r\n            \r\n            let map = new this.Map(config, this);\r\n\r\n            if(object.type === 'body' || object.type === 'composite') {\r\n                object.raycasterMap = map;\r\n            }\r\n            else if(!object.data) {\r\n                object.setDataEnabled();\r\n                object.data.set('raycasterMap', map);\r\n            }\r\n            else {\r\n                object.data.set('raycasterMap', map);\r\n            }\r\n\r\n            this.mappedObjects.push(object);\r\n\r\n            //update stats\r\n            if(object.dynamic)\r\n                this._stats.mappedObjects.dynamic++;\r\n            else\r\n                this._stats.mappedObjects.static++;\r\n            \r\n            switch(object.type) {\r\n                case 'Polygon':\r\n                    this._stats.mappedObjects.polygonMaps++;\r\n                    break;\r\n                case 'Arc':\r\n                    this._stats.mappedObjects.circleMaps++;\r\n                    break;\r\n                case 'Line':\r\n                    this._stats.mappedObjects.lineMaps++;\r\n                    break;\r\n                case 'Container':\r\n                    this._stats.mappedObjects.containerMaps++;\r\n                    break;\r\n                case 'StaticTilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps++;\r\n                    break;\r\n                case 'DynamicTilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps++;\r\n                    break;\r\n                case 'TilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps++;\r\n                    break;\r\n                case 'MatterBody':\r\n                    this._stats.mappedObjects.matterMaps++;\r\n                    break;\r\n                default:\r\n                    this._stats.mappedObjects.rectangleMaps++;\r\n            }\r\n        }\r\n\r\n        this._stats.mappedObjects.total = this.mappedObjects.length;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Remove game object's {@link Raycaster.Map Raycaster.Map} maps.\r\n    *\r\n    * @method Raycaster#removeMappedObjects\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    *\r\n    * @param {(object|object[])} objects - Game object or array of game objects which maps will be removed.\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    removeMappedObjects: function(objects) {\r\n        if(!Array.isArray(objects))\r\n            objects = [objects];\r\n\r\n        for(let object of objects) {\r\n            let index = this.mappedObjects.indexOf(object);\r\n            if(index >= 0)\r\n                this.mappedObjects.splice(index, 1);\r\n            \r\n            //update stats\r\n            if(object.dynamic)\r\n                this._stats.mappedObjects.dynamic--;\r\n            else\r\n                this._stats.mappedObjects.static--;\r\n            \r\n            switch(object.type) {\r\n                case 'Polygon':\r\n                    this._stats.mappedObjects.polygonMaps--;\r\n                    break;\r\n                case 'Arc':\r\n                    this._stats.mappedObjects.circleMaps--;\r\n                    break;\r\n                case 'Line':\r\n                    this._stats.mappedObjects.lineMaps--;\r\n                    break;\r\n                case 'Container':\r\n                    this._stats.mappedObjects.containerMaps--;\r\n                    break;\r\n                case 'StaticTilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps--;\r\n                    break;\r\n                case 'DynamicTilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps--;\r\n                    break;\r\n                case 'TilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps--;\r\n                    break;\r\n                case 'MatterBody':\r\n                    this._stats.mappedObjects.matterMaps--;\r\n                    break;\r\n                default:\r\n                    this._stats.mappedObjects.rectangleMaps--;\r\n            }\r\n        }\r\n\r\n        this._stats.mappedObjects.total = this.mappedObjects.length;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Enable game object's {@link Raycaster.Map Raycaster.Map} maps.\r\n    *\r\n    * @method Raycaster#enableMaps\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.7.2\r\n    *\r\n    * @param {(object|object[])} objects - Game object or array of game objects which maps will be enabled.\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    enableMaps: function(objects) {\r\n        if(!Array.isArray(objects))\r\n            objects = [objects];\r\n        \r\n        for(let object of objects) {\r\n            let map;\r\n\r\n            if(object.type === 'body' || object.type === 'composite') {\r\n                map = object.raycasterMap;\r\n            }\r\n            else if(object.data) {\r\n                map = object.data.get('raycasterMap');\r\n            }\r\n\r\n            if(map)\r\n                map.active = true;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Disable game object's {@link Raycaster.Map Raycaster.Map} maps.\r\n    *\r\n    * @method Raycaster#disableMaps\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.7.2\r\n    *\r\n    * @param {(object|object[])} objects - Game object or array of game objects which maps will be disabled.\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    disableMaps: function(objects) {\r\n        if(!Array.isArray(objects))\r\n            objects = [objects];\r\n        \r\n        for(let object of objects) {\r\n            let map;\r\n\r\n            if(object.type === 'body' || object.type === 'composite') {\r\n                map = object.raycasterMap;\r\n            }\r\n            else if(object.data) {\r\n                map = object.data.get('raycasterMap');\r\n            }\r\n\r\n            if(map)\r\n                map.active = false;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Updates all {@link Raycaster.Map Raycaster.Map} dynamic maps. Fired on Phaser.Scene update event.\r\n    *\r\n    * @method Raycaster#update\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    * \r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    update: function() {\r\n        //update dynamic maps\r\n        let dynamicMaps = 0;\r\n        if(this.mappedObjects.length > 0) {\r\n            for(let mapppedObject of this.mappedObjects) {\r\n                let map;\r\n\r\n                if(mapppedObject.type === 'body' || mapppedObject.type === 'composite') {\r\n                    map = mapppedObject.raycasterMap;\r\n                }\r\n                else if(mapppedObject.data) {\r\n                    map = mapppedObject.data.get('raycasterMap');\r\n                }\r\n\r\n                if(!map)\r\n                    continue;\r\n\r\n                if(map.dynamic) {\r\n                    map.updateMap();\r\n                    dynamicMaps++;\r\n                }\r\n            }\r\n\r\n            //update stats\r\n            this._stats.mappedObjects.static = this.mappedObjects.length - dynamicMaps;\r\n            this._stats.mappedObjects.dynamic = dynamicMaps;\r\n\r\n            //debug\r\n            if(this.debugOptions.enabled)\r\n                this.drawDebug();\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Create {@link Raycaster.Ray Raycaster.Ray} object.\r\n    *\r\n    * @method Raycaster#createRay\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    *\r\n    * @param {object} [options] - Ray options:\r\n    *\r\n    * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\r\n    */\r\n    createRay: function(options = {}) {\r\n        return new this.Ray(options, this);\r\n    },\r\n\r\n    /**\r\n    * Get raycaster statistics.\r\n    *\r\n    * @method Raycaster#getStats\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.10.0\r\n    *\r\n    * @return {object} Raycaster statistics.\r\n    */\r\n    getStats: function() {\r\n        return this._stats;\r\n    },\r\n\r\n    /**\r\n    * Draw maps in debug mode\r\n    *\r\n    * @method Raycaster#drawDebug\r\n    * @memberof Raycaster\r\n    * @private\r\n    * @since 0.10.0\r\n    * \r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n     drawDebug: function() {\r\n        if(this.graphics === undefined || !this.debugOptions.enabled)\r\n            return this;\r\n\r\n        //clear\r\n        this.graphics.clear();\r\n\r\n        if(!this.debugOptions.maps)\r\n            return this;\r\n\r\n        for(let object of this.mappedObjects)\r\n        {\r\n            let map;\r\n        \r\n            if(object.type === 'body' || object.type === 'composite')\r\n                map = object.raycasterMap;\r\n            else\r\n                map = object.data.get('raycasterMap');\r\n            \r\n            if(!map)\r\n                continue;\r\n\r\n            //draw bounding box\r\n            if(this.debugOptions.graphics.mapBoundingBox) {\r\n                this.graphics.lineStyle(1, this.debugOptions.graphics.mapBoundingBox);\r\n                this.graphics.strokeRectShape(map.getBoundingBox());\r\n            }\r\n\r\n            //draw segments\r\n            if(this.debugOptions.graphics.mapSegment) {\r\n                this.graphics.lineStyle(1, this.debugOptions.graphics.mapSegment);\r\n                for(let segment of map.getSegments()) {\r\n                    this.graphics.strokeLineShape(segment);\r\n                }\r\n            }\r\n\r\n            //draw points\r\n            if(this.debugOptions.graphics.mapPoint) {\r\n                this.graphics.fillStyle(this.debugOptions.graphics.mapPoint);\r\n                for(let point of map.getPoints()) {\r\n                    this.graphics.fillPoint(point.x, point.y, 3)\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRaycaster.prototype.Map = require('./map/map-core.js').Map;\r\nRaycaster.prototype.Ray = require('./ray/ray-core.js').Ray;\r\n"],"sourceRoot":""}